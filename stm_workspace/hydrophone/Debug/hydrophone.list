
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d308  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d0  0800d498  0800d498  0000e498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee68  0800ee68  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee68  0800ee68  0000fe68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee70  0800ee70  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ee70  0800ee70  0000fe70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee78  0800ee78  0000fe78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ee7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cfc  200001d4  0800f050  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  0800f050  00010ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d37  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004237  00000000  00000000  00032f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00037178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112b  00000000  00000000  00038830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f77  00000000  00000000  0003995b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acc7  00000000  00000000  000608d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efe07  00000000  00000000  0007b599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0016b3a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a0  00000000  00000000  0016b458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001727f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000284c  00000000  00000000  00172867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  001750b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d480 	.word	0x0800d480

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d480 	.word	0x0800d480

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0a5a      	lsrs	r2, r3, #9
 8000ee8:	490f      	ldr	r1, [pc, #60]	@ (8000f28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000eea:	fba1 1202 	umull	r1, r2, r1, r2
 8000eee:	09d2      	lsrs	r2, r2, #7
 8000ef0:	490e      	ldr	r1, [pc, #56]	@ (8000f2c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ef2:	fb01 f202 	mul.w	r2, r1, r2
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	09db      	lsrs	r3, r3, #7
 8000f08:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	441a      	add	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	00044b83 	.word	0x00044b83
 8000f2c:	3b9aca00 	.word	0x3b9aca00

08000f30 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	0800d6f4 	.word	0x0800d6f4

08000f74 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
      data()
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffe8 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffce 	bl	8000f30 <_ZN3ros4TimeC1Ev>
    {
    }
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0800d6dc 	.word	0x0800d6dc

08000fa4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	0a19      	lsrs	r1, r3, #8
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	0c19      	lsrs	r1, r3, #16
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	0e19      	lsrs	r1, r3, #24
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3303      	adds	r3, #3
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6899      	ldr	r1, [r3, #8]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	0a19      	lsrs	r1, r3, #8
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	4413      	add	r3, r2
 8001018:	b2ca      	uxtb	r2, r1
 800101a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	0c19      	lsrs	r1, r3, #16
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3302      	adds	r3, #2
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	0e19      	lsrs	r1, r3, #24
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3303      	adds	r3, #3
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3304      	adds	r3, #4
 8001044:	60fb      	str	r3, [r7, #12]
      return offset;
 8001046:	68fb      	ldr	r3, [r7, #12]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	440b      	add	r3, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3302      	adds	r3, #2
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3303      	adds	r3, #3
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	440b      	add	r3, r1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3304      	adds	r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	440b      	add	r3, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3302      	adds	r3, #2
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	440b      	add	r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3303      	adds	r3, #3
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	440b      	add	r3, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	061b      	lsls	r3, r3, #24
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3304      	adds	r3, #4
 800110c:	60fb      	str	r3, [r7, #12]
     return offset;
 800110e:	68fb      	ldr	r3, [r7, #12]
    }
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	0800d498 	.word	0x0800d498

08001138 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	0800d4a8 	.word	0x0800d4a8

08001154 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fef8 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001174:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800117a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001180:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
    {
    }
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800d6c4 	.word	0x0800d6c4
 8001198:	0800d4cc 	.word	0x0800d4cc

0800119c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8899      	ldrh	r1, [r3, #4]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2ca      	uxtb	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b299      	uxth	r1, r3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3302      	adds	r3, #2
 80011d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f84a 	bl	8000270 <strlen>
 80011dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 ff8a 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	3304      	adds	r3, #4
 80011f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	18d0      	adds	r0, r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4619      	mov	r1, r3
 8001200:	f00a fa93 	bl	800b72a <memcpy>
      offset += length_topic_name;
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4413      	add	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f82d 	bl	8000270 <strlen>
 8001216:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	4618      	mov	r0, r3
 8001222:	f001 ff6d 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	18d0      	adds	r0, r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4619      	mov	r1, r3
 800123a:	f00a fa76 	bl	800b72a <memcpy>
      offset += length_message_type;
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f810 	bl	8000270 <strlen>
 8001250:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	4618      	mov	r0, r3
 800125c:	f001 ff50 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3304      	adds	r3, #4
 8001264:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	18d0      	adds	r0, r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4619      	mov	r1, r3
 8001274:	f00a fa59 	bl	800b72a <memcpy>
      offset += length_md5sum;
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4413      	add	r3, r2
 800127e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	0a19      	lsrs	r1, r3, #8
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0c19      	lsrs	r1, r3, #16
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3302      	adds	r3, #2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	0e19      	lsrs	r1, r3, #24
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3303      	adds	r3, #3
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80012c8:	69fb      	ldr	r3, [r7, #28]
    }
 80012ca:	4618      	mov	r0, r3
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08a      	sub	sp, #40	@ 0x28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	889b      	ldrh	r3, [r3, #4]
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3301      	adds	r3, #1
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	440b      	add	r3, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3302      	adds	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	441a      	add	r2, r3
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 ff0d 	bl	800313e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3304      	adds	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
 800132e:	e00b      	b.n	8001348 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	441a      	add	r2, r3
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	3b01      	subs	r3, #1
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	440b      	add	r3, r1
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4413      	add	r3, r2
 800134e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001350:	429a      	cmp	r2, r3
 8001352:	d3ed      	bcc.n	8001330 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	3b01      	subs	r3, #1
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4413      	add	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b01      	subs	r3, #1
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	441a      	add	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	4413      	add	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	441a      	add	r2, r3
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f001 feda 	bl	800313e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3304      	adds	r3, #4
 800138e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	623b      	str	r3, [r7, #32]
 8001394:	e00b      	b.n	80013ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	441a      	add	r2, r3
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	440b      	add	r3, r1
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	3301      	adds	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4413      	add	r3, r2
 80013b4:	6a3a      	ldr	r2, [r7, #32]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d3ed      	bcc.n	8001396 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	3b01      	subs	r3, #1
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	441a      	add	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	441a      	add	r2, r3
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fea7 	bl	800313e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3304      	adds	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e00b      	b.n	8001414 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	441a      	add	r2, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b01      	subs	r3, #1
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	440b      	add	r3, r1
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3ed      	bcc.n	80013fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	3b01      	subs	r3, #1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	3b01      	subs	r3, #1
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	441a      	add	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	440a      	add	r2, r1
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	3301      	adds	r3, #1
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	440b      	add	r3, r1
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	4313      	orrs	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	3302      	adds	r3, #2
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	440b      	add	r3, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	4313      	orrs	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	3303      	adds	r3, #3
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	061b      	lsls	r3, r3, #24
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3304      	adds	r3, #4
 8001496:	61bb      	str	r3, [r7, #24]
     return offset;
 8001498:	69bb      	ldr	r3, [r7, #24]
    }
 800149a:	4618      	mov	r0, r3
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	0800d4d0 	.word	0x0800d4d0

080014c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0800d4ec 	.word	0x0800d4ec

080014dc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fd34 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
      level(0),
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
      msg("")
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014fc:	609a      	str	r2, [r3, #8]
    {
    }
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800d6ac 	.word	0x0800d6ac
 800150c:	0800d4cc 	.word	0x0800d4cc

08001510 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	4413      	add	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	7912      	ldrb	r2, [r2, #4]
 8001528:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe9b 	bl	8000270 <strlen>
 800153a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fddb 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3304      	adds	r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	18d0      	adds	r0, r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4619      	mov	r1, r3
 800155e:	f00a f8e4 	bl	800b72a <memcpy>
      offset += length_msg;
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
      return offset;
 800156a:	68fb      	ldr	r3, [r7, #12]
    }
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	441a      	add	r2, r3
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fdcc 	bl	800313e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3304      	adds	r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00b      	b.n	80015ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	441a      	add	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	440b      	add	r3, r1
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3ed      	bcc.n	80015b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	3b01      	subs	r3, #1
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	441a      	add	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
     return offset;
 80015fa:	693b      	ldr	r3, [r7, #16]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0800d510 	.word	0x0800d510

08001620 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	0800d524 	.word	0x0800d524

0800163c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc84 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 800164c:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	0800d694 	.word	0x0800d694

08001698 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6859      	ldr	r1, [r3, #4]
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	b2ca      	uxtb	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0a19      	lsrs	r1, r3, #8
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	3301      	adds	r3, #1
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0c19      	lsrs	r1, r3, #16
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	3302      	adds	r3, #2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	b2ca      	uxtb	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	0e19      	lsrs	r1, r3, #24
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	3303      	adds	r3, #3
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	3304      	adds	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	e02a      	b.n	800174c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	0a19      	lsrs	r1, r3, #8
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	3301      	adds	r3, #1
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4413      	add	r3, r2
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	0c19      	lsrs	r1, r3, #16
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	3302      	adds	r3, #2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	0e19      	lsrs	r1, r3, #24
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	3303      	adds	r3, #3
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	3304      	adds	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	3301      	adds	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	429a      	cmp	r2, r3
 8001754:	d3cf      	bcc.n	80016f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	0a19      	lsrs	r1, r3, #8
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	0c19      	lsrs	r1, r3, #16
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	3302      	adds	r3, #2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	0e19      	lsrs	r1, r3, #24
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	3303      	adds	r3, #3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	3304      	adds	r3, #4
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e02a      	b.n	80017fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	0a19      	lsrs	r1, r3, #8
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	b2ca      	uxtb	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0c19      	lsrs	r1, r3, #16
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	3302      	adds	r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0e19      	lsrs	r1, r3, #24
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	3303      	adds	r3, #3
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	b2ca      	uxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	3304      	adds	r3, #4
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3cf      	bcc.n	80017a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69d9      	ldr	r1, [r3, #28]
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	0a19      	lsrs	r1, r3, #8
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	0c19      	lsrs	r1, r3, #16
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	3302      	adds	r3, #2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	0e19      	lsrs	r1, r3, #24
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	3303      	adds	r3, #3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	3304      	adds	r3, #4
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e027      	b.n	80018a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fd04 	bl	8000270 <strlen>
 8001868:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fc44 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	3304      	adds	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	18d0      	adds	r0, r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4619      	mov	r1, r3
 8001894:	f009 ff49 	bl	800b72a <memcpy>
      offset += length_stringsi;
 8001898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4413      	add	r3, r2
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	3301      	adds	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3d2      	bcc.n	8001856 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80018b2:	4618      	mov	r0, r3
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b08e      	sub	sp, #56	@ 0x38
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d4:	3301      	adds	r3, #1
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	6a3a      	ldr	r2, [r7, #32]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e6:	3302      	adds	r3, #2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	6a3a      	ldr	r2, [r7, #32]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f8:	3303      	adds	r3, #3
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	4313      	orrs	r3, r2
 8001906:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190a:	3304      	adds	r3, #4
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	6a3a      	ldr	r2, [r7, #32]
 8001914:	429a      	cmp	r2, r3
 8001916:	d90a      	bls.n	800192e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f009 f8ee 	bl	800ab04 <realloc>
 8001928:	4602      	mov	r2, r0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	@ 0x30
 8001938:	e035      	b.n	80019a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	440a      	add	r2, r1
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001950:	3301      	adds	r3, #1
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	440b      	add	r3, r1
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	3302      	adds	r3, #2
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	440b      	add	r3, r1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	3303      	adds	r3, #3
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440b      	add	r3, r1
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	3304      	adds	r3, #4
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80019a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a2:	3301      	adds	r3, #1
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3c4      	bcc.n	800193a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019bc:	3301      	adds	r3, #1
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	3302      	adds	r3, #2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	3303      	adds	r3, #3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80019f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f2:	3304      	adds	r3, #4
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d90a      	bls.n	8001a16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f009 f87a 	bl	800ab04 <realloc>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a20:	e035      	b.n	8001a8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	440a      	add	r2, r1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a38:	3301      	adds	r3, #1
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	440b      	add	r3, r1
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5c:	3303      	adds	r3, #3
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	440b      	add	r3, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	3304      	adds	r3, #4
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	3214      	adds	r2, #20
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3c4      	bcc.n	8001a22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac8:	3303      	adds	r3, #3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ada:	3304      	adds	r3, #4
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d90a      	bls.n	8001afe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f009 f806 	bl	800ab04 <realloc>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b08:	e03e      	b.n	8001b88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	441a      	add	r2, r3
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fb11 	bl	800313e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b1e:	3304      	adds	r3, #4
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b26:	e00b      	b.n	8001b40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	441a      	add	r2, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	3b01      	subs	r3, #1
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	440b      	add	r3, r1
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3ed      	bcc.n	8001b28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	3b01      	subs	r3, #1
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	441a      	add	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	3220      	adds	r2, #32
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b84:	3301      	adds	r3, #1
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3bb      	bcc.n	8001b0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001b94:	4618      	mov	r0, r3
 8001b96:	3738      	adds	r7, #56	@ 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	0800d630 	.word	0x0800d630

08001bb8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	0800d548 	.word	0x0800d548

08001bd4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68d8      	ldr	r0, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6891      	ldr	r1, [r2, #8]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4798      	blx	r3
 8001c20:	4603      	mov	r3, r0
  };
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
  }
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <_ZN13STM32HardwareC1Ev+0x34>)
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	200002ec 	.word	0x200002ec

08001ca0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f804 	bl	8001cb6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f006 f91a 	bl	8007f04 <HAL_UART_Receive_DMA>
    }
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffa8 	bl	8001c42 <_ZN13STM32Hardware10getRdmaIndEv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	429c      	cmp	r4, r3
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001d08:	1c59      	adds	r1, r3, #1
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8001d28:	68fb      	ldr	r3, [r7, #12]
    }
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
	...

08001d34 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d108      	bne.n	8001d58 <_ZN13STM32Hardware5flushEv+0x24>
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <_ZN13STM32Hardware5flushEv+0x24>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <_ZN13STM32Hardware5flushEv+0x26>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d055      	beq.n	8001e0a <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d047      	beq.n	8001e04 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d217      	bcs.n	8001db8 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001da6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	89fa      	ldrh	r2, [r7, #14]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f006 f82b 	bl	8007e0c <HAL_UART_Transmit_DMA>
 8001db6:	e01f      	b.n	8001df8 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001dc4:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001dd0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	89fa      	ldrh	r2, [r7, #14]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f006 f816 	bl	8007e0c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 7102 	add.w	r1, r3, #520	@ 0x208
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	f006 f80a 	bl	8007e0c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
      }
    }
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001f0 	.word	0x200001f0

08001e18 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
      int n = length;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e2e:	bfa8      	it	ge
 8001e30:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8001e34:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001e3c:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4293      	cmp	r3, r2
 8001e44:	bf28      	it	cs
 8001e46:	4613      	movcs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001e50:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f009 fc64 	bl	800b72a <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d00b      	beq.n	8001e96 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	18d1      	adds	r1, r2, r3
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	f009 fc4a 	bl	800b72a <memcpy>
      }

      flush();
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff ff4c 	bl	8001d34 <_ZN13STM32Hardware5flushEv>
    }
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	f002 fa90 	bl	80043d0 <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <_ZN8auv_msgs20PingerTimeDifferenceC1Ev>:
      uint32_t times_length;
      typedef uint32_t _times_type;
      _times_type st_times;
      _times_type * times;

    PingerTimeDifference():
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
      frequency(0),
      times_length(0), st_times(), times(nullptr)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f844 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8001ecc:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <_ZN8auv_msgs20PingerTimeDifferenceC1Ev+0x38>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
      frequency(0),
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
      times_length(0), st_times(), times(nullptr)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
    {
    }
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800d668 	.word	0x0800d668

08001ef8 <_ZNK8auv_msgs20PingerTimeDifference9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_frequency;
      u_frequency.real = this->frequency;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_frequency.base >> (8 * 0)) & 0xFF;
 8001f0c:	68f9      	ldr	r1, [r7, #12]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	b2ca      	uxtb	r2, r1
 8001f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_frequency.base >> (8 * 1)) & 0xFF;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0a19      	lsrs	r1, r3, #8
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_frequency.base >> (8 * 2)) & 0xFF;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	0c19      	lsrs	r1, r3, #16
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	b2ca      	uxtb	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_frequency.base >> (8 * 3)) & 0xFF;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0e19      	lsrs	r1, r3, #24
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->frequency);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->times_length >> (8 * 0)) & 0xFF;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->times_length >> (8 * 1)) & 0xFF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	0a19      	lsrs	r1, r3, #8
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->times_length >> (8 * 2)) & 0xFF;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0c19      	lsrs	r1, r3, #16
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3302      	adds	r3, #2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->times_length >> (8 * 3)) & 0xFF;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	0e19      	lsrs	r1, r3, #24
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->times_length);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < times_length; i++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e037      	b.n	800200e <_ZNK8auv_msgs20PingerTimeDifference9serializeEPh+0x116>
      *(outbuffer + offset + 0) = (this->times[i] >> (8 * 0)) & 0xFF;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b2ca      	uxtb	r2, r1
 8001fb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->times[i] >> (8 * 1)) & 0xFF;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a19      	lsrs	r1, r3, #8
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->times[i] >> (8 * 2)) & 0xFF;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0c19      	lsrs	r1, r3, #16
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3302      	adds	r3, #2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->times[i] >> (8 * 3)) & 0xFF;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e19      	lsrs	r1, r3, #24
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->times[i]);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < times_length; i++){
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	3301      	adds	r3, #1
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3c2      	bcc.n	8001f9e <_ZNK8auv_msgs20PingerTimeDifference9serializeEPh+0xa6>
      }
      return offset;
 8002018:	697b      	ldr	r3, [r7, #20]
    }
 800201a:	4618      	mov	r0, r3
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_frequency;
      u_frequency.base = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	440a      	add	r2, r1
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	440b      	add	r3, r1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3302      	adds	r3, #2
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	440b      	add	r3, r1
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	4313      	orrs	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3303      	adds	r3, #3
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	4313      	orrs	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
      this->frequency = u_frequency.real;
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->frequency);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]
      uint32_t times_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
      times_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
      times_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3302      	adds	r3, #2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
      times_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3303      	adds	r3, #3
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->times_length);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3304      	adds	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
      if(times_lengthT > times_length)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d90a      	bls.n	80020ee <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh+0xc8>
        this->times = (uint32_t*)realloc(this->times, times_lengthT * sizeof(uint32_t));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f008 fd0e 	bl	800ab04 <realloc>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
      times_length = times_lengthT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]
      for( uint32_t i = 0; i < times_length; i++){
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e036      	b.n	8002168 <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh+0x142>
      this->st_times =  ((uint32_t) (*(inbuffer + offset)));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
      this->st_times |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	440b      	add	r3, r1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
      this->st_times |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3302      	adds	r3, #2
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	440b      	add	r3, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]
      this->st_times |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3303      	adds	r3, #3
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	440b      	add	r3, r1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->st_times);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3304      	adds	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
        memcpy( &(this->times[i]), &(this->st_times), sizeof(uint32_t));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	320c      	adds	r2, #12
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < times_length; i++){
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	3301      	adds	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3c3      	bcc.n	80020fa <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh+0xd4>
      }
     return offset;
 8002172:	697b      	ldr	r3, [r7, #20]
    }
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN8auv_msgs20PingerTimeDifference7getTypeEv>:

    virtual const char * getType() override { return "auv_msgs/PingerTimeDifference"; };
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <_ZN8auv_msgs20PingerTimeDifference7getTypeEv+0x18>)
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0800d56c 	.word	0x0800d56c

08002198 <_ZN8auv_msgs20PingerTimeDifference6getMD5Ev>:
    virtual const char * getMD5() override { return "190b09a555ef19ac4b340cefab903ff1"; };
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <_ZN8auv_msgs20PingerTimeDifference6getMD5Ev+0x18>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	0800d58c 	.word	0x0800d58c

080021b4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	0800d680 	.word	0x0800d680

080021d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ffe8 	bl	80021b4 <_ZN3ros15NodeHandleBase_C1Ev>
 80021e4:	4a36      	ldr	r2, [pc, #216]	@ (80022c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fd3a 	bl	8001c68 <_ZN13STM32HardwareC1Ev>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800221a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f009 fa02 	bl	800b62a <memset>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800222c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f009 f9f9 	bl	800b62a <memset>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 800223e:	2264      	movs	r2, #100	@ 0x64
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f009 f9f1 	bl	800b62a <memset>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800224e:	2264      	movs	r2, #100	@ 0x64
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f009 f9e9 	bl	800b62a <memset>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f9c4 	bl	800163c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800d654 	.word	0x0800d654

080022c4 <HAL_UART_TxCpltCallback>:
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
	*pSum = 0;
	*pSumSquares = 0;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80022cc:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <HAL_UART_TxCpltCallback+0x20>)
 80022ce:	f000 ff5c 	bl	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fd2d 	bl	8001d34 <_ZN13STM32Hardware5flushEv>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000404 	.word	0x20000404

080022e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80022f0:	4805      	ldr	r0, [pc, #20]	@ (8002308 <HAL_UART_RxCpltCallback+0x20>)
 80022f2:	f000 ff4a 	bl	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fcdc 	bl	8001cb6 <_ZN13STM32Hardware10reset_rbufEv>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000404 	.word	0x20000404

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	ed2d 8b02 	vpush	{d8}
 8002312:	f5ad 5d42 	sub.w	sp, sp, #12416	@ 0x3080
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800231a:	f001 ffe9 	bl	80042f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800231e:	f000 fc75 	bl	8002c0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002322:	f000 fe3f 	bl	8002fa4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002326:	f000 fe0f 	bl	8002f48 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 800232a:	f000 fd7d 	bl	8002e28 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 800232e:	f000 fdd7 	bl	8002ee0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8002332:	f000 fccb 	bl	8002ccc <_ZL12MX_ADC1_Initv>
  float32_t hydrophone1[1024];
  float32_t hydrophone2[1024];
  float32_t hydrophone3[1024];
  float32_t V1, V2, V3;
  float32_t v1Variance;
  float32_t v1Sum = 0;
 8002336:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800233a:	461a      	mov	r2, r3
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	f842 3c80 	str.w	r3, [r2, #-128]
  float32_t v1SumSquares = 0;
 8002344:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002348:	461a      	mov	r2, r3
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	f842 3c84 	str.w	r3, [r2, #-132]
  float32_t v2Variance;
  float32_t v2Sum = 0;
 8002352:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002356:	461a      	mov	r2, r3
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	f842 3c8c 	str.w	r3, [r2, #-140]
  float32_t v2SumSquares = 0;
 8002360:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002364:	461a      	mov	r2, r3
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	f842 3c90 	str.w	r3, [r2, #-144]
  float32_t v3Variance;
  float32_t v3Sum = 0;
 800236e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002372:	461a      	mov	r2, r3
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f842 3c98 	str.w	r3, [r2, #-152]
  float32_t v3SumSquares = 0;
 800237c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002380:	461a      	mov	r2, r3
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	f842 3c9c 	str.w	r3, [r2, #-156]
  uint32_t index = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002390:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002394:	6013      	str	r3, [r2, #0]
  uint32_t times[3];
  uint32_t frequency0 = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 800239c:	f102 0218 	add.w	r2, r2, #24
 80023a0:	6013      	str	r3, [r2, #0]
  uint32_t frequency1 = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80023a8:	f102 0214 	add.w	r2, r2, #20
 80023ac:	6013      	str	r3, [r2, #0]
  uint32_t frequency2 = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80023b4:	f102 0210 	add.w	r2, r2, #16
 80023b8:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80023ba:	217f      	movs	r1, #127	@ 0x7f
 80023bc:	4898      	ldr	r0, [pc, #608]	@ (8002620 <main+0x314>)
 80023be:	f003 f963 	bl	8005688 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 512; i++) {
 80023c2:	2300      	movs	r3, #0
 80023c4:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80023c8:	f102 0220 	add.w	r2, r2, #32
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e03b      	b.n	8002448 <main+0x13c>
	  hydrophone1[2*i + 1] = 0;
 80023d0:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80023d4:	f103 0320 	add.w	r3, r3, #32
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	3301      	adds	r3, #1
 80023de:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 80023e2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	3b6c      	subs	r3, #108	@ 0x6c
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
	  hydrophone2[2*i + 1] = 0;
 80023f2:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80023f6:	f103 0320 	add.w	r3, r3, #32
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	3301      	adds	r3, #1
 8002400:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002404:	f102 0208 	add.w	r2, r2, #8
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b6c      	subs	r3, #108	@ 0x6c
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
	  hydrophone3[2*i + 1] = 0;
 8002414:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002418:	f103 0320 	add.w	r3, r3, #32
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	3301      	adds	r3, #1
 8002422:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b6c      	subs	r3, #108	@ 0x6c
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 512; i++) {
 8002432:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002436:	f103 0320 	add.w	r3, r3, #32
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002442:	f102 0220 	add.w	r2, r2, #32
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800244c:	f103 0320 	add.w	r3, r3, #32
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002456:	dbbb      	blt.n	80023d0 <main+0xc4>
  }
  nh.initNode();
 8002458:	4872      	ldr	r0, [pc, #456]	@ (8002624 <main+0x318>)
 800245a:	f000 fea2 	bl	80031a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(hpub);
 800245e:	4972      	ldr	r1, [pc, #456]	@ (8002628 <main+0x31c>)
 8002460:	4870      	ldr	r0, [pc, #448]	@ (8002624 <main+0x318>)
 8002462:	f000 febb 	bl	80031dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  HAL_TIM_Base_Start_IT(&htim2);
 8002466:	4871      	ldr	r0, [pc, #452]	@ (800262c <main+0x320>)
 8002468:	f005 f8b8 	bl	80075dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 800246c:	486f      	ldr	r0, [pc, #444]	@ (800262c <main+0x320>)
 800246e:	f005 f8b5 	bl	80075dc <HAL_TIM_Base_Start_IT>
  //printf("HI!\n\r");
  while (1)
  {
    index = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002478:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800247c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002484:	f102 021c 	add.w	r2, r2, #28
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e22e      	b.n	80028ea <main+0x5de>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 800248c:	2204      	movs	r2, #4
 800248e:	4968      	ldr	r1, [pc, #416]	@ (8002630 <main+0x324>)
 8002490:	4863      	ldr	r0, [pc, #396]	@ (8002620 <main+0x314>)
 8002492:	f002 fad9 	bl	8004a48 <HAL_ADC_Start_DMA>
		  while (conversionComplete == 0) {
 8002496:	e000      	b.n	800249a <main+0x18e>
			  continue;
 8002498:	bf00      	nop
		  while (conversionComplete == 0) {
 800249a:	4b66      	ldr	r3, [pc, #408]	@ (8002634 <main+0x328>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f5      	bne.n	8002498 <main+0x18c>
		  }
		  conversionComplete = 0;
 80024ac:	4b61      	ldr	r3, [pc, #388]	@ (8002634 <main+0x328>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
      if (i < 3)
 80024b2:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80024b6:	f103 031c 	add.w	r3, r3, #28
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	dc0d      	bgt.n	80024dc <main+0x1d0>
    	  times[i] = usecs_elapsed;
 80024c0:	4b5d      	ldr	r3, [pc, #372]	@ (8002638 <main+0x32c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024c8:	4619      	mov	r1, r3
 80024ca:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80024ce:	f103 031c 	add.w	r3, r3, #28
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f843 2ca8 	str.w	r2, [r3, #-168]
      switch (curPhone) {
 80024dc:	4b57      	ldr	r3, [pc, #348]	@ (800263c <main+0x330>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	f200 81db 	bhi.w	800289e <main+0x592>
 80024e8:	a201      	add	r2, pc, #4	@ (adr r2, 80024f0 <main+0x1e4>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	0800289f 	.word	0x0800289f
 80024f4:	08002501 	.word	0x08002501
 80024f8:	08002649 	.word	0x08002649
 80024fc:	0800277d 	.word	0x0800277d
      	case INIT:
      		break;
      	case HYDROPHONE1:
      		calculateVoltage(adcChannels[0], adcChannels[1], &V1);
 8002500:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <main+0x324>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <main+0x324>)
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f507 5142 	add.w	r1, r7, #12416	@ 0x3080
 8002510:	f101 010e 	add.w	r1, r1, #14
 8002514:	800a      	strh	r2, [r1, #0]
 8002516:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 800251a:	f102 020c 	add.w	r2, r2, #12
 800251e:	8013      	strh	r3, [r2, #0]
 8002520:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002524:	3b30      	subs	r3, #48	@ 0x30
 8002526:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 800252a:	f102 0208 	add.w	r2, r2, #8
 800252e:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002530:	4b43      	ldr	r3, [pc, #268]	@ (8002640 <main+0x334>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253c:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002540:	f103 0304 	add.w	r3, r3, #4
 8002544:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002548:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800254c:	f103 030e 	add.w	r3, r3, #14
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800255e:	f103 0304 	add.w	r3, r3, #4
 8002562:	edd3 6a00 	vldr	s13, [r3]
 8002566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800256e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002572:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002576:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 800257a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002644 <main+0x338>
 8002586:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800258a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800258e:	f103 030c 	add.w	r3, r3, #12
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80025a4:	f103 0308 	add.w	r3, r3, #8
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	edc3 7a00 	vstr	s15, [r3]
}
 80025ae:	bf00      	nop
      		v1Sum += V1;
 80025b0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025b4:	ed13 7a20 	vldr	s14, [r3, #-128]	@ 0xffffff80
 80025b8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025bc:	ed53 7a1c 	vldr	s15, [r3, #-112]	@ 0xffffff90
 80025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025c8:	ed43 7a20 	vstr	s15, [r3, #-128]	@ 0xffffff80
      		v1SumSquares += powf(V1, 2);
 80025cc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025d0:	ed53 7a1c 	vldr	s15, [r3, #-112]	@ 0xffffff90
 80025d4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	f007 fe64 	bl	800a2a8 <powf>
 80025e0:	eeb0 7a40 	vmov.f32	s14, s0
 80025e4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025e8:	ed53 7a21 	vldr	s15, [r3, #-132]	@ 0xffffff7c
 80025ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025f4:	ed43 7a21 	vstr	s15, [r3, #-132]	@ 0xffffff7c
      		hydrophone1[2*index] = V1;
 80025f8:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80025fc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002608:	f852 2c70 	ldr.w	r2, [r2, #-112]
 800260c:	f507 5102 	add.w	r1, r7, #8320	@ 0x2080
 8002610:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3b6c      	subs	r3, #108	@ 0x6c
 800261a:	601a      	str	r2, [r3, #0]
      		break;
 800261c:	e13f      	b.n	800289e <main+0x592>
 800261e:	bf00      	nop
 8002620:	200001f4 	.word	0x200001f4
 8002624:	20000404 	.word	0x20000404
 8002628:	20000d54 	.word	0x20000d54
 800262c:	200002a0 	.word	0x200002a0
 8002630:	20000d6c 	.word	0x20000d6c
 8002634:	20000d74 	.word	0x20000d74
 8002638:	20000d68 	.word	0x20000d68
 800263c:	20000d78 	.word	0x20000d78
 8002640:	1fff75aa 	.word	0x1fff75aa
 8002644:	457ff000 	.word	0x457ff000
        case HYDROPHONE2:
        	calculateVoltage(adcChannels[0], adcChannels[2], &V2);
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <main+0x464>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b48      	ldr	r3, [pc, #288]	@ (8002770 <main+0x464>)
 8002650:	889b      	ldrh	r3, [r3, #4]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f507 5141 	add.w	r1, r7, #12352	@ 0x3040
 8002658:	f101 013e 	add.w	r1, r1, #62	@ 0x3e
 800265c:	800a      	strh	r2, [r1, #0]
 800265e:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002662:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002666:	8013      	strh	r3, [r2, #0]
 8002668:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800266c:	3b34      	subs	r3, #52	@ 0x34
 800266e:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002672:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002676:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002678:	4b3e      	ldr	r3, [pc, #248]	@ (8002774 <main+0x468>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002684:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002688:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800268c:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002690:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002694:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a2:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026a6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80026aa:	edd3 6a00 	vldr	s13, [r3]
 80026ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026be:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80026c2:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80026c6:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026ca:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002778 <main+0x46c>
 80026d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026da:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026de:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f0:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026f4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	edc3 7a00 	vstr	s15, [r3]
}
 80026fe:	bf00      	nop
      		v2Sum += V2;
 8002700:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002704:	ed13 7a23 	vldr	s14, [r3, #-140]	@ 0xffffff74
 8002708:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800270c:	ed53 7a1d 	vldr	s15, [r3, #-116]	@ 0xffffff8c
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002718:	ed43 7a23 	vstr	s15, [r3, #-140]	@ 0xffffff74
      		v2SumSquares += powf(V2, 2);
 800271c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002720:	ed53 7a1d 	vldr	s15, [r3, #-116]	@ 0xffffff8c
 8002724:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	f007 fdbc 	bl	800a2a8 <powf>
 8002730:	eeb0 7a40 	vmov.f32	s14, s0
 8002734:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002738:	ed53 7a24 	vldr	s15, [r3, #-144]	@ 0xffffff70
 800273c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002740:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002744:	ed43 7a24 	vstr	s15, [r3, #-144]	@ 0xffffff70
        	hydrophone2[2*index] = V2;
 8002748:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800274c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002758:	f852 2c74 	ldr.w	r2, [r2, #-116]
 800275c:	f507 5185 	add.w	r1, r7, #4256	@ 0x10a0
 8002760:	f101 0108 	add.w	r1, r1, #8
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3b6c      	subs	r3, #108	@ 0x6c
 800276a:	601a      	str	r2, [r3, #0]
        	break;
 800276c:	e097      	b.n	800289e <main+0x592>
 800276e:	bf00      	nop
 8002770:	20000d6c 	.word	0x20000d6c
 8002774:	1fff75aa 	.word	0x1fff75aa
 8002778:	457ff000 	.word	0x457ff000
        case HYDROPHONE3:
        	calculateVoltage(adcChannels[0], adcChannels[3], &V3);
 800277c:	4be1      	ldr	r3, [pc, #900]	@ (8002b04 <main+0x7f8>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	4be0      	ldr	r3, [pc, #896]	@ (8002b04 <main+0x7f8>)
 8002784:	88db      	ldrh	r3, [r3, #6]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f507 5141 	add.w	r1, r7, #12352	@ 0x3040
 800278c:	f101 012e 	add.w	r1, r1, #46	@ 0x2e
 8002790:	800a      	strh	r2, [r1, #0]
 8002792:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002796:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800279a:	8013      	strh	r3, [r2, #0]
 800279c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80027a0:	3b38      	subs	r3, #56	@ 0x38
 80027a2:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80027a6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80027aa:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 80027ac:	4bd6      	ldr	r3, [pc, #856]	@ (8002b08 <main+0x7fc>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b8:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80027bc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80027c0:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 80027c4:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80027c8:	f103 032e 	add.w	r3, r3, #46	@ 0x2e
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d6:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80027da:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80027de:	edd3 6a00 	vldr	s13, [r3]
 80027e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80027ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ee:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80027f2:	f103 0320 	add.w	r3, r3, #32
 80027f6:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80027fa:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80027fe:	f103 0320 	add.w	r3, r3, #32
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002b0c <main+0x800>
 800280a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800280e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002812:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002828:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	edc3 7a00 	vstr	s15, [r3]
}
 8002832:	bf00      	nop
        	hydrophone3[2*index] = V3;
 8002834:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002838:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002844:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8002848:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3b6c      	subs	r3, #108	@ 0x6c
 8002852:	601a      	str	r2, [r3, #0]
      		v3Sum += V3;
 8002854:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002858:	ed13 7a26 	vldr	s14, [r3, #-152]	@ 0xffffff68
 800285c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002860:	ed53 7a1e 	vldr	s15, [r3, #-120]	@ 0xffffff88
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800286c:	ed43 7a26 	vstr	s15, [r3, #-152]	@ 0xffffff68
      		v3SumSquares += powf(V3, 2);
 8002870:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002874:	ed53 7a1e 	vldr	s15, [r3, #-120]	@ 0xffffff88
 8002878:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800287c:	eeb0 0a67 	vmov.f32	s0, s15
 8002880:	f007 fd12 	bl	800a2a8 <powf>
 8002884:	eeb0 7a40 	vmov.f32	s14, s0
 8002888:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800288c:	ed53 7a27 	vldr	s15, [r3, #-156]	@ 0xffffff64
 8002890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002894:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002898:	ed43 7a27 	vstr	s15, [r3, #-156]	@ 0xffffff64
        	break;
 800289c:	bf00      	nop
      }
      if (i % 3 == 2) {
 800289e:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80028a2:	f103 031c 	add.w	r3, r3, #28
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	4b99      	ldr	r3, [pc, #612]	@ (8002b10 <main+0x804>)
 80028aa:	fb83 3201 	smull	r3, r2, r3, r1
 80028ae:	17cb      	asrs	r3, r1, #31
 80028b0:	1ad2      	subs	r2, r2, r3
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	1aca      	subs	r2, r1, r3
 80028ba:	2a02      	cmp	r2, #2
 80028bc:	d10a      	bne.n	80028d4 <main+0x5c8>
    	  index++;
 80028be:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80028c2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80028ce:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80028d2:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 80028d4:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80028d8:	f103 031c 	add.w	r3, r3, #28
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80028e4:	f102 021c 	add.w	r2, r2, #28
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80028ee:	f103 031c 	add.w	r3, r3, #28
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028f8:	f6ff adc8 	blt.w	800248c <main+0x180>
 80028fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002900:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002904:	f102 0204 	add.w	r2, r2, #4
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800290e:	3b04      	subs	r3, #4
 8002910:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800291a:	3b3c      	subs	r3, #60	@ 0x3c
 800291c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8002920:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002924:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 8002926:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	ed93 8a00 	vldr	s16, [r3]
 8002930:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002934:	f103 0304 	add.w	r3, r3, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	f007 fcaf 	bl	800a2a8 <powf>
 800294a:	eeb0 7a40 	vmov.f32	s14, s0
 800294e:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b14 <main+0x808>
 8002952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002956:	ee38 7a67 	vsub.f32	s14, s16, s15
 800295a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002b18 <main+0x80c>
 800295e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002962:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8002966:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 8002970:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002974:	f103 0304 	add.w	r3, r3, #4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 8002980:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002992:	3b0c      	subs	r3, #12
 8002994:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002998:	f102 0210 	add.w	r2, r2, #16
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029a2:	3b10      	subs	r3, #16
 80029a4:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80029a8:	f102 020c 	add.w	r2, r2, #12
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029b2:	3b08      	subs	r3, #8
 80029b4:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80029b8:	f102 0208 	add.w	r2, r2, #8
 80029bc:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 80029be:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80029c2:	f103 030c 	add.w	r3, r3, #12
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	ed93 8a00 	vldr	s16, [r3]
 80029cc:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80029d0:	f103 0310 	add.w	r3, r3, #16
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80029de:	eeb0 0a67 	vmov.f32	s0, s15
 80029e2:	f007 fc61 	bl	800a2a8 <powf>
 80029e6:	eeb0 7a40 	vmov.f32	s14, s0
 80029ea:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002b14 <main+0x808>
 80029ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f2:	ee38 7a67 	vsub.f32	s14, s16, s15
 80029f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002b18 <main+0x80c>
 80029fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fe:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002a02:	f103 0308 	add.w	r3, r3, #8
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 8002a0c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002a10:	f103 0310 	add.w	r3, r3, #16
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 8002a1c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002a20:	f103 030c 	add.w	r3, r3, #12
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a32:	3b18      	subs	r3, #24
 8002a34:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002a38:	f102 021c 	add.w	r2, r2, #28
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a42:	3b1c      	subs	r3, #28
 8002a44:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002a48:	f102 0218 	add.w	r2, r2, #24
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a52:	3b14      	subs	r3, #20
 8002a54:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002a58:	f102 0214 	add.w	r2, r2, #20
 8002a5c:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 8002a5e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002a62:	f103 0318 	add.w	r3, r3, #24
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	ed93 8a00 	vldr	s16, [r3]
 8002a6c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002a70:	f103 031c 	add.w	r3, r3, #28
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	f007 fc11 	bl	800a2a8 <powf>
 8002a86:	eeb0 7a40 	vmov.f32	s14, s0
 8002a8a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002b14 <main+0x808>
 8002a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a92:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002a96:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b18 <main+0x80c>
 8002a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a9e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002aa2:	f103 0314 	add.w	r3, r3, #20
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 8002aac:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002ab0:	f103 031c 	add.w	r3, r3, #28
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 8002abc:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002ac0:	f103 0318 	add.w	r3, r3, #24
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	bf00      	nop
      }
	 }
    calculateVariance(&v1Sum, &v1SumSquares, &v1Variance);
    calculateVariance(&v2Sum, &v2SumSquares, &v2Variance);
    calculateVariance(&v3Sum, &v3SumSquares, &v3Variance);
    frequency0 = get_frequency(hydrophone1, 1024, 4705882.3529);
 8002ace:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8002ad2:	f103 0308 	add.w	r3, r3, #8
 8002ad6:	3b0c      	subs	r3, #12
 8002ad8:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8002b1c <main+0x810>
 8002adc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f807 	bl	8003af4 <get_frequency>
 8002ae6:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002aea:	f103 0318 	add.w	r3, r3, #24
 8002aee:	6018      	str	r0, [r3, #0]
    frequency1 = get_frequency(hydrophone2, 1024, 4705882.3529);
 8002af0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002af4:	f103 0308 	add.w	r3, r3, #8
 8002af8:	3b2c      	subs	r3, #44	@ 0x2c
 8002afa:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002b1c <main+0x810>
 8002afe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b02:	e00d      	b.n	8002b20 <main+0x814>
 8002b04:	20000d6c 	.word	0x20000d6c
 8002b08:	1fff75aa 	.word	0x1fff75aa
 8002b0c:	457ff000 	.word	0x457ff000
 8002b10:	55555556 	.word	0x55555556
 8002b14:	44000000 	.word	0x44000000
 8002b18:	43ff8000 	.word	0x43ff8000
 8002b1c:	4a8f9cb5 	.word	0x4a8f9cb5
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 ffe7 	bl	8003af4 <get_frequency>
 8002b26:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002b2a:	f103 0314 	add.w	r3, r3, #20
 8002b2e:	6018      	str	r0, [r3, #0]
    frequency2 = get_frequency(hydrophone3, 1024, 4705882.3529);
 8002b30:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b34:	3b2c      	subs	r3, #44	@ 0x2c
 8002b36:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 8002b1c <main+0x810>
 8002b3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ffd8 	bl	8003af4 <get_frequency>
 8002b44:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002b48:	f103 0310 	add.w	r3, r3, #16
 8002b4c:	6018      	str	r0, [r3, #0]
    v1Sum = 0;
 8002b4e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002b52:	461a      	mov	r2, r3
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	f842 3c80 	str.w	r3, [r2, #-128]
    v1SumSquares = 0;
 8002b5c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002b60:	461a      	mov	r2, r3
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f842 3c84 	str.w	r3, [r2, #-132]
	v2Sum = 0;
 8002b6a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	f842 3c8c 	str.w	r3, [r2, #-140]
	v2SumSquares = 0;
 8002b78:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	f842 3c90 	str.w	r3, [r2, #-144]
	v3Sum = 0;
 8002b86:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	f842 3c98 	str.w	r3, [r2, #-152]
	v3SumSquares = 0;
 8002b94:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	f842 3c9c 	str.w	r3, [r2, #-156]
    if (frequency0 == frequency1 && frequency0 == frequency2) {
 8002ba2:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002ba6:	f103 0318 	add.w	r3, r3, #24
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002bb0:	f103 0314 	add.w	r3, r3, #20
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11e      	bne.n	8002bf8 <main+0x8ec>
 8002bba:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002bbe:	f103 0318 	add.w	r3, r3, #24
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002bc8:	f103 0310 	add.w	r3, r3, #16
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d112      	bne.n	8002bf8 <main+0x8ec>
		hmsg.frequency = frequency0;
 8002bd2:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002bd6:	f103 0318 	add.w	r3, r3, #24
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <main+0x8f4>)
 8002bde:	6053      	str	r3, [r2, #4]
		hmsg.times = times;
 8002be0:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <main+0x8f4>)
 8002be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002be6:	3b28      	subs	r3, #40	@ 0x28
 8002be8:	6113      	str	r3, [r2, #16]
		hmsg.times_length = 3;
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <main+0x8f4>)
 8002bec:	2203      	movs	r2, #3
 8002bee:	609a      	str	r2, [r3, #8]
		hpub.publish(&hmsg);
 8002bf0:	4903      	ldr	r1, [pc, #12]	@ (8002c00 <main+0x8f4>)
 8002bf2:	4804      	ldr	r0, [pc, #16]	@ (8002c04 <main+0x8f8>)
 8002bf4:	f7ff f805 	bl	8001c02 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    }
	  nh.spinOnce();
 8002bf8:	4803      	ldr	r0, [pc, #12]	@ (8002c08 <main+0x8fc>)
 8002bfa:	f000 fb1f 	bl	800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002bfe:	e438      	b.n	8002472 <main+0x166>
 8002c00:	20000d40 	.word	0x20000d40
 8002c04:	20000d54 	.word	0x20000d54
 8002c08:	20000404 	.word	0x20000404

08002c0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b096      	sub	sp, #88	@ 0x58
 8002c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	2244      	movs	r2, #68	@ 0x44
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f008 fd05 	bl	800b62a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c20:	463b      	mov	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c32:	f003 fab1 	bl	8006198 <HAL_PWREx_ControlVoltageScaling>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002c46:	f000 fa55 	bl	80030f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c54:	2310      	movs	r3, #16
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c64:	230a      	movs	r3, #10
 8002c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c68:	2307      	movs	r3, #7
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fae3 	bl	8006244 <HAL_RCC_OscConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002c8e:	f000 fa31 	bl	80030f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c92:	230f      	movs	r3, #15
 8002c94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c96:	2303      	movs	r3, #3
 8002c98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	2104      	movs	r1, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 fede 	bl	8006a6c <HAL_RCC_ClockConfig>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002cc0:	f000 fa18 	bl	80030f4 <Error_Handler>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3758      	adds	r7, #88	@ 0x58
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002ce4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e14 <_ZL12MX_ADC1_Initv+0x148>)
 8002ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ce8:	4b49      	ldr	r3, [pc, #292]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cee:	4b48      	ldr	r3, [pc, #288]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cf4:	4b46      	ldr	r3, [pc, #280]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002cfa:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d00:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d02:	2204      	movs	r2, #4
 8002d04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d06:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d0c:	4b40      	ldr	r3, [pc, #256]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8002d12:	4b3f      	ldr	r3, [pc, #252]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d14:	2204      	movs	r2, #4
 8002d16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d18:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d20:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d26:	4b3a      	ldr	r3, [pc, #232]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d2c:	4b38      	ldr	r3, [pc, #224]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d34:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d3c:	4b34      	ldr	r3, [pc, #208]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d44:	4832      	ldr	r0, [pc, #200]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d46:	f001 fd3d 	bl	80047c4 <HAL_ADC_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <_ZL12MX_ADC1_Initv+0x92>
  {
    Error_Handler();
 8002d5a:	f000 f9cb 	bl	80030f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <_ZL12MX_ADC1_Initv+0x14c>)
 8002d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d62:	2306      	movs	r3, #6
 8002d64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d6a:	237f      	movs	r3, #127	@ 0x7f
 8002d6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d76:	463b      	mov	r3, r7
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4825      	ldr	r0, [pc, #148]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002d7c:	f001 fefc 	bl	8004b78 <HAL_ADC_ConfigChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 8002d90:	f000 f9b0 	bl	80030f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <_ZL12MX_ADC1_Initv+0x150>)
 8002d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d98:	230c      	movs	r3, #12
 8002d9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4619      	mov	r1, r3
 8002da0:	481b      	ldr	r0, [pc, #108]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002da2:	f001 fee9 	bl	8004b78 <HAL_ADC_ConfigChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <_ZL12MX_ADC1_Initv+0xee>
  {
    Error_Handler();
 8002db6:	f000 f99d 	bl	80030f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002dba:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <_ZL12MX_ADC1_Initv+0x154>)
 8002dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002dbe:	2312      	movs	r3, #18
 8002dc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4812      	ldr	r0, [pc, #72]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002dc8:	f001 fed6 	bl	8004b78 <HAL_ADC_ConfigChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <_ZL12MX_ADC1_Initv+0x114>
  {
    Error_Handler();
 8002ddc:	f000 f98a 	bl	80030f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002de0:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <_ZL12MX_ADC1_Initv+0x158>)
 8002de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002de4:	2318      	movs	r3, #24
 8002de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	4619      	mov	r1, r3
 8002dec:	4808      	ldr	r0, [pc, #32]	@ (8002e10 <_ZL12MX_ADC1_Initv+0x144>)
 8002dee:	f001 fec3 	bl	8004b78 <HAL_ADC_ConfigChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8002e02:	f000 f977 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200001f4 	.word	0x200001f4
 8002e14:	50040000 	.word	0x50040000
 8002e18:	80000001 	.word	0x80000001
 8002e1c:	43210000 	.word	0x43210000
 8002e20:	2e300800 	.word	0x2e300800
 8002e24:	25b00200 	.word	0x25b00200

08002e28 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e46:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e4e:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e54:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e5c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e62:	4b1e      	ldr	r3, [pc, #120]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e68:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e6e:	481b      	ldr	r0, [pc, #108]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e70:	f004 fb5c 	bl	800752c <HAL_TIM_Base_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002e84:	f000 f936 	bl	80030f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e8e:	f107 0310 	add.w	r3, r7, #16
 8002e92:	4619      	mov	r1, r3
 8002e94:	4811      	ldr	r0, [pc, #68]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002e96:	f004 fcf7 	bl	8007888 <HAL_TIM_ConfigClockSource>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002eaa:	f000 f923 	bl	80030f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4808      	ldr	r0, [pc, #32]	@ (8002edc <_ZL12MX_TIM2_Initv+0xb4>)
 8002ebc:	f004 fed4 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002ed0:	f000 f910 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200002a0 	.word	0x200002a0

08002ee0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ee6:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <_ZL19MX_USART2_UART_Initv+0x64>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f22:	4807      	ldr	r0, [pc, #28]	@ (8002f40 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002f24:	f004 ff24 	bl	8007d70 <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8002f38:	f000 f8dc 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200002ec 	.word	0x200002ec
 8002f44:	40004400 	.word	0x40004400

08002f48 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f4e:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <_ZL11MX_DMA_Initv+0x58>)
 8002f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f52:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <_ZL11MX_DMA_Initv+0x58>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <_ZL11MX_DMA_Initv+0x58>)
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	200b      	movs	r0, #11
 8002f6c:	f002 fcc7 	bl	80058fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f70:	200b      	movs	r0, #11
 8002f72:	f002 fce0 	bl	8005936 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2010      	movs	r0, #16
 8002f7c:	f002 fcbf 	bl	80058fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002f80:	2010      	movs	r0, #16
 8002f82:	f002 fcd8 	bl	8005936 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2011      	movs	r0, #17
 8002f8c:	f002 fcb7 	bl	80058fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002f90:	2011      	movs	r0, #17
 8002f92:	f002 fcd0 	bl	8005936 <HAL_NVIC_EnableIRQ>

}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fba:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fd2:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd6:	4a24      	ldr	r2, [pc, #144]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fde:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	4b1f      	ldr	r3, [pc, #124]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003006:	4a18      	ldr	r2, [pc, #96]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800300e:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <_ZL12MX_GPIO_Initv+0xc4>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	21a0      	movs	r1, #160	@ 0xa0
 800301e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003022:	f003 f893 	bl	800614c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800302a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800302c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	480b      	ldr	r0, [pc, #44]	@ (800306c <_ZL12MX_GPIO_Initv+0xc8>)
 800303e:	f002 ff0b 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 8003042:	23a0      	movs	r3, #160	@ 0xa0
 8003044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800305c:	f002 fefc 	bl	8005e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	@ 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	48000800 	.word	0x48000800

08003070 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	usecs_elapsed += 10;
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330a      	adds	r3, #10
 800307e:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000d68 	.word	0x20000d68

08003094 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	switch (curPhone) {
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <HAL_ADC_ConvCpltCallback+0x58>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d819      	bhi.n	80030da <HAL_ADC_ConvCpltCallback+0x46>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <HAL_ADC_ConvCpltCallback+0x18>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c5 	.word	0x080030c5
 80030b4:	080030cd 	.word	0x080030cd
 80030b8:	080030d5 	.word	0x080030d5
	case INIT:
		curPhone = HYDROPHONE1;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_ADC_ConvCpltCallback+0x58>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
		break;
 80030c2:	e00a      	b.n	80030da <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE1:
		curPhone = HYDROPHONE2;
 80030c4:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_ADC_ConvCpltCallback+0x58>)
 80030c6:	2202      	movs	r2, #2
 80030c8:	701a      	strb	r2, [r3, #0]
		break;
 80030ca:	e006      	b.n	80030da <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE2:
		curPhone = HYDROPHONE3;
 80030cc:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <HAL_ADC_ConvCpltCallback+0x58>)
 80030ce:	2203      	movs	r2, #3
 80030d0:	701a      	strb	r2, [r3, #0]
		break;
 80030d2:	e002      	b.n	80030da <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE3:
		curPhone = HYDROPHONE1;
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_ADC_ConvCpltCallback+0x58>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
  }
  conversionComplete = 1;
 80030da:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000d78 	.word	0x20000d78
 80030f0:	20000d74 	.word	0x20000d74

080030f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <Error_Handler+0x8>

08003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e00c      	b.n	800312a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	fa22 f103 	lsr.w	r1, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	b2ca      	uxtb	r2, r1
 8003122:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d9ef      	bls.n	8003110 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e010      	b.n	8003176 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	440a      	add	r2, r1
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	4611      	mov	r1, r2
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	00d2      	lsls	r2, r2, #3
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d9eb      	bls.n	8003154 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3304      	adds	r3, #4
  }
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fd76 	bl	8001ca0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e01d      	b.n	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d111      	bne.n	8003222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	60da      	str	r2, [r3, #12]
        return true;
 800321e:	2301      	movs	r3, #1
 8003220:	e006      	b.n	8003230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3301      	adds	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b18      	cmp	r3, #24
 800322c:	ddde      	ble.n	80031ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800322e:	2300      	movs	r3, #0
  }
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fe2b 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800324e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800325e:	4293      	cmp	r3, r2
 8003260:	d903      	bls.n	800326a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d903      	bls.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fe04 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad2      	subs	r2, r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80032a8:	429a      	cmp	r2, r3
 80032aa:	bf8c      	ite	hi
 80032ac:	2301      	movhi	r3, #1
 80032ae:	2300      	movls	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80032b6:	f06f 0301 	mvn.w	r3, #1
 80032ba:	e194      	b.n	80035e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fd09 	bl	8001cd8 <_ZN13STM32Hardware4readEv>
 80032c6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f2c0 8174 	blt.w	80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d11e      	bne.n	8003328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	b2d1      	uxtb	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	460a      	mov	r2, r1
 8003302:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800330c:	1e5a      	subs	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1b4      	bne.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2208      	movs	r2, #8
 8003322:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003326:	e7af      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800332e:	2b00      	cmp	r3, #0
 8003330:	d128      	bne.n	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2bff      	cmp	r3, #255	@ 0xff
 8003336:	d10d      	bne.n	8003354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f103 0214 	add.w	r2, r3, #20
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8003352:	e799      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fda3 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	bf8c      	ite	hi
 800336c:	2301      	movhi	r3, #1
 800336e:	2300      	movls	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d088      	beq.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 800337e:	f06f 0301 	mvn.w	r3, #1
 8003382:	e130      	b.n	80035e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800338a:	2b01      	cmp	r3, #1
 800338c:	d118      	bne.n	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2bfe      	cmp	r3, #254	@ 0xfe
 8003392:	d107      	bne.n	80033a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80033a2:	e771      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f47f af68 	bne.w	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f918 	bl	80035ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80033be:	e763      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d113      	bne.n	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80033f0:	e74a      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d110      	bne.n	800341e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	441a      	add	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800341c:	e734      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003424:	2b04      	cmp	r3, #4
 8003426:	d116      	bne.n	8003456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800342e:	425a      	negs	r2, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	bf58      	it	pl
 8003436:	4253      	negpl	r3, r2
 8003438:	2bff      	cmp	r3, #255	@ 0xff
 800343a:	d107      	bne.n	800344c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800344a:	e71d      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003454:	e718      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800345c:	2b05      	cmp	r3, #5
 800345e:	d10f      	bne.n	8003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800347e:	e703      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003486:	2b06      	cmp	r3, #6
 8003488:	d117      	bne.n	80034ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2207      	movs	r2, #7
 80034a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f47f aeec 	bne.w	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2208      	movs	r2, #8
 80034b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80034b8:	e6e6      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	f47f aee1 	bne.w	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80034d4:	425a      	negs	r2, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	bf58      	it	pl
 80034dc:	4253      	negpl	r3, r2
 80034de:	2bff      	cmp	r3, #255	@ 0xff
 80034e0:	f47f aed2 	bne.w	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d110      	bne.n	8003510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f87d 	bl	80035ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f898 	bl	800362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800350e:	e06a      	b.n	80035e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003516:	2b0a      	cmp	r3, #10
 8003518:	d107      	bne.n	800352a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f960 	bl	80037e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003528:	e6ae      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003530:	2b06      	cmp	r3, #6
 8003532:	d10e      	bne.n	8003552 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe f9b9 	bl	80018ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8003550:	e69a      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003558:	2b0b      	cmp	r3, #11
 800355a:	d104      	bne.n	8003566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8003564:	e690      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800356c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f43f ae84 	beq.w	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003586:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003590:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800359a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80035a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80035b2:	4611      	mov	r1, r2
 80035b4:	4798      	blx	r3
    while (true)
 80035b6:	e667      	b.n	8003288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80035b8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d906      	bls.n	80035e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f809 	bl	80035ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80035e4:	2300      	movs	r3, #0
  }
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fcba 	bl	8000f74 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f107 020c 	add.w	r2, r7, #12
 800360a:	210a      	movs	r1, #10
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fc45 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800362a:	b590      	push	{r4, r7, lr}
 800362c:	b08b      	sub	sp, #44	@ 0x2c
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fd8c 	bl	8001154 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003640:	e062      	b.n	8003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d056      	beq.n	8003702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	b29b      	uxth	r3, r3
 8003666:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4608      	mov	r0, r1
 80036a2:	4798      	blx	r3
 80036a4:	4603      	mov	r3, r0
 80036a6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4608      	mov	r0, r1
 80036d0:	4798      	blx	r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80036d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036da:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681c      	ldr	r4, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fa9a 	bl	8001c2a <_ZN3ros9Publisher15getEndpointTypeEv>
 80036f6:	4601      	mov	r1, r0
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	461a      	mov	r2, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	3301      	adds	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	2b18      	cmp	r3, #24
 800370c:	dd99      	ble.n	8003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	e05e      	b.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d053      	beq.n	80037cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003728:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b29b      	uxth	r3, r3
 8003734:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800374e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003756:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800375a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4608      	mov	r0, r1
 8003766:	4798      	blx	r3
 8003768:	4603      	mov	r3, r0
 800376a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4608      	mov	r0, r1
 800378c:	4798      	blx	r3
 800378e:	4603      	mov	r3, r0
 8003790:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003796:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681c      	ldr	r4, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80037a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80037b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3304      	adds	r3, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4608      	mov	r0, r1
 80037be:	4798      	blx	r3
 80037c0:	4601      	mov	r1, r0
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	461a      	mov	r2, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	3301      	adds	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	2b18      	cmp	r3, #24
 80037d6:	dd9d      	ble.n	8003714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 80037e0:	bf00      	nop
 80037e2:	372c      	adds	r7, #44	@ 0x2c
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}

080037e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fbbc 	bl	8000f74 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fb4f 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 8003806:	4602      	mov	r2, r0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fc1b 	bl	8001054 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4915      	ldr	r1, [pc, #84]	@ (8003878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003824:	fba1 1303 	umull	r1, r3, r1, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	4413      	add	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800382e:	6939      	ldr	r1, [r7, #16]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003834:	fba3 0302 	umull	r0, r3, r3, r2
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800383e:	fb00 f303 	mul.w	r3, r0, r3
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	4a0d      	ldr	r2, [pc, #52]	@ (800387c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	440b      	add	r3, r1
 800384c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800384e:	f107 0308 	add.w	r3, r7, #8
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8a6 	bl	80039a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fb1f 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 8003866:	4602      	mov	r2, r0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	10624dd3 	.word	0x10624dd3
 800387c:	000f4240 	.word	0x000f4240

08003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b63      	cmp	r3, #99	@ 0x63
 8003890:	dd09      	ble.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003898:	f083 0301 	eor.w	r3, r3, #1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e079      	b.n	800399a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 80038b2:	3207      	adds	r2, #7
 80038b4:	4611      	mov	r1, r2
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
 80038ba:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22ff      	movs	r2, #255	@ 0xff
 80038c0:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22fe      	movs	r2, #254	@ 0xfe
 80038c8:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 80038f2:	4413      	add	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	b21b      	sxth	r3, r3
 800390e:	121b      	asrs	r3, r3, #8
 8003910:	b21b      	sxth	r3, r3
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800391e:	2305      	movs	r3, #5
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e00c      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4413      	add	r3, r2
 800392a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3301      	adds	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3306      	adds	r3, #6
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	429a      	cmp	r2, r3
 8003946:	dded      	ble.n	8003924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3307      	adds	r3, #7
 800394c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	425a      	negs	r2, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	bf58      	it	pl
 8003958:	4253      	negpl	r3, r2
 800395a:	b2da      	uxtb	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	6179      	str	r1, [r7, #20]
 8003962:	43d2      	mvns	r2, r2
 8003964:	b2d1      	uxtb	r1, r2
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	460a      	mov	r2, r1
 800396c:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003976:	dc0a      	bgt.n	800398e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1d18      	adds	r0, r3, #4
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4619      	mov	r1, r3
 8003986:	f7fe fa47 	bl	8001e18 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e005      	b.n	800399a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800398e:	4905      	ldr	r1, [pc, #20]	@ (80039a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f849 	bl	8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	0800d5b0 	.word	0x0800d5b0

080039a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fa74 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 80039bc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4915      	ldr	r1, [pc, #84]	@ (8003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039c6:	fba1 1303 	umull	r1, r3, r1, r3
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039de:	fba3 0302 	umull	r0, r3, r3, r2
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039e8:	fb00 f303 	mul.w	r3, r0, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	1aca      	subs	r2, r1, r3
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80039f8:	4413      	add	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7fd fa62 	bl	8000ed8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	10624dd3 	.word	0x10624dd3
 8003a20:	000f4240 	.word	0x000f4240
 8003a24:	3b9aca00 	.word	0x3b9aca00

08003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	2103      	movs	r1, #3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f804 	bl	8003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fd40 	bl	80014dc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a5c:	7afb      	ldrb	r3, [r7, #11]
 8003a5e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f107 0214 	add.w	r2, r7, #20
 8003a6e:	2107      	movs	r1, #7
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	4798      	blx	r3
  }
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d110      	bne.n	8003aae <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10b      	bne.n	8003aae <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8003a96:	4808      	ldr	r0, [pc, #32]	@ (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003a98:	f7fe fb9c 	bl	80021d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
auv_msgs::PingerTimeDifference hmsg;
 8003a9c:	4807      	ldr	r0, [pc, #28]	@ (8003abc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003a9e:	f7fe fa0d 	bl	8001ebc <_ZN8auv_msgs20PingerTimeDifferenceC1Ev>
ros::Publisher hpub("/sensors/hydrophones/pinger_time_difference", &hmsg);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4a05      	ldr	r2, [pc, #20]	@ (8003abc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003aa6:	4906      	ldr	r1, [pc, #24]	@ (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003aa8:	4806      	ldr	r0, [pc, #24]	@ (8003ac4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003aaa:	f7fe f893 	bl	8001bd4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000404 	.word	0x20000404
 8003abc:	20000d40 	.word	0x20000d40
 8003ac0:	0800d5ec 	.word	0x0800d5ec
 8003ac4:	20000d54 	.word	0x20000d54

08003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    return configured_;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_GLOBAL__sub_I_hadc1>:
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7ff ffc6 	bl	8003a7c <_Z41__static_initialization_and_destruction_0ii>
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <get_frequency>:
    return freq[target_bin] / sum;
}


uint32_t get_frequency(float32_t* buff, uint32_t size, float32_t fs)
{
 8003af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af8:	b095      	sub	sp, #84	@ 0x54
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6178      	str	r0, [r7, #20]
 8003afe:	6139      	str	r1, [r7, #16]
 8003b00:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b04:	466b      	mov	r3, sp
 8003b06:	60bb      	str	r3, [r7, #8]
    uint32_t target_frequencies[] = {25000, 30000, 35000, 40000};
 8003b08:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <get_frequency+0x1c8>)
 8003b0a:	f107 061c 	add.w	r6, r7, #28
 8003b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b10:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    float32_t temp_buff[size];
 8003b14:	6939      	ldr	r1, [r7, #16]
 8003b16:	460b      	mov	r3, r1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6039      	str	r1, [r7, #0]
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	0143      	lsls	r3, r0, #5
 8003b2e:	6838      	ldr	r0, [r7, #0]
 8003b30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b34:	6838      	ldr	r0, [r7, #0]
 8003b36:	0142      	lsls	r2, r0, #5
 8003b38:	2300      	movs	r3, #0
 8003b3a:	468a      	mov	sl, r1
 8003b3c:	469b      	mov	fp, r3
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003b4a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003b4e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003b52:	008b      	lsls	r3, r1, #2
 8003b54:	3307      	adds	r3, #7
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	ebad 0d03 	sub.w	sp, sp, r3
 8003b5e:	466b      	mov	r3, sp
 8003b60:	3303      	adds	r3, #3
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int i = 0; i < size; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b6c:	e00c      	b.n	8003b88 <get_frequency+0x94>
    {
        temp_buff[i] = buff[i];
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8003b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b84:	3301      	adds	r3, #1
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d8ee      	bhi.n	8003b6e <get_frequency+0x7a>
    }

    arm_cfft_f32(&instance, temp_buff, 0, 0);
 8003b90:	2300      	movs	r3, #0
 8003b92:	2200      	movs	r2, #0
 8003b94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b96:	484a      	ldr	r0, [pc, #296]	@ (8003cc0 <get_frequency+0x1cc>)
 8003b98:	f005 ff0a 	bl	80099b0 <arm_cfft_f32>

    float32_t freq[size / 2];
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	0859      	lsrs	r1, r3, #1
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	4688      	mov	r8, r1
 8003baa:	4699      	mov	r9, r3
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003bb8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003bbc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	461d      	mov	r5, r3
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	016b      	lsls	r3, r5, #5
 8003bd0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003bd4:	0162      	lsls	r2, r4, #5
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	3307      	adds	r3, #7
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	ebad 0d03 	sub.w	sp, sp, r3
 8003be2:	466b      	mov	r3, sp
 8003be4:	3303      	adds	r3, #3
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30
    arm_cmplx_mag_f32(temp_buff, freq, size / 2);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bf6:	f005 ff73 	bl	8009ae0 <arm_cmplx_mag_f32>

    uint32_t max = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t frequency = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t target_bin = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 0; i < 4; i++) {
 8003c06:	2300      	movs	r3, #0
 8003c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0a:	e04b      	b.n	8003ca4 <get_frequency+0x1b0>
        target_bin = (uint32_t) round(target_frequencies[i] * size / fs);
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	3348      	adds	r3, #72	@ 0x48
 8003c12:	f107 0208 	add.w	r2, r7, #8
 8003c16:	4413      	add	r3, r2
 8003c18:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c32:	ee16 0a90 	vmov	r0, s13
 8003c36:	f7fc fc87 	bl	8000548 <__aeabi_f2d>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	ec43 2b10 	vmov	d0, r2, r3
 8003c42:	f006 fbb5 	bl	800a3b0 <round>
 8003c46:	ec53 2b10 	vmov	r2, r3, d0
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc ffab 	bl	8000ba8 <__aeabi_d2uiz>
 8003c52:	4603      	mov	r3, r0
 8003c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (freq[target_bin] > max) {
 8003c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	ed93 7a00 	vldr	s14, [r3]
 8003c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c74:	dd13      	ble.n	8003c9e <get_frequency+0x1aa>
        	frequency = target_frequencies[i];
 8003c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	3348      	adds	r3, #72	@ 0x48
 8003c7c:	f107 0208 	add.w	r2, r7, #8
 8003c80:	4413      	add	r3, r2
 8003c82:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003c86:	647b      	str	r3, [r7, #68]	@ 0x44
        	max = freq[target_bin];
 8003c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c98:	ee17 3a90 	vmov	r3, s15
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < 4; i++) {
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	ddb0      	ble.n	8003c0c <get_frequency+0x118>
        }
    }

    return frequency;
 8003caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cac:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3754      	adds	r7, #84	@ 0x54
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	bf00      	nop
 8003cbc:	0800d618 	.word	0x0800d618
 8003cc0:	0800d704 	.word	0x0800d704

08003cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <HAL_MspInit+0x44>)
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cce:	4a0e      	ldr	r2, [pc, #56]	@ (8003d08 <HAL_MspInit+0x44>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <HAL_MspInit+0x44>)
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_MspInit+0x44>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce6:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <HAL_MspInit+0x44>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_MspInit+0x44>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b0a2      	sub	sp, #136	@ 0x88
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	2260      	movs	r2, #96	@ 0x60
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f007 fc7c 	bl	800b62a <memset>
  if(hadc->Instance==ADC1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a47      	ldr	r2, [pc, #284]	@ (8003e54 <HAL_ADC_MspInit+0x148>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	f040 8087 	bne.w	8003e4c <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003d44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003d52:	2308      	movs	r3, #8
 8003d54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003d56:	2307      	movs	r3, #7
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003d62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 f8a1 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003d78:	f7ff f9bc 	bl	80030f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003d7c:	4b36      	ldr	r3, [pc, #216]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d80:	4a35      	ldr	r2, [pc, #212]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d88:	4b33      	ldr	r3, [pc, #204]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d94:	4b30      	ldr	r3, [pc, #192]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d98:	4a2f      	ldr	r2, [pc, #188]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dac:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db0:	4a29      	ldr	r2, [pc, #164]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db8:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <HAL_ADC_MspInit+0x14c>)
 8003dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003dc4:	2350      	movs	r3, #80	@ 0x50
 8003dc6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dc8:	230b      	movs	r3, #11
 8003dca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dda:	f002 f83d 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dde:	2302      	movs	r3, #2
 8003de0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003de2:	230b      	movs	r3, #11
 8003de4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003dee:	4619      	mov	r1, r3
 8003df0:	481a      	ldr	r0, [pc, #104]	@ (8003e5c <HAL_ADC_MspInit+0x150>)
 8003df2:	f002 f831 	bl	8005e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003df6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003df8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e64 <HAL_ADC_MspInit+0x158>)
 8003dfa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e02:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e08:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e0e:	4b14      	ldr	r3, [pc, #80]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e14:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e1c:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003e24:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e30:	480b      	ldr	r0, [pc, #44]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e32:	f001 fd9b 	bl	800596c <HAL_DMA_Init>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003e3c:	f7ff f95a 	bl	80030f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a07      	ldr	r2, [pc, #28]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e44:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003e46:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <HAL_ADC_MspInit+0x154>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e4c:	bf00      	nop
 8003e4e:	3788      	adds	r7, #136	@ 0x88
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	50040000 	.word	0x50040000
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	48000400 	.word	0x48000400
 8003e60:	20000258 	.word	0x20000258
 8003e64:	40020008 	.word	0x40020008

08003e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e78:	d113      	bne.n	8003ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <HAL_TIM_Base_MspInit+0x44>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003eac <HAL_TIM_Base_MspInit+0x44>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e86:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <HAL_TIM_Base_MspInit+0x44>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2100      	movs	r1, #0
 8003e96:	201c      	movs	r0, #28
 8003e98:	f001 fd31 	bl	80058fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e9c:	201c      	movs	r0, #28
 8003e9e:	f001 fd4a 	bl	8005936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b0a2      	sub	sp, #136	@ 0x88
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	2260      	movs	r2, #96	@ 0x60
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f007 fbaa 	bl	800b62a <memset>
  if(huart->Instance==USART2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4d      	ldr	r2, [pc, #308]	@ (8004010 <HAL_UART_MspInit+0x160>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	f040 8093 	bne.w	8004008 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 ffe0 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003efa:	f7ff f8fb 	bl	80030f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003efe:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <HAL_UART_MspInit+0x164>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	4a44      	ldr	r2, [pc, #272]	@ (8004014 <HAL_UART_MspInit+0x164>)
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0a:	4b42      	ldr	r3, [pc, #264]	@ (8004014 <HAL_UART_MspInit+0x164>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f16:	4b3f      	ldr	r3, [pc, #252]	@ (8004014 <HAL_UART_MspInit+0x164>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8004014 <HAL_UART_MspInit+0x164>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f22:	4b3c      	ldr	r3, [pc, #240]	@ (8004014 <HAL_UART_MspInit+0x164>)
 8003f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f2e:	230c      	movs	r3, #12
 8003f30:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f32:	2302      	movs	r3, #2
 8003f34:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f40:	2307      	movs	r3, #7
 8003f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f46:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f50:	f001 ff82 	bl	8005e58 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003f54:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f56:	4a31      	ldr	r2, [pc, #196]	@ (800401c <HAL_UART_MspInit+0x16c>)
 8003f58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f60:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f66:	4b2c      	ldr	r3, [pc, #176]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f72:	4b29      	ldr	r3, [pc, #164]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f78:	4b27      	ldr	r3, [pc, #156]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003f7e:	4b26      	ldr	r3, [pc, #152]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f84:	4b24      	ldr	r3, [pc, #144]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f8a:	4823      	ldr	r0, [pc, #140]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f8c:	f001 fcee 	bl	800596c <HAL_DMA_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003f96:	f7ff f8ad 	bl	80030f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003f9e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_UART_MspInit+0x168>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <HAL_UART_MspInit+0x174>)
 8003faa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003fac:	4b1c      	ldr	r3, [pc, #112]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fae:	2202      	movs	r2, #2
 8003fb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb8:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fbe:	4b18      	ldr	r3, [pc, #96]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fc0:	2280      	movs	r2, #128	@ 0x80
 8003fc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc4:	4b16      	ldr	r3, [pc, #88]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003fd0:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003fdc:	4810      	ldr	r0, [pc, #64]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003fde:	f001 fcc5 	bl	800596c <HAL_DMA_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8003fe8:	f7ff f884 	bl	80030f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003ff0:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8004020 <HAL_UART_MspInit+0x170>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2026      	movs	r0, #38	@ 0x26
 8003ffe:	f001 fc7e 	bl	80058fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004002:	2026      	movs	r0, #38	@ 0x26
 8004004:	f001 fc97 	bl	8005936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004008:	bf00      	nop
 800400a:	3788      	adds	r7, #136	@ 0x88
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40004400 	.word	0x40004400
 8004014:	40021000 	.word	0x40021000
 8004018:	20000374 	.word	0x20000374
 800401c:	4002006c 	.word	0x4002006c
 8004020:	200003bc 	.word	0x200003bc
 8004024:	40020080 	.word	0x40020080

08004028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <NMI_Handler+0x4>

08004030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <HardFault_Handler+0x4>

08004038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <MemManage_Handler+0x4>

08004040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <BusFault_Handler+0x4>

08004048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <UsageFault_Handler+0x4>

08004050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800407e:	f000 f993 	bl	80043a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800408c:	4802      	ldr	r0, [pc, #8]	@ (8004098 <DMA1_Channel1_IRQHandler+0x10>)
 800408e:	f001 fe04 	bl	8005c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000258 	.word	0x20000258

0800409c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80040a0:	4802      	ldr	r0, [pc, #8]	@ (80040ac <DMA1_Channel6_IRQHandler+0x10>)
 80040a2:	f001 fdfa 	bl	8005c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000374 	.word	0x20000374

080040b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80040b4:	4802      	ldr	r0, [pc, #8]	@ (80040c0 <DMA1_Channel7_IRQHandler+0x10>)
 80040b6:	f001 fdf0 	bl	8005c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200003bc 	.word	0x200003bc

080040c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040c8:	4802      	ldr	r0, [pc, #8]	@ (80040d4 <TIM2_IRQHandler+0x10>)
 80040ca:	f003 fadb 	bl	8007684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200002a0 	.word	0x200002a0

080040d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040dc:	4802      	ldr	r0, [pc, #8]	@ (80040e8 <USART2_IRQHandler+0x10>)
 80040de:	f003 ff5d 	bl	8007f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200002ec 	.word	0x200002ec

080040ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return 1;
 80040f0:	2301      	movs	r3, #1
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <_kill>:

int _kill(int pid, int sig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004106:	f007 fae3 	bl	800b6d0 <__errno>
 800410a:	4603      	mov	r3, r0
 800410c:	2216      	movs	r2, #22
 800410e:	601a      	str	r2, [r3, #0]
  return -1;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_exit>:

void _exit (int status)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004124:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ffe7 	bl	80040fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <_exit+0x12>

08004132 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e00a      	b.n	800415a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004144:	f3af 8000 	nop.w
 8004148:	4601      	mov	r1, r0
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	60ba      	str	r2, [r7, #8]
 8004150:	b2ca      	uxtb	r2, r1
 8004152:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3301      	adds	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	dbf0      	blt.n	8004144 <_read+0x12>
  }

  return len;
 8004162:	687b      	ldr	r3, [r7, #4]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e009      	b.n	8004192 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	60ba      	str	r2, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3301      	adds	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	dbf1      	blt.n	800417e <_write+0x12>
  }
  return len;
 800419a:	687b      	ldr	r3, [r7, #4]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_close>:

int _close(int file)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041cc:	605a      	str	r2, [r3, #4]
  return 0;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_isatty>:

int _isatty(int file)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041e4:	2301      	movs	r3, #1
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004214:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <_sbrk+0x5c>)
 8004216:	4b15      	ldr	r3, [pc, #84]	@ (800426c <_sbrk+0x60>)
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004220:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <_sbrk+0x64>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <_sbrk+0x64>)
 800422a:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <_sbrk+0x68>)
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800422e:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <_sbrk+0x64>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d207      	bcs.n	800424c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800423c:	f007 fa48 	bl	800b6d0 <__errno>
 8004240:	4603      	mov	r3, r0
 8004242:	220c      	movs	r2, #12
 8004244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800424a:	e009      	b.n	8004260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800424c:	4b08      	ldr	r3, [pc, #32]	@ (8004270 <_sbrk+0x64>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004252:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <_sbrk+0x64>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <_sbrk+0x64>)
 800425c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800425e:	68fb      	ldr	r3, [r7, #12]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20010000 	.word	0x20010000
 800426c:	00000400 	.word	0x00000400
 8004270:	20000d7c 	.word	0x20000d7c
 8004274:	20000ed0 	.word	0x20000ed0

08004278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800427c:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <SystemInit+0x20>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	4a05      	ldr	r2, [pc, #20]	@ (8004298 <SystemInit+0x20>)
 8004284:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800429c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042a0:	f7ff ffea 	bl	8004278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042a4:	480c      	ldr	r0, [pc, #48]	@ (80042d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80042a6:	490d      	ldr	r1, [pc, #52]	@ (80042dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80042a8:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <LoopForever+0xe>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042ac:	e002      	b.n	80042b4 <LoopCopyDataInit>

080042ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042b2:	3304      	adds	r3, #4

080042b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b8:	d3f9      	bcc.n	80042ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ba:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042bc:	4c0a      	ldr	r4, [pc, #40]	@ (80042e8 <LoopForever+0x16>)
  movs r3, #0
 80042be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042c0:	e001      	b.n	80042c6 <LoopFillZerobss>

080042c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c4:	3204      	adds	r2, #4

080042c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c8:	d3fb      	bcc.n	80042c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042ca:	f007 fa07 	bl	800b6dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042ce:	f7fe f81d 	bl	800230c <main>

080042d2 <LoopForever>:

LoopForever:
    b LoopForever
 80042d2:	e7fe      	b.n	80042d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80042d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80042d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80042e0:	0800ee7c 	.word	0x0800ee7c
  ldr r2, =_sbss
 80042e4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80042e8:	20000ed0 	.word	0x20000ed0

080042ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042ec:	e7fe      	b.n	80042ec <ADC1_IRQHandler>
	...

080042f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fa:	4b0c      	ldr	r3, [pc, #48]	@ (800432c <HAL_Init+0x3c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a0b      	ldr	r2, [pc, #44]	@ (800432c <HAL_Init+0x3c>)
 8004300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004304:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004306:	2003      	movs	r0, #3
 8004308:	f001 faee 	bl	80058e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800430c:	2000      	movs	r0, #0
 800430e:	f000 f80f 	bl	8004330 <HAL_InitTick>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	71fb      	strb	r3, [r7, #7]
 800431c:	e001      	b.n	8004322 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800431e:	f7ff fcd1 	bl	8003cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004322:	79fb      	ldrb	r3, [r7, #7]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40022000 	.word	0x40022000

08004330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800433c:	4b17      	ldr	r3, [pc, #92]	@ (800439c <HAL_InitTick+0x6c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004344:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <HAL_InitTick+0x70>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b14      	ldr	r3, [pc, #80]	@ (800439c <HAL_InitTick+0x6c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004352:	fbb3 f3f1 	udiv	r3, r3, r1
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	4618      	mov	r0, r3
 800435c:	f001 faf9 	bl	8005952 <HAL_SYSTICK_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d809      	bhi.n	8004380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800436c:	2200      	movs	r2, #0
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004374:	f001 fac3 	bl	80058fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004378:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <HAL_InitTick+0x74>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e007      	b.n	8004390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	e004      	b.n	8004390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e001      	b.n	8004390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000008 	.word	0x20000008
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000004 	.word	0x20000004

080043a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043ac:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <HAL_IncTick+0x20>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <HAL_IncTick+0x24>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	4a04      	ldr	r2, [pc, #16]	@ (80043cc <HAL_IncTick+0x24>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000008 	.word	0x20000008
 80043cc:	20000d80 	.word	0x20000d80

080043d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return uwTick;
 80043d4:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <HAL_GetTick+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000d80 	.word	0x20000d80

080043e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3360      	adds	r3, #96	@ 0x60
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <LL_ADC_SetOffset+0x44>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	03fff000 	.word	0x03fff000

08004498 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3360      	adds	r3, #96	@ 0x60
 80044a6:	461a      	mov	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3360      	adds	r3, #96	@ 0x60
 80044d4:	461a      	mov	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3330      	adds	r3, #48	@ 0x30
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	4413      	add	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	211f      	movs	r1, #31
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	0e9b      	lsrs	r3, r3, #26
 8004558:	f003 011f 	and.w	r1, r3, #31
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	431a      	orrs	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3314      	adds	r3, #20
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0e5b      	lsrs	r3, r3, #25
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	0d1b      	lsrs	r3, r3, #20
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2107      	movs	r1, #7
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	401a      	ands	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	0d1b      	lsrs	r3, r3, #20
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	431a      	orrs	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	43db      	mvns	r3, r3
 80045ea:	401a      	ands	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f003 0318 	and.w	r3, r3, #24
 80045f2:	4908      	ldr	r1, [pc, #32]	@ (8004614 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045f4:	40d9      	lsrs	r1, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	400b      	ands	r3, r1
 80045fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fe:	431a      	orrs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	0007ffff 	.word	0x0007ffff

08004618 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004628:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6093      	str	r3, [r2, #8]
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800464c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004650:	d101      	bne.n	8004656 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004678:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046a0:	d101      	bne.n	80046a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046f0:	f043 0202 	orr.w	r2, r3, #2
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <LL_ADC_IsEnabled+0x18>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <LL_ADC_IsEnabled+0x1a>
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d101      	bne.n	8004742 <LL_ADC_IsDisableOngoing+0x18>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <LL_ADC_IsDisableOngoing+0x1a>
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004760:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004764:	f043 0204 	orr.w	r2, r3, #4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d101      	bne.n	8004790 <LL_ADC_REG_IsConversionOngoing+0x18>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d101      	bne.n	80047b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e126      	b.n	8004a2c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff fa8d 	bl	8003d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff19 	bl	800463c <LL_ADC_IsDeepPowerDownEnabled>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff feff 	bl	8004618 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff34 	bl	800468c <LL_ADC_IsInternalRegulatorEnabled>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d115      	bne.n	8004856 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff ff18 	bl	8004664 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004834:	4b7f      	ldr	r3, [pc, #508]	@ (8004a34 <HAL_ADC_Init+0x270>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a38 <HAL_ADC_Init+0x274>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	3301      	adds	r3, #1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004848:	e002      	b.n	8004850 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3b01      	subs	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f9      	bne.n	800484a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff16 	bl	800468c <LL_ADC_IsInternalRegulatorEnabled>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff76 	bl	8004778 <LL_ADC_REG_IsConversionOngoing>
 800488c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 80bf 	bne.w	8004a1a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 80bb 	bne.w	8004a1a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff23 	bl	8004704 <LL_ADC_IsEnabled>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c4:	485d      	ldr	r0, [pc, #372]	@ (8004a3c <HAL_ADC_Init+0x278>)
 80048c6:	f7ff ff1d 	bl	8004704 <LL_ADC_IsEnabled>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	485a      	ldr	r0, [pc, #360]	@ (8004a40 <HAL_ADC_Init+0x27c>)
 80048d8:	f7ff fd86 	bl	80043e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7e5b      	ldrb	r3, [r3, #25]
 80048e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80048ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80048f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d106      	bne.n	8004918 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	3b01      	subs	r3, #1
 8004910:	045b      	lsls	r3, r3, #17
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	4b42      	ldr	r3, [pc, #264]	@ (8004a44 <HAL_ADC_Init+0x280>)
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	430b      	orrs	r3, r1
 8004946:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff26 	bl	800479e <LL_ADC_INJ_IsConversionOngoing>
 8004952:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d13d      	bne.n	80049d6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d13a      	bne.n	80049d6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004964:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800496c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	69b9      	ldr	r1, [r7, #24]
 8004986:	430b      	orrs	r3, r1
 8004988:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004990:	2b01      	cmp	r3, #1
 8004992:	d118      	bne.n	80049c6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800499e:	f023 0304 	bic.w	r3, r3, #4
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049aa:	4311      	orrs	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049b6:	430a      	orrs	r2, r1
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	611a      	str	r2, [r3, #16]
 80049c4:	e007      	b.n	80049d6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10c      	bne.n	80049f8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	f023 010f 	bic.w	r1, r3, #15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	1e5a      	subs	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80049f6:	e007      	b.n	8004a08 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 020f 	bic.w	r2, r2, #15
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0c:	f023 0303 	bic.w	r3, r3, #3
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a18:	e007      	b.n	8004a2a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	f043 0210 	orr.w	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000000 	.word	0x20000000
 8004a38:	053e2d63 	.word	0x053e2d63
 8004a3c:	50040000 	.word	0x50040000
 8004a40:	50040300 	.word	0x50040300
 8004a44:	fff0c007 	.word	0xfff0c007

08004a48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fe8d 	bl	8004778 <LL_ADC_REG_IsConversionOngoing>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d167      	bne.n	8004b34 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_Start_DMA+0x2a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e063      	b.n	8004b3a <HAL_ADC_Start_DMA+0xf2>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc5e 	bl	800533c <ADC_Enable>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d14f      	bne.n	8004b2a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aae:	f023 0206 	bic.w	r2, r3, #6
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ab6:	e002      	b.n	8004abe <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	4a20      	ldr	r2, [pc, #128]	@ (8004b44 <HAL_ADC_Start_DMA+0xfc>)
 8004ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aca:	4a1f      	ldr	r2, [pc, #124]	@ (8004b48 <HAL_ADC_Start_DMA+0x100>)
 8004acc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b4c <HAL_ADC_Start_DMA+0x104>)
 8004ad4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	221c      	movs	r2, #28
 8004adc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0210 	orr.w	r2, r2, #16
 8004af4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3340      	adds	r3, #64	@ 0x40
 8004b10:	4619      	mov	r1, r3
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f000 ffe1 	bl	8005adc <HAL_DMA_Start_IT>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fe14 	bl	8004750 <LL_ADC_REG_StartConversion>
 8004b28:	e006      	b.n	8004b38 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004b32:	e001      	b.n	8004b38 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
 8004b36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08005507 	.word	0x08005507
 8004b48:	080055df 	.word	0x080055df
 8004b4c:	080055fb 	.word	0x080055fb

08004b50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b0b6      	sub	sp, #216	@ 0xd8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x22>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e3bb      	b.n	8005312 <HAL_ADC_ConfigChannel+0x79a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff fde6 	bl	8004778 <LL_ADC_REG_IsConversionOngoing>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f040 83a0 	bne.w	80052f4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d824      	bhi.n	8004c0e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	3b02      	subs	r3, #2
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d81b      	bhi.n	8004c06 <HAL_ADC_ConfigChannel+0x8e>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <HAL_ADC_ConfigChannel+0x5c>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004bed 	.word	0x08004bed
 8004bdc:	08004bf5 	.word	0x08004bf5
 8004be0:	08004bfd 	.word	0x08004bfd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004be4:	230c      	movs	r3, #12
 8004be6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004bea:	e010      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004bec:	2312      	movs	r3, #18
 8004bee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004bf2:	e00c      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004bf4:	2318      	movs	r3, #24
 8004bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004bfa:	e008      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c04:	e003      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004c06:	2306      	movs	r3, #6
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c0c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004c1c:	f7ff fc80 	bl	8004520 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fda7 	bl	8004778 <LL_ADC_REG_IsConversionOngoing>
 8004c2a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fdb3 	bl	800479e <LL_ADC_INJ_IsConversionOngoing>
 8004c38:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 81a4 	bne.w	8004f8e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 819f 	bne.w	8004f8e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6819      	ldr	r1, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f7ff fc8b 	bl	8004578 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d00a      	beq.n	8004c9a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6919      	ldr	r1, [r3, #16]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c94:	f7ff fbdc 	bl	8004450 <LL_ADC_SetOffset>
 8004c98:	e179      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fbf9 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x14e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fbee 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	0e9b      	lsrs	r3, r3, #26
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	e01e      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x18c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fbe3 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	e004      	b.n	8004d02 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004cf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x1a4>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	e018      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x1d6>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	e004      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d106      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fbb2 	bl	80044c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fb96 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x214>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fb8b 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004d82:	4603      	mov	r3, r0
 8004d84:	0e9b      	lsrs	r3, r3, #26
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	e01e      	b.n	8004dca <HAL_ADC_ConfigChannel+0x252>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fb80 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004da2:	fa93 f3a3 	rbit	r3, r3
 8004da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004dba:	2320      	movs	r3, #32
 8004dbc:	e004      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004dc2:	fab3 f383 	clz	r3, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x26a>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	0e9b      	lsrs	r3, r3, #26
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	e018      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x29c>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004e06:	2320      	movs	r3, #32
 8004e08:	e004      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d106      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fb4f 	bl	80044c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fb33 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x2da>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2102      	movs	r1, #2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fb28 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	0e9b      	lsrs	r3, r3, #26
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	e01e      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x318>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2102      	movs	r1, #2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff fb1d 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004e80:	2320      	movs	r3, #32
 8004e82:	e004      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e88:	fab3 f383 	clz	r3, r3
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x330>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	0e9b      	lsrs	r3, r3, #26
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	e014      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x35a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004eb0:	fa93 f3a3 	rbit	r3, r3
 8004eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	e004      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ecc:	fab3 f383 	clz	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d106      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff faf0 	bl	80044c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2103      	movs	r1, #3
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fad4 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x398>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2103      	movs	r1, #3
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fac9 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	0e9b      	lsrs	r3, r3, #26
 8004f0a:	f003 021f 	and.w	r2, r3, #31
 8004f0e:	e017      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x3c8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2103      	movs	r1, #3
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fabe 	bl	8004498 <LL_ADC_GetOffsetChannel>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f2a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004f2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004f32:	2320      	movs	r3, #32
 8004f34:	e003      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f38:	fab3 f383 	clz	r3, r3
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x3e0>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	0e9b      	lsrs	r3, r3, #26
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	e011      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x404>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f68:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e003      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004f74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d106      	bne.n	8004f8e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2103      	movs	r1, #3
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fa9b 	bl	80044c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fbb6 	bl	8004704 <LL_ADC_IsEnabled>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 8140 	bne.w	8005220 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6819      	ldr	r1, [r3, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	461a      	mov	r2, r3
 8004fae:	f7ff fb0f 	bl	80045d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4a8f      	ldr	r2, [pc, #572]	@ (80051f4 <HAL_ADC_ConfigChannel+0x67c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	f040 8131 	bne.w	8005220 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x46e>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	0e9b      	lsrs	r3, r3, #26
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	bf94      	ite	ls
 8004fde:	2301      	movls	r3, #1
 8004fe0:	2300      	movhi	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	e019      	b.n	800501a <HAL_ADC_ConfigChannel+0x4a2>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004ffe:	2320      	movs	r3, #32
 8005000:	e003      	b.n	800500a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005004:	fab3 f383 	clz	r3, r3
 8005008:	b2db      	uxtb	r3, r3
 800500a:	3301      	adds	r3, #1
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2b09      	cmp	r3, #9
 8005012:	bf94      	ite	ls
 8005014:	2301      	movls	r3, #1
 8005016:	2300      	movhi	r3, #0
 8005018:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800501a:	2b00      	cmp	r3, #0
 800501c:	d079      	beq.n	8005112 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <HAL_ADC_ConfigChannel+0x4c2>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	0e9b      	lsrs	r3, r3, #26
 8005030:	3301      	adds	r3, #1
 8005032:	069b      	lsls	r3, r3, #26
 8005034:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005038:	e015      	b.n	8005066 <HAL_ADC_ConfigChannel+0x4ee>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005042:	fa93 f3a3 	rbit	r3, r3
 8005046:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800504a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800504c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005052:	2320      	movs	r3, #32
 8005054:	e003      	b.n	800505e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	3301      	adds	r3, #1
 8005060:	069b      	lsls	r3, r3, #26
 8005062:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x50e>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	0e9b      	lsrs	r3, r3, #26
 8005078:	3301      	adds	r3, #1
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2101      	movs	r1, #1
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	e017      	b.n	80050b6 <HAL_ADC_ConfigChannel+0x53e>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005096:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800509e:	2320      	movs	r3, #32
 80050a0:	e003      	b.n	80050aa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80050a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a4:	fab3 f383 	clz	r3, r3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3301      	adds	r3, #1
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	ea42 0103 	orr.w	r1, r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x564>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	0e9b      	lsrs	r3, r3, #26
 80050cc:	3301      	adds	r3, #1
 80050ce:	f003 021f 	and.w	r2, r3, #31
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	051b      	lsls	r3, r3, #20
 80050da:	e018      	b.n	800510e <HAL_ADC_ConfigChannel+0x596>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80050f4:	2320      	movs	r3, #32
 80050f6:	e003      	b.n	8005100 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	3301      	adds	r3, #1
 8005102:	f003 021f 	and.w	r2, r3, #31
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800510e:	430b      	orrs	r3, r1
 8005110:	e081      	b.n	8005216 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <HAL_ADC_ConfigChannel+0x5b6>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	0e9b      	lsrs	r3, r3, #26
 8005124:	3301      	adds	r3, #1
 8005126:	069b      	lsls	r3, r3, #26
 8005128:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800512c:	e015      	b.n	800515a <HAL_ADC_ConfigChannel+0x5e2>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005146:	2320      	movs	r3, #32
 8005148:	e003      	b.n	8005152 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800514a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514c:	fab3 f383 	clz	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	3301      	adds	r3, #1
 8005154:	069b      	lsls	r3, r3, #26
 8005156:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_ADC_ConfigChannel+0x602>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	0e9b      	lsrs	r3, r3, #26
 800516c:	3301      	adds	r3, #1
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2101      	movs	r1, #1
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	e017      	b.n	80051aa <HAL_ADC_ConfigChannel+0x632>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	61bb      	str	r3, [r7, #24]
  return result;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005192:	2320      	movs	r3, #32
 8005194:	e003      	b.n	800519e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2101      	movs	r1, #1
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	ea42 0103 	orr.w	r1, r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x65e>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	3301      	adds	r3, #1
 80051c2:	f003 021f 	and.w	r2, r3, #31
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	3b1e      	subs	r3, #30
 80051ce:	051b      	lsls	r3, r3, #20
 80051d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051d4:	e01e      	b.n	8005214 <HAL_ADC_ConfigChannel+0x69c>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	fa93 f3a3 	rbit	r3, r3
 80051e2:	60fb      	str	r3, [r7, #12]
  return result;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80051ee:	2320      	movs	r3, #32
 80051f0:	e006      	b.n	8005200 <HAL_ADC_ConfigChannel+0x688>
 80051f2:	bf00      	nop
 80051f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fab3 f383 	clz	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	3301      	adds	r3, #1
 8005202:	f003 021f 	and.w	r2, r3, #31
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	3b1e      	subs	r3, #30
 800520e:	051b      	lsls	r3, r3, #20
 8005210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005214:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800521a:	4619      	mov	r1, r3
 800521c:	f7ff f9ac 	bl	8004578 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b3d      	ldr	r3, [pc, #244]	@ (800531c <HAL_ADC_ConfigChannel+0x7a4>)
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d06c      	beq.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800522c:	483c      	ldr	r0, [pc, #240]	@ (8005320 <HAL_ADC_ConfigChannel+0x7a8>)
 800522e:	f7ff f901 	bl	8004434 <LL_ADC_GetCommonPathInternalCh>
 8005232:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3a      	ldr	r2, [pc, #232]	@ (8005324 <HAL_ADC_ConfigChannel+0x7ac>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d127      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d121      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a35      	ldr	r2, [pc, #212]	@ (8005328 <HAL_ADC_ConfigChannel+0x7b0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d157      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800525a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800525e:	4619      	mov	r1, r3
 8005260:	482f      	ldr	r0, [pc, #188]	@ (8005320 <HAL_ADC_ConfigChannel+0x7a8>)
 8005262:	f7ff f8d4 	bl	800440e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005266:	4b31      	ldr	r3, [pc, #196]	@ (800532c <HAL_ADC_ConfigChannel+0x7b4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	4a30      	ldr	r2, [pc, #192]	@ (8005330 <HAL_ADC_ConfigChannel+0x7b8>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005280:	e002      	b.n	8005288 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f9      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800528e:	e03a      	b.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a27      	ldr	r2, [pc, #156]	@ (8005334 <HAL_ADC_ConfigChannel+0x7bc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d113      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800529a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800529e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10d      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <HAL_ADC_ConfigChannel+0x7b0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d12a      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052b8:	4619      	mov	r1, r3
 80052ba:	4819      	ldr	r0, [pc, #100]	@ (8005320 <HAL_ADC_ConfigChannel+0x7a8>)
 80052bc:	f7ff f8a7 	bl	800440e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052c0:	e021      	b.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <HAL_ADC_ConfigChannel+0x7c0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d11c      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d116      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a12      	ldr	r2, [pc, #72]	@ (8005328 <HAL_ADC_ConfigChannel+0x7b0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052ea:	4619      	mov	r1, r3
 80052ec:	480c      	ldr	r0, [pc, #48]	@ (8005320 <HAL_ADC_ConfigChannel+0x7a8>)
 80052ee:	f7ff f88e 	bl	800440e <LL_ADC_SetCommonPathInternalCh>
 80052f2:	e008      	b.n	8005306 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800530e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005312:	4618      	mov	r0, r3
 8005314:	37d8      	adds	r7, #216	@ 0xd8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	80080000 	.word	0x80080000
 8005320:	50040300 	.word	0x50040300
 8005324:	c7520000 	.word	0xc7520000
 8005328:	50040000 	.word	0x50040000
 800532c:	20000000 	.word	0x20000000
 8005330:	053e2d63 	.word	0x053e2d63
 8005334:	cb840000 	.word	0xcb840000
 8005338:	80000001 	.word	0x80000001

0800533c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff f9d9 	bl	8004704 <LL_ADC_IsEnabled>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d169      	bne.n	800542c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4b36      	ldr	r3, [pc, #216]	@ (8005438 <ADC_Enable+0xfc>)
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536a:	f043 0210 	orr.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e055      	b.n	800542e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff f994 	bl	80046b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800538c:	482b      	ldr	r0, [pc, #172]	@ (800543c <ADC_Enable+0x100>)
 800538e:	f7ff f851 	bl	8004434 <LL_ADC_GetCommonPathInternalCh>
 8005392:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800539c:	4b28      	ldr	r3, [pc, #160]	@ (8005440 <ADC_Enable+0x104>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	4a28      	ldr	r2, [pc, #160]	@ (8005444 <ADC_Enable+0x108>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	099b      	lsrs	r3, r3, #6
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	4613      	mov	r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053b6:	e002      	b.n	80053be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f9      	bne.n	80053b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053c4:	f7ff f804 	bl	80043d0 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053ca:	e028      	b.n	800541e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f997 	bl	8004704 <LL_ADC_IsEnabled>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff f967 	bl	80046b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053e6:	f7fe fff3 	bl	80043d0 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d914      	bls.n	800541e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d00d      	beq.n	800541e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e007      	b.n	800542e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d1cf      	bne.n	80053cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	8000003f 	.word	0x8000003f
 800543c:	50040300 	.word	0x50040300
 8005440:	20000000 	.word	0x20000000
 8005444:	053e2d63 	.word	0x053e2d63

08005448 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff f968 	bl	800472a <LL_ADC_IsDisableOngoing>
 800545a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff f94f 	bl	8004704 <LL_ADC_IsEnabled>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d047      	beq.n	80054fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d144      	bne.n	80054fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030d 	and.w	r3, r3, #13
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10c      	bne.n	800549a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff f929 	bl	80046dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2203      	movs	r2, #3
 8005490:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005492:	f7fe ff9d 	bl	80043d0 <HAL_GetTick>
 8005496:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005498:	e029      	b.n	80054ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	f043 0210 	orr.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054aa:	f043 0201 	orr.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e023      	b.n	80054fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054b6:	f7fe ff8b 	bl	80043d0 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d914      	bls.n	80054ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	f043 0210 	orr.w	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	f043 0201 	orr.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e007      	b.n	80054fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1dc      	bne.n	80054b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800551c:	2b00      	cmp	r3, #0
 800551e:	d14b      	bne.n	80055b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005524:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d021      	beq.n	800557e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe ffdb 	bl	80044fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d032      	beq.n	80055b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d12b      	bne.n	80055b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d11f      	bne.n	80055b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	655a      	str	r2, [r3, #84]	@ 0x54
 800557c:	e018      	b.n	80055b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d111      	bne.n	80055b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005590:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7fd fd6f 	bl	8003094 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055b6:	e00e      	b.n	80055d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff facd 	bl	8004b64 <HAL_ADC_ErrorCallback>
}
 80055ca:	e004      	b.n	80055d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff faaf 	bl	8004b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f043 0204 	orr.w	r2, r3, #4
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fa9f 	bl	8004b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <LL_ADC_StartCalibration>:
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_ADC_IsCalibrationOnGoing>:
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005674:	d101      	bne.n	800567a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_ADCEx_Calibration_Start+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e04d      	b.n	8005740 <HAL_ADCEx_Calibration_Start+0xb8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fecb 	bl	8005448 <ADC_Disable>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d136      	bne.n	800572a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80056c4:	f023 0302 	bic.w	r3, r3, #2
 80056c8:	f043 0202 	orr.w	r2, r3, #2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff ffa9 	bl	800562e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056dc:	e014      	b.n	8005708 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80056ea:	d30d      	bcc.n	8005708 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f0:	f023 0312 	bic.w	r3, r3, #18
 80056f4:	f043 0210 	orr.w	r2, r3, #16
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e01b      	b.n	8005740 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ffa7 	bl	8005660 <LL_ADC_IsCalibrationOnGoing>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e2      	bne.n	80056de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	f043 0201 	orr.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54
 8005728:	e005      	b.n	8005736 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572e:	f043 0210 	orr.w	r2, r3, #16
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005758:	4b0c      	ldr	r3, [pc, #48]	@ (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577a:	4a04      	ldr	r2, [pc, #16]	@ (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	60d3      	str	r3, [r2, #12]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f003 0307 	and.w	r3, r3, #7
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	db0b      	blt.n	80057d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	f003 021f 	and.w	r2, r3, #31
 80057c4:	4907      	ldr	r1, [pc, #28]	@ (80057e4 <__NVIC_EnableIRQ+0x38>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2001      	movs	r0, #1
 80057ce:	fa00 f202 	lsl.w	r2, r0, r2
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	e000e100 	.word	0xe000e100

080057e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	6039      	str	r1, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	db0a      	blt.n	8005812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	490c      	ldr	r1, [pc, #48]	@ (8005834 <__NVIC_SetPriority+0x4c>)
 8005802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005806:	0112      	lsls	r2, r2, #4
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	440b      	add	r3, r1
 800580c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005810:	e00a      	b.n	8005828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4908      	ldr	r1, [pc, #32]	@ (8005838 <__NVIC_SetPriority+0x50>)
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3b04      	subs	r3, #4
 8005820:	0112      	lsls	r2, r2, #4
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	440b      	add	r3, r1
 8005826:	761a      	strb	r2, [r3, #24]
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000e100 	.word	0xe000e100
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800583c:	b480      	push	{r7}
 800583e:	b089      	sub	sp, #36	@ 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f1c3 0307 	rsb	r3, r3, #7
 8005856:	2b04      	cmp	r3, #4
 8005858:	bf28      	it	cs
 800585a:	2304      	movcs	r3, #4
 800585c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3304      	adds	r3, #4
 8005862:	2b06      	cmp	r3, #6
 8005864:	d902      	bls.n	800586c <NVIC_EncodePriority+0x30>
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3b03      	subs	r3, #3
 800586a:	e000      	b.n	800586e <NVIC_EncodePriority+0x32>
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	401a      	ands	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005884:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	43d9      	mvns	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005894:	4313      	orrs	r3, r2
         );
}
 8005896:	4618      	mov	r0, r3
 8005898:	3724      	adds	r7, #36	@ 0x24
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058b4:	d301      	bcc.n	80058ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058b6:	2301      	movs	r3, #1
 80058b8:	e00f      	b.n	80058da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ba:	4a0a      	ldr	r2, [pc, #40]	@ (80058e4 <SysTick_Config+0x40>)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3b01      	subs	r3, #1
 80058c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058c2:	210f      	movs	r1, #15
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058c8:	f7ff ff8e 	bl	80057e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <SysTick_Config+0x40>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058d2:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <SysTick_Config+0x40>)
 80058d4:	2207      	movs	r2, #7
 80058d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000e010 	.word	0xe000e010

080058e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff29 	bl	8005748 <__NVIC_SetPriorityGrouping>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	4603      	mov	r3, r0
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005910:	f7ff ff3e 	bl	8005790 <__NVIC_GetPriorityGrouping>
 8005914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7ff ff8e 	bl	800583c <NVIC_EncodePriority>
 8005920:	4602      	mov	r2, r0
 8005922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff ff5d 	bl	80057e8 <__NVIC_SetPriority>
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	4603      	mov	r3, r0
 800593e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff31 	bl	80057ac <__NVIC_EnableIRQ>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff ffa2 	bl	80058a4 <SysTick_Config>
 8005960:	4603      	mov	r3, r0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e098      	b.n	8005ab0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	4b4d      	ldr	r3, [pc, #308]	@ (8005abc <HAL_DMA_Init+0x150>)
 8005986:	429a      	cmp	r2, r3
 8005988:	d80f      	bhi.n	80059aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac0 <HAL_DMA_Init+0x154>)
 8005992:	4413      	add	r3, r2
 8005994:	4a4b      	ldr	r2, [pc, #300]	@ (8005ac4 <HAL_DMA_Init+0x158>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	009a      	lsls	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a48      	ldr	r2, [pc, #288]	@ (8005ac8 <HAL_DMA_Init+0x15c>)
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80059a8:	e00e      	b.n	80059c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b46      	ldr	r3, [pc, #280]	@ (8005acc <HAL_DMA_Init+0x160>)
 80059b2:	4413      	add	r3, r2
 80059b4:	4a43      	ldr	r2, [pc, #268]	@ (8005ac4 <HAL_DMA_Init+0x158>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	009a      	lsls	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a42      	ldr	r2, [pc, #264]	@ (8005ad0 <HAL_DMA_Init+0x164>)
 80059c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80059de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a22:	d039      	beq.n	8005a98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a28:	4a27      	ldr	r2, [pc, #156]	@ (8005ac8 <HAL_DMA_Init+0x15c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d11a      	bne.n	8005a64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <HAL_DMA_Init+0x168>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f003 031c 	and.w	r3, r3, #28
 8005a3a:	210f      	movs	r1, #15
 8005a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	4924      	ldr	r1, [pc, #144]	@ (8005ad4 <HAL_DMA_Init+0x168>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a48:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <HAL_DMA_Init+0x168>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a54:	f003 031c 	and.w	r3, r3, #28
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	491d      	ldr	r1, [pc, #116]	@ (8005ad4 <HAL_DMA_Init+0x168>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	e019      	b.n	8005a98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a64:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad8 <HAL_DMA_Init+0x16c>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6c:	f003 031c 	and.w	r3, r3, #28
 8005a70:	210f      	movs	r1, #15
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	4917      	ldr	r1, [pc, #92]	@ (8005ad8 <HAL_DMA_Init+0x16c>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a7e:	4b16      	ldr	r3, [pc, #88]	@ (8005ad8 <HAL_DMA_Init+0x16c>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	f003 031c 	and.w	r3, r3, #28
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	4911      	ldr	r1, [pc, #68]	@ (8005ad8 <HAL_DMA_Init+0x16c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40020407 	.word	0x40020407
 8005ac0:	bffdfff8 	.word	0xbffdfff8
 8005ac4:	cccccccd 	.word	0xcccccccd
 8005ac8:	40020000 	.word	0x40020000
 8005acc:	bffdfbf8 	.word	0xbffdfbf8
 8005ad0:	40020400 	.word	0x40020400
 8005ad4:	400200a8 	.word	0x400200a8
 8005ad8:	400204a8 	.word	0x400204a8

08005adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_DMA_Start_IT+0x20>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e04b      	b.n	8005b94 <HAL_DMA_Start_IT+0xb8>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d13a      	bne.n	8005b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f95f 	bl	8005df8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 020e 	orr.w	r2, r2, #14
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e00f      	b.n	8005b74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 020a 	orr.w	r2, r2, #10
 8005b72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e005      	b.n	8005b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d008      	beq.n	8005bc6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e022      	b.n	8005c0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 020e 	bic.w	r2, r2, #14
 8005bd4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bea:	f003 021c 	and.w	r2, r3, #28
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d005      	beq.n	8005c3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2204      	movs	r2, #4
 8005c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	e029      	b.n	8005c90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 020e 	bic.w	r2, r2, #14
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	f003 021c 	and.w	r2, r3, #28
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	4798      	blx	r3
    }
  }
  return status;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	f003 031c 	and.w	r3, r3, #28
 8005cba:	2204      	movs	r2, #4
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d026      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x7a>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d021      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0204 	bic.w	r2, r2, #4
 8005cec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	f003 021c 	and.w	r2, r3, #28
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005d00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d071      	beq.n	8005dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d12:	e06c      	b.n	8005dee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	f003 031c 	and.w	r3, r3, #28
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02e      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xec>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d029      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 020a 	bic.w	r2, r2, #10
 8005d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5c:	f003 021c 	and.w	r2, r3, #28
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	2102      	movs	r1, #2
 8005d66:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d038      	beq.n	8005dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d84:	e033      	b.n	8005dee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8a:	f003 031c 	and.w	r3, r3, #28
 8005d8e:	2208      	movs	r2, #8
 8005d90:	409a      	lsls	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d02a      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x156>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d025      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 020e 	bic.w	r2, r2, #14
 8005db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db8:	f003 021c 	and.w	r2, r3, #28
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
}
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0a:	f003 021c 	and.w	r2, r3, #28
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	2101      	movs	r1, #1
 8005e14:	fa01 f202 	lsl.w	r2, r1, r2
 8005e18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d108      	bne.n	8005e3c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e3a:	e007      	b.n	8005e4c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e66:	e154      	b.n	8006112 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8146 	beq.w	800610c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d005      	beq.n	8005e98 <HAL_GPIO_Init+0x40>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d130      	bne.n	8005efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ece:	2201      	movs	r2, #1
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	f003 0201 	and.w	r2, r3, #1
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d017      	beq.n	8005f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	2203      	movs	r2, #3
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43db      	mvns	r3, r3
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d123      	bne.n	8005f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	08da      	lsrs	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3208      	adds	r2, #8
 8005f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	220f      	movs	r2, #15
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4013      	ands	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	08da      	lsrs	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3208      	adds	r2, #8
 8005f84:	6939      	ldr	r1, [r7, #16]
 8005f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	2203      	movs	r2, #3
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 0203 	and.w	r2, r3, #3
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80a0 	beq.w	800610c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fcc:	4b58      	ldr	r3, [pc, #352]	@ (8006130 <HAL_GPIO_Init+0x2d8>)
 8005fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd0:	4a57      	ldr	r2, [pc, #348]	@ (8006130 <HAL_GPIO_Init+0x2d8>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fd8:	4b55      	ldr	r3, [pc, #340]	@ (8006130 <HAL_GPIO_Init+0x2d8>)
 8005fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005fe4:	4a53      	ldr	r2, [pc, #332]	@ (8006134 <HAL_GPIO_Init+0x2dc>)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	3302      	adds	r3, #2
 8005fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	220f      	movs	r2, #15
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	43db      	mvns	r3, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4013      	ands	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800600e:	d019      	beq.n	8006044 <HAL_GPIO_Init+0x1ec>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a49      	ldr	r2, [pc, #292]	@ (8006138 <HAL_GPIO_Init+0x2e0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d013      	beq.n	8006040 <HAL_GPIO_Init+0x1e8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a48      	ldr	r2, [pc, #288]	@ (800613c <HAL_GPIO_Init+0x2e4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00d      	beq.n	800603c <HAL_GPIO_Init+0x1e4>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a47      	ldr	r2, [pc, #284]	@ (8006140 <HAL_GPIO_Init+0x2e8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <HAL_GPIO_Init+0x1e0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a46      	ldr	r2, [pc, #280]	@ (8006144 <HAL_GPIO_Init+0x2ec>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d101      	bne.n	8006034 <HAL_GPIO_Init+0x1dc>
 8006030:	2304      	movs	r3, #4
 8006032:	e008      	b.n	8006046 <HAL_GPIO_Init+0x1ee>
 8006034:	2307      	movs	r3, #7
 8006036:	e006      	b.n	8006046 <HAL_GPIO_Init+0x1ee>
 8006038:	2303      	movs	r3, #3
 800603a:	e004      	b.n	8006046 <HAL_GPIO_Init+0x1ee>
 800603c:	2302      	movs	r3, #2
 800603e:	e002      	b.n	8006046 <HAL_GPIO_Init+0x1ee>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_GPIO_Init+0x1ee>
 8006044:	2300      	movs	r3, #0
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	f002 0203 	and.w	r2, r2, #3
 800604c:	0092      	lsls	r2, r2, #2
 800604e:	4093      	lsls	r3, r2
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006056:	4937      	ldr	r1, [pc, #220]	@ (8006134 <HAL_GPIO_Init+0x2dc>)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	3302      	adds	r3, #2
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006064:	4b38      	ldr	r3, [pc, #224]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	43db      	mvns	r3, r3
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006088:	4a2f      	ldr	r2, [pc, #188]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800608e:	4b2e      	ldr	r3, [pc, #184]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	43db      	mvns	r3, r3
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4013      	ands	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060b2:	4a25      	ldr	r2, [pc, #148]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060b8:	4b23      	ldr	r3, [pc, #140]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	43db      	mvns	r3, r3
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060e2:	4b19      	ldr	r3, [pc, #100]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	43db      	mvns	r3, r3
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4013      	ands	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006106:	4a10      	ldr	r2, [pc, #64]	@ (8006148 <HAL_GPIO_Init+0x2f0>)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	3301      	adds	r3, #1
 8006110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	f47f aea3 	bne.w	8005e68 <HAL_GPIO_Init+0x10>
  }
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	40021000 	.word	0x40021000
 8006134:	40010000 	.word	0x40010000
 8006138:	48000400 	.word	0x48000400
 800613c:	48000800 	.word	0x48000800
 8006140:	48000c00 	.word	0x48000c00
 8006144:	48001000 	.word	0x48001000
 8006148:	40010400 	.word	0x40010400

0800614c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	807b      	strh	r3, [r7, #2]
 8006158:	4613      	mov	r3, r2
 800615a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800615c:	787b      	ldrb	r3, [r7, #1]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006162:	887a      	ldrh	r2, [r7, #2]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006168:	e002      	b.n	8006170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800616a:	887a      	ldrh	r2, [r7, #2]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006180:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <HAL_PWREx_GetVoltageRange+0x18>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40007000 	.word	0x40007000

08006198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a6:	d130      	bne.n	800620a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061a8:	4b23      	ldr	r3, [pc, #140]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b4:	d038      	beq.n	8006228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b6:	4b20      	ldr	r3, [pc, #128]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061be:	4a1e      	ldr	r2, [pc, #120]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061c6:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2232      	movs	r2, #50	@ 0x32
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	0c9b      	lsrs	r3, r3, #18
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061dc:	e002      	b.n	80061e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061e4:	4b14      	ldr	r3, [pc, #80]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f0:	d102      	bne.n	80061f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f2      	bne.n	80061de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006204:	d110      	bne.n	8006228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e00f      	b.n	800622a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800620a:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006216:	d007      	beq.n	8006228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006218:	4b07      	ldr	r3, [pc, #28]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006220:	4a05      	ldr	r2, [pc, #20]	@ (8006238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	40007000 	.word	0x40007000
 800623c:	20000000 	.word	0x20000000
 8006240:	431bde83 	.word	0x431bde83

08006244 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f000 bc02 	b.w	8006a5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006258:	4b96      	ldr	r3, [pc, #600]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006262:	4b94      	ldr	r3, [pc, #592]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80e4 	beq.w	8006442 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_RCC_OscConfig+0x4c>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b0c      	cmp	r3, #12
 8006284:	f040 808b 	bne.w	800639e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b01      	cmp	r3, #1
 800628c:	f040 8087 	bne.w	800639e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006290:	4b88      	ldr	r3, [pc, #544]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_OscConfig+0x64>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e3d9      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	4b81      	ldr	r3, [pc, #516]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_RCC_OscConfig+0x7e>
 80062b8:	4b7e      	ldr	r3, [pc, #504]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062c0:	e005      	b.n	80062ce <HAL_RCC_OscConfig+0x8a>
 80062c2:	4b7c      	ldr	r3, [pc, #496]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80062c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d223      	bcs.n	800631a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fd8c 	bl	8006df4 <RCC_SetFlashLatencyFromMSIRange>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e3ba      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062e6:	4b73      	ldr	r3, [pc, #460]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a72      	ldr	r2, [pc, #456]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80062ec:	f043 0308 	orr.w	r3, r3, #8
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b70      	ldr	r3, [pc, #448]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	496d      	ldr	r1, [pc, #436]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006300:	4313      	orrs	r3, r2
 8006302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006304:	4b6b      	ldr	r3, [pc, #428]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	4968      	ldr	r1, [pc, #416]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006314:	4313      	orrs	r3, r2
 8006316:	604b      	str	r3, [r1, #4]
 8006318:	e025      	b.n	8006366 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800631a:	4b66      	ldr	r3, [pc, #408]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a65      	ldr	r2, [pc, #404]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006320:	f043 0308 	orr.w	r3, r3, #8
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	4b63      	ldr	r3, [pc, #396]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	4960      	ldr	r1, [pc, #384]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006334:	4313      	orrs	r3, r2
 8006336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006338:	4b5e      	ldr	r3, [pc, #376]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	495b      	ldr	r1, [pc, #364]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006348:	4313      	orrs	r3, r2
 800634a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fd4c 	bl	8006df4 <RCC_SetFlashLatencyFromMSIRange>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e37a      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006366:	f000 fc81 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 800636a:	4602      	mov	r2, r0
 800636c:	4b51      	ldr	r3, [pc, #324]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	4950      	ldr	r1, [pc, #320]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006378:	5ccb      	ldrb	r3, [r1, r3]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	4a4e      	ldr	r2, [pc, #312]	@ (80064bc <HAL_RCC_OscConfig+0x278>)
 8006384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006386:	4b4e      	ldr	r3, [pc, #312]	@ (80064c0 <HAL_RCC_OscConfig+0x27c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fd ffd0 	bl	8004330 <HAL_InitTick>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d052      	beq.n	8006440 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	e35e      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d032      	beq.n	800640c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063a6:	4b43      	ldr	r3, [pc, #268]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a42      	ldr	r2, [pc, #264]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063b2:	f7fe f80d 	bl	80043d0 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063ba:	f7fe f809 	bl	80043d0 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e347      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063cc:	4b39      	ldr	r3, [pc, #228]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063d8:	4b36      	ldr	r3, [pc, #216]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a35      	ldr	r2, [pc, #212]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063de:	f043 0308 	orr.w	r3, r3, #8
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b33      	ldr	r3, [pc, #204]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	4930      	ldr	r1, [pc, #192]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063f6:	4b2f      	ldr	r3, [pc, #188]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	492b      	ldr	r1, [pc, #172]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006406:	4313      	orrs	r3, r2
 8006408:	604b      	str	r3, [r1, #4]
 800640a:	e01a      	b.n	8006442 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800640c:	4b29      	ldr	r3, [pc, #164]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a28      	ldr	r2, [pc, #160]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006418:	f7fd ffda 	bl	80043d0 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006420:	f7fd ffd6 	bl	80043d0 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e314      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006432:	4b20      	ldr	r3, [pc, #128]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x1dc>
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d073      	beq.n	8006536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d005      	beq.n	8006460 <HAL_RCC_OscConfig+0x21c>
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d10e      	bne.n	8006478 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b03      	cmp	r3, #3
 800645e:	d10b      	bne.n	8006478 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	4b14      	ldr	r3, [pc, #80]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d063      	beq.n	8006534 <HAL_RCC_OscConfig+0x2f0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d15f      	bne.n	8006534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e2f1      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006480:	d106      	bne.n	8006490 <HAL_RCC_OscConfig+0x24c>
 8006482:	4b0c      	ldr	r3, [pc, #48]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a0b      	ldr	r2, [pc, #44]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 8006488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e025      	b.n	80064dc <HAL_RCC_OscConfig+0x298>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006498:	d114      	bne.n	80064c4 <HAL_RCC_OscConfig+0x280>
 800649a:	4b06      	ldr	r3, [pc, #24]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a05      	ldr	r2, [pc, #20]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80064a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b03      	ldr	r3, [pc, #12]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a02      	ldr	r2, [pc, #8]	@ (80064b4 <HAL_RCC_OscConfig+0x270>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e013      	b.n	80064dc <HAL_RCC_OscConfig+0x298>
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800d714 	.word	0x0800d714
 80064bc:	20000000 	.word	0x20000000
 80064c0:	20000004 	.word	0x20000004
 80064c4:	4ba0      	ldr	r3, [pc, #640]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a9f      	ldr	r2, [pc, #636]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80064ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	4b9d      	ldr	r3, [pc, #628]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a9c      	ldr	r2, [pc, #624]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80064d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d013      	beq.n	800650c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fd ff74 	bl	80043d0 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ec:	f7fd ff70 	bl	80043d0 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b64      	cmp	r3, #100	@ 0x64
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e2ae      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064fe:	4b92      	ldr	r3, [pc, #584]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <HAL_RCC_OscConfig+0x2a8>
 800650a:	e014      	b.n	8006536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fd ff60 	bl	80043d0 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006514:	f7fd ff5c 	bl	80043d0 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b64      	cmp	r3, #100	@ 0x64
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e29a      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006526:	4b88      	ldr	r3, [pc, #544]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x2d0>
 8006532:	e000      	b.n	8006536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d060      	beq.n	8006604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d005      	beq.n	8006554 <HAL_RCC_OscConfig+0x310>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b0c      	cmp	r3, #12
 800654c:	d119      	bne.n	8006582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d116      	bne.n	8006582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006554:	4b7c      	ldr	r3, [pc, #496]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_RCC_OscConfig+0x328>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e277      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656c:	4b76      	ldr	r3, [pc, #472]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	061b      	lsls	r3, r3, #24
 800657a:	4973      	ldr	r1, [pc, #460]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800657c:	4313      	orrs	r3, r2
 800657e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	e040      	b.n	8006604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d023      	beq.n	80065d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800658a:	4b6f      	ldr	r3, [pc, #444]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a6e      	ldr	r2, [pc, #440]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fd ff1b 	bl	80043d0 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659e:	f7fd ff17 	bl	80043d0 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e255      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065b0:	4b65      	ldr	r3, [pc, #404]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065bc:	4b62      	ldr	r3, [pc, #392]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	495f      	ldr	r1, [pc, #380]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	604b      	str	r3, [r1, #4]
 80065d0:	e018      	b.n	8006604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a5c      	ldr	r2, [pc, #368]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80065d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065de:	f7fd fef7 	bl	80043d0 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e6:	f7fd fef3 	bl	80043d0 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e231      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065f8:	4b53      	ldr	r3, [pc, #332]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d03c      	beq.n	800668a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01c      	beq.n	8006652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006618:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800661a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800661e:	4a4a      	ldr	r2, [pc, #296]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006628:	f7fd fed2 	bl	80043d0 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006630:	f7fd fece 	bl	80043d0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e20c      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006642:	4b41      	ldr	r3, [pc, #260]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ef      	beq.n	8006630 <HAL_RCC_OscConfig+0x3ec>
 8006650:	e01b      	b.n	800668a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006652:	4b3d      	ldr	r3, [pc, #244]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006658:	4a3b      	ldr	r2, [pc, #236]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fd feb5 	bl	80043d0 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666a:	f7fd feb1 	bl	80043d0 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e1ef      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800667c:	4b32      	ldr	r3, [pc, #200]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800667e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1ef      	bne.n	800666a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80a6 	beq.w	80067e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006698:	2300      	movs	r3, #0
 800669a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800669c:	4b2a      	ldr	r3, [pc, #168]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800669e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a8:	4b27      	ldr	r3, [pc, #156]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80066aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ac:	4a26      	ldr	r2, [pc, #152]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80066ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80066b4:	4b24      	ldr	r3, [pc, #144]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 80066b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066c0:	2301      	movs	r3, #1
 80066c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066c4:	4b21      	ldr	r3, [pc, #132]	@ (800674c <HAL_RCC_OscConfig+0x508>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d118      	bne.n	8006702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066d0:	4b1e      	ldr	r3, [pc, #120]	@ (800674c <HAL_RCC_OscConfig+0x508>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1d      	ldr	r2, [pc, #116]	@ (800674c <HAL_RCC_OscConfig+0x508>)
 80066d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066dc:	f7fd fe78 	bl	80043d0 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e4:	f7fd fe74 	bl	80043d0 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e1b2      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f6:	4b15      	ldr	r3, [pc, #84]	@ (800674c <HAL_RCC_OscConfig+0x508>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d108      	bne.n	800671c <HAL_RCC_OscConfig+0x4d8>
 800670a:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006710:	4a0d      	ldr	r2, [pc, #52]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800671a:	e029      	b.n	8006770 <HAL_RCC_OscConfig+0x52c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b05      	cmp	r3, #5
 8006722:	d115      	bne.n	8006750 <HAL_RCC_OscConfig+0x50c>
 8006724:	4b08      	ldr	r3, [pc, #32]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672a:	4a07      	ldr	r2, [pc, #28]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800672c:	f043 0304 	orr.w	r3, r3, #4
 8006730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006734:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673a:	4a03      	ldr	r2, [pc, #12]	@ (8006748 <HAL_RCC_OscConfig+0x504>)
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006744:	e014      	b.n	8006770 <HAL_RCC_OscConfig+0x52c>
 8006746:	bf00      	nop
 8006748:	40021000 	.word	0x40021000
 800674c:	40007000 	.word	0x40007000
 8006750:	4b9a      	ldr	r3, [pc, #616]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	4a99      	ldr	r2, [pc, #612]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006760:	4b96      	ldr	r3, [pc, #600]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006766:	4a95      	ldr	r2, [pc, #596]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006768:	f023 0304 	bic.w	r3, r3, #4
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d016      	beq.n	80067a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006778:	f7fd fe2a 	bl	80043d0 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800677e:	e00a      	b.n	8006796 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006780:	f7fd fe26 	bl	80043d0 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e162      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006796:	4b89      	ldr	r3, [pc, #548]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ed      	beq.n	8006780 <HAL_RCC_OscConfig+0x53c>
 80067a4:	e015      	b.n	80067d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fd fe13 	bl	80043d0 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fd fe0f 	bl	80043d0 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e14b      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067c4:	4b7d      	ldr	r3, [pc, #500]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1ed      	bne.n	80067ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067d2:	7ffb      	ldrb	r3, [r7, #31]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d105      	bne.n	80067e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d8:	4b78      	ldr	r3, [pc, #480]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	4a77      	ldr	r2, [pc, #476]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 80067de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d03c      	beq.n	800686a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01c      	beq.n	8006832 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067f8:	4b70      	ldr	r3, [pc, #448]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 80067fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067fe:	4a6f      	ldr	r2, [pc, #444]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006808:	f7fd fde2 	bl	80043d0 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006810:	f7fd fdde 	bl	80043d0 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e11c      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006822:	4b66      	ldr	r3, [pc, #408]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006824:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0ef      	beq.n	8006810 <HAL_RCC_OscConfig+0x5cc>
 8006830:	e01b      	b.n	800686a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006832:	4b62      	ldr	r3, [pc, #392]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006834:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006838:	4a60      	ldr	r2, [pc, #384]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006842:	f7fd fdc5 	bl	80043d0 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800684a:	f7fd fdc1 	bl	80043d0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e0ff      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800685c:	4b57      	ldr	r3, [pc, #348]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 800685e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1ef      	bne.n	800684a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80f3 	beq.w	8006a5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006878:	2b02      	cmp	r3, #2
 800687a:	f040 80c9 	bne.w	8006a10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800687e:	4b4f      	ldr	r3, [pc, #316]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f003 0203 	and.w	r2, r3, #3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688e:	429a      	cmp	r2, r3
 8006890:	d12c      	bne.n	80068ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	3b01      	subs	r3, #1
 800689e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d123      	bne.n	80068ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d11b      	bne.n	80068ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d113      	bne.n	80068ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	3b01      	subs	r3, #1
 80068d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d109      	bne.n	80068ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	3b01      	subs	r3, #1
 80068e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d06b      	beq.n	80069c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b0c      	cmp	r3, #12
 80068f0:	d062      	beq.n	80069b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068f2:	4b32      	ldr	r3, [pc, #200]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e0ac      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006902:	4b2e      	ldr	r3, [pc, #184]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a2d      	ldr	r2, [pc, #180]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800690c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800690e:	f7fd fd5f 	bl	80043d0 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006916:	f7fd fd5b 	bl	80043d0 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e099      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006928:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006934:	4b21      	ldr	r3, [pc, #132]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	4b21      	ldr	r3, [pc, #132]	@ (80069c0 <HAL_RCC_OscConfig+0x77c>)
 800693a:	4013      	ands	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006944:	3a01      	subs	r2, #1
 8006946:	0112      	lsls	r2, r2, #4
 8006948:	4311      	orrs	r1, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800694e:	0212      	lsls	r2, r2, #8
 8006950:	4311      	orrs	r1, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006956:	0852      	lsrs	r2, r2, #1
 8006958:	3a01      	subs	r2, #1
 800695a:	0552      	lsls	r2, r2, #21
 800695c:	4311      	orrs	r1, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006962:	0852      	lsrs	r2, r2, #1
 8006964:	3a01      	subs	r2, #1
 8006966:	0652      	lsls	r2, r2, #25
 8006968:	4311      	orrs	r1, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800696e:	06d2      	lsls	r2, r2, #27
 8006970:	430a      	orrs	r2, r1
 8006972:	4912      	ldr	r1, [pc, #72]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006974:	4313      	orrs	r3, r2
 8006976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006978:	4b10      	ldr	r3, [pc, #64]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a0f      	ldr	r2, [pc, #60]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 800697e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006984:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 800698a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800698e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006990:	f7fd fd1e 	bl	80043d0 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006998:	f7fd fd1a 	bl	80043d0 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e058      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069aa:	4b04      	ldr	r3, [pc, #16]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069b6:	e050      	b.n	8006a5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e04f      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
 80069bc:	40021000 	.word	0x40021000
 80069c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c4:	4b27      	ldr	r3, [pc, #156]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d144      	bne.n	8006a5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80069d0:	4b24      	ldr	r3, [pc, #144]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a23      	ldr	r2, [pc, #140]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 80069d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069dc:	4b21      	ldr	r3, [pc, #132]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4a20      	ldr	r2, [pc, #128]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 80069e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069e8:	f7fd fcf2 	bl	80043d0 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f0:	f7fd fcee 	bl	80043d0 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e02c      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a02:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x7ac>
 8006a0e:	e024      	b.n	8006a5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	d01f      	beq.n	8006a56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a16:	4b13      	ldr	r3, [pc, #76]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a12      	ldr	r2, [pc, #72]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 8006a1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a22:	f7fd fcd5 	bl	80043d0 <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fd fcd1 	bl	80043d0 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e00f      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3c:	4b09      	ldr	r3, [pc, #36]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f0      	bne.n	8006a2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a48:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	4905      	ldr	r1, [pc, #20]	@ (8006a64 <HAL_RCC_OscConfig+0x820>)
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <HAL_RCC_OscConfig+0x824>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	60cb      	str	r3, [r1, #12]
 8006a54:	e001      	b.n	8006a5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40021000 	.word	0x40021000
 8006a68:	feeefffc 	.word	0xfeeefffc

08006a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e0e7      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a80:	4b75      	ldr	r3, [pc, #468]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d910      	bls.n	8006ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8e:	4b72      	ldr	r3, [pc, #456]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f023 0207 	bic.w	r2, r3, #7
 8006a96:	4970      	ldr	r1, [pc, #448]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0cf      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	4b66      	ldr	r3, [pc, #408]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d908      	bls.n	8006ade <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006acc:	4b63      	ldr	r3, [pc, #396]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4960      	ldr	r1, [pc, #384]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d04c      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d107      	bne.n	8006b02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af2:	4b5a      	ldr	r3, [pc, #360]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d121      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e0a6      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d107      	bne.n	8006b1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b0a:	4b54      	ldr	r3, [pc, #336]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d115      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e09a      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b22:	4b4e      	ldr	r3, [pc, #312]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e08e      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b32:	4b4a      	ldr	r3, [pc, #296]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e086      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b42:	4b46      	ldr	r3, [pc, #280]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f023 0203 	bic.w	r2, r3, #3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4943      	ldr	r1, [pc, #268]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b54:	f7fd fc3c 	bl	80043d0 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5c:	f7fd fc38 	bl	80043d0 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e06e      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	4b3a      	ldr	r3, [pc, #232]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 020c 	and.w	r2, r3, #12
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d1eb      	bne.n	8006b5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d010      	beq.n	8006bb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	4b31      	ldr	r3, [pc, #196]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d208      	bcs.n	8006bb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	492b      	ldr	r1, [pc, #172]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bb2:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d210      	bcs.n	8006be2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc0:	4b25      	ldr	r3, [pc, #148]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f023 0207 	bic.w	r2, r3, #7
 8006bc8:	4923      	ldr	r1, [pc, #140]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd0:	4b21      	ldr	r3, [pc, #132]	@ (8006c58 <HAL_RCC_ClockConfig+0x1ec>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d001      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e036      	b.n	8006c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bee:	4b1b      	ldr	r3, [pc, #108]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	4918      	ldr	r1, [pc, #96]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c0c:	4b13      	ldr	r3, [pc, #76]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	4910      	ldr	r1, [pc, #64]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c20:	f000 f824 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b0d      	ldr	r3, [pc, #52]	@ (8006c5c <HAL_RCC_ClockConfig+0x1f0>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	490b      	ldr	r1, [pc, #44]	@ (8006c60 <HAL_RCC_ClockConfig+0x1f4>)
 8006c32:	5ccb      	ldrb	r3, [r1, r3]
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3c:	4a09      	ldr	r2, [pc, #36]	@ (8006c64 <HAL_RCC_ClockConfig+0x1f8>)
 8006c3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c40:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <HAL_RCC_ClockConfig+0x1fc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fd fb73 	bl	8004330 <HAL_InitTick>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40022000 	.word	0x40022000
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	0800d714 	.word	0x0800d714
 8006c64:	20000000 	.word	0x20000000
 8006c68:	20000004 	.word	0x20000004

08006c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b089      	sub	sp, #36	@ 0x24
 8006c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 030c 	and.w	r3, r3, #12
 8006c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c84:	4b3b      	ldr	r3, [pc, #236]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d121      	bne.n	8006cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d11e      	bne.n	8006cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ca0:	4b34      	ldr	r3, [pc, #208]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d107      	bne.n	8006cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cac:	4b31      	ldr	r3, [pc, #196]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e005      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d102      	bne.n	8006cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ce4:	4b25      	ldr	r3, [pc, #148]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e004      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d101      	bne.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cf0:	4b23      	ldr	r3, [pc, #140]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0c      	cmp	r3, #12
 8006cf8:	d134      	bne.n	8006d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d003      	beq.n	8006d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d003      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0xac>
 8006d10:	e005      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d12:	4b1a      	ldr	r3, [pc, #104]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8006d14:	617b      	str	r3, [r7, #20]
      break;
 8006d16:	e005      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d18:	4b19      	ldr	r3, [pc, #100]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d1a:	617b      	str	r3, [r7, #20]
      break;
 8006d1c:	e002      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	617b      	str	r3, [r7, #20]
      break;
 8006d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d24:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	3301      	adds	r3, #1
 8006d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d32:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	fb03 f202 	mul.w	r2, r3, r2
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	0e5b      	lsrs	r3, r3, #25
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	3301      	adds	r3, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d64:	69bb      	ldr	r3, [r7, #24]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3724      	adds	r7, #36	@ 0x24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000
 8006d78:	0800d72c 	.word	0x0800d72c
 8006d7c:	00f42400 	.word	0x00f42400
 8006d80:	007a1200 	.word	0x007a1200

08006d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d88:	4b03      	ldr	r3, [pc, #12]	@ (8006d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000000 	.word	0x20000000

08006d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006da0:	f7ff fff0 	bl	8006d84 <HAL_RCC_GetHCLKFreq>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	4904      	ldr	r1, [pc, #16]	@ (8006dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006db2:	5ccb      	ldrb	r3, [r1, r3]
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	0800d724 	.word	0x0800d724

08006dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006dcc:	f7ff ffda 	bl	8006d84 <HAL_RCC_GetHCLKFreq>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	0adb      	lsrs	r3, r3, #11
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	4904      	ldr	r1, [pc, #16]	@ (8006df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dde:	5ccb      	ldrb	r3, [r1, r3]
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40021000 	.word	0x40021000
 8006df0:	0800d724 	.word	0x0800d724

08006df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e00:	4b2a      	ldr	r3, [pc, #168]	@ (8006eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e0c:	f7ff f9b6 	bl	800617c <HAL_PWREx_GetVoltageRange>
 8006e10:	6178      	str	r0, [r7, #20]
 8006e12:	e014      	b.n	8006e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	4b25      	ldr	r3, [pc, #148]	@ (8006eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e18:	4a24      	ldr	r2, [pc, #144]	@ (8006eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e20:	4b22      	ldr	r3, [pc, #136]	@ (8006eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e2c:	f7ff f9a6 	bl	800617c <HAL_PWREx_GetVoltageRange>
 8006e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e32:	4b1e      	ldr	r3, [pc, #120]	@ (8006eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e36:	4a1d      	ldr	r2, [pc, #116]	@ (8006eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e44:	d10b      	bne.n	8006e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b80      	cmp	r3, #128	@ 0x80
 8006e4a:	d919      	bls.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006e50:	d902      	bls.n	8006e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e52:	2302      	movs	r3, #2
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	e013      	b.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e58:	2301      	movs	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	e010      	b.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b80      	cmp	r3, #128	@ 0x80
 8006e62:	d902      	bls.n	8006e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e64:	2303      	movs	r3, #3
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	e00a      	b.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b80      	cmp	r3, #128	@ 0x80
 8006e6e:	d102      	bne.n	8006e76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e70:	2302      	movs	r3, #2
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	e004      	b.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b70      	cmp	r3, #112	@ 0x70
 8006e7a:	d101      	bne.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f023 0207 	bic.w	r2, r3, #7
 8006e88:	4909      	ldr	r1, [pc, #36]	@ (8006eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e90:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d001      	beq.n	8006ea2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	40022000 	.word	0x40022000

08006eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d031      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ed8:	d01a      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006eda:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ede:	d814      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ee4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ee8:	d10f      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006eea:	4b5d      	ldr	r3, [pc, #372]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	4a5c      	ldr	r2, [pc, #368]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ef6:	e00c      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fa22 	bl	8007348 <RCCEx_PLLSAI1_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f08:	e003      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8006f0e:	e000      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f12:	7cfb      	ldrb	r3, [r7, #19]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10b      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f18:	4b51      	ldr	r3, [pc, #324]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f26:	494e      	ldr	r1, [pc, #312]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f2e:	e001      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	7cfb      	ldrb	r3, [r7, #19]
 8006f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 809e 	beq.w	800707e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f42:	2300      	movs	r3, #0
 8006f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f46:	4b46      	ldr	r3, [pc, #280]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f56:	2300      	movs	r3, #0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00d      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f5c:	4b40      	ldr	r3, [pc, #256]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f60:	4a3f      	ldr	r2, [pc, #252]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f68:	4b3d      	ldr	r3, [pc, #244]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f74:	2301      	movs	r3, #1
 8006f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f78:	4b3a      	ldr	r3, [pc, #232]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a39      	ldr	r2, [pc, #228]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f84:	f7fd fa24 	bl	80043d0 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f8a:	e009      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8c:	f7fd fa20 	bl	80043d0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d902      	bls.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8006f9e:	e005      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fa0:	4b30      	ldr	r3, [pc, #192]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0ef      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006fac:	7cfb      	ldrb	r3, [r7, #19]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d15a      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01e      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d019      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fce:	4b24      	ldr	r3, [pc, #144]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fda:	4b21      	ldr	r3, [pc, #132]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fea:	4b1d      	ldr	r3, [pc, #116]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ffa:	4a19      	ldr	r2, [pc, #100]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d016      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7fd f9e0 	bl	80043d0 <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007012:	e00b      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007014:	f7fd f9dc 	bl	80043d0 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d902      	bls.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	74fb      	strb	r3, [r7, #19]
            break;
 800702a:	e006      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800702c:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ec      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800703a:	7cfb      	ldrb	r3, [r7, #19]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007046:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704e:	4904      	ldr	r1, [pc, #16]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007056:	e009      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007058:	7cfb      	ldrb	r3, [r7, #19]
 800705a:	74bb      	strb	r3, [r7, #18]
 800705c:	e006      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800705e:	bf00      	nop
 8007060:	40021000 	.word	0x40021000
 8007064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	7cfb      	ldrb	r3, [r7, #19]
 800706a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800706c:	7c7b      	ldrb	r3, [r7, #17]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d105      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007072:	4b8d      	ldr	r3, [pc, #564]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	4a8c      	ldr	r2, [pc, #560]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800707c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800708a:	4b87      	ldr	r3, [pc, #540]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007090:	f023 0203 	bic.w	r2, r3, #3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4983      	ldr	r1, [pc, #524]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070ac:	4b7e      	ldr	r3, [pc, #504]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b2:	f023 020c 	bic.w	r2, r3, #12
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ba:	497b      	ldr	r1, [pc, #492]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070ce:	4b76      	ldr	r3, [pc, #472]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	4972      	ldr	r1, [pc, #456]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070f0:	4b6d      	ldr	r3, [pc, #436]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	496a      	ldr	r1, [pc, #424]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007112:	4b65      	ldr	r3, [pc, #404]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007120:	4961      	ldr	r1, [pc, #388]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007134:	4b5c      	ldr	r3, [pc, #368]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007142:	4959      	ldr	r1, [pc, #356]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007156:	4b54      	ldr	r3, [pc, #336]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	4950      	ldr	r1, [pc, #320]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007178:	4b4b      	ldr	r3, [pc, #300]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007186:	4948      	ldr	r1, [pc, #288]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800719a:	4b43      	ldr	r3, [pc, #268]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a8:	493f      	ldr	r1, [pc, #252]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d028      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071bc:	4b3a      	ldr	r3, [pc, #232]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ca:	4937      	ldr	r1, [pc, #220]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071da:	d106      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071dc:	4b32      	ldr	r3, [pc, #200]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	4a31      	ldr	r2, [pc, #196]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071e6:	60d3      	str	r3, [r2, #12]
 80071e8:	e011      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f2:	d10c      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f8a4 	bl	8007348 <RCCEx_PLLSAI1_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007204:	7cfb      	ldrb	r3, [r7, #19]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800720a:	7cfb      	ldrb	r3, [r7, #19]
 800720c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d028      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800721a:	4b23      	ldr	r3, [pc, #140]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007220:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	491f      	ldr	r1, [pc, #124]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007238:	d106      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800723a:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	4a1a      	ldr	r2, [pc, #104]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007244:	60d3      	str	r3, [r2, #12]
 8007246:	e011      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007250:	d10c      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	2101      	movs	r1, #1
 8007258:	4618      	mov	r0, r3
 800725a:	f000 f875 	bl	8007348 <RCCEx_PLLSAI1_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007262:	7cfb      	ldrb	r3, [r7, #19]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007268:	7cfb      	ldrb	r3, [r7, #19]
 800726a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d02b      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007278:	4b0b      	ldr	r3, [pc, #44]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007286:	4908      	ldr	r1, [pc, #32]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007296:	d109      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007298:	4b03      	ldr	r3, [pc, #12]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	4a02      	ldr	r2, [pc, #8]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800729e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072a2:	60d3      	str	r3, [r2, #12]
 80072a4:	e014      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80072a6:	bf00      	nop
 80072a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3304      	adds	r3, #4
 80072ba:	2101      	movs	r1, #1
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f843 	bl	8007348 <RCCEx_PLLSAI1_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072c6:	7cfb      	ldrb	r3, [r7, #19]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01c      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072dc:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ea:	4916      	ldr	r1, [pc, #88]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072fa:	d10c      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2102      	movs	r1, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f820 	bl	8007348 <RCCEx_PLLSAI1_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800730c:	7cfb      	ldrb	r3, [r7, #19]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8007312:	7cfb      	ldrb	r3, [r7, #19]
 8007314:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007322:	4b08      	ldr	r3, [pc, #32]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007328:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007330:	4904      	ldr	r1, [pc, #16]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007338:	7cbb      	ldrb	r3, [r7, #18]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40021000 	.word	0x40021000

08007348 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007356:	4b74      	ldr	r3, [pc, #464]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d018      	beq.n	8007394 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007362:	4b71      	ldr	r3, [pc, #452]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f003 0203 	and.w	r2, r3, #3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d10d      	bne.n	800738e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
       ||
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800737a:	4b6b      	ldr	r3, [pc, #428]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
       ||
 800738a:	429a      	cmp	r2, r3
 800738c:	d047      	beq.n	800741e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]
 8007392:	e044      	b.n	800741e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d018      	beq.n	80073ce <RCCEx_PLLSAI1_Config+0x86>
 800739c:	2b03      	cmp	r3, #3
 800739e:	d825      	bhi.n	80073ec <RCCEx_PLLSAI1_Config+0xa4>
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d002      	beq.n	80073aa <RCCEx_PLLSAI1_Config+0x62>
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d009      	beq.n	80073bc <RCCEx_PLLSAI1_Config+0x74>
 80073a8:	e020      	b.n	80073ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d11d      	bne.n	80073f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ba:	e01a      	b.n	80073f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d116      	bne.n	80073f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073cc:	e013      	b.n	80073f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073ce:	4b56      	ldr	r3, [pc, #344]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10f      	bne.n	80073fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073da:	4b53      	ldr	r3, [pc, #332]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073ea:	e006      	b.n	80073fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	e004      	b.n	80073fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073f2:	bf00      	nop
 80073f4:	e002      	b.n	80073fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10d      	bne.n	800741e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007402:	4b49      	ldr	r3, [pc, #292]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	3b01      	subs	r3, #1
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	430b      	orrs	r3, r1
 8007418:	4943      	ldr	r1, [pc, #268]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800741a:	4313      	orrs	r3, r2
 800741c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d17c      	bne.n	800751e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007424:	4b40      	ldr	r3, [pc, #256]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3f      	ldr	r2, [pc, #252]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800742a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800742e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007430:	f7fc ffce 	bl	80043d0 <HAL_GetTick>
 8007434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007436:	e009      	b.n	800744c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007438:	f7fc ffca 	bl	80043d0 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d902      	bls.n	800744c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	73fb      	strb	r3, [r7, #15]
        break;
 800744a:	e005      	b.n	8007458 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800744c:	4b36      	ldr	r3, [pc, #216]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ef      	bne.n	8007438 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d15f      	bne.n	800751e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d110      	bne.n	8007486 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007464:	4b30      	ldr	r3, [pc, #192]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800746c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6892      	ldr	r2, [r2, #8]
 8007474:	0211      	lsls	r1, r2, #8
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	68d2      	ldr	r2, [r2, #12]
 800747a:	06d2      	lsls	r2, r2, #27
 800747c:	430a      	orrs	r2, r1
 800747e:	492a      	ldr	r1, [pc, #168]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	610b      	str	r3, [r1, #16]
 8007484:	e027      	b.n	80074d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d112      	bne.n	80074b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800748c:	4b26      	ldr	r3, [pc, #152]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007494:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6892      	ldr	r2, [r2, #8]
 800749c:	0211      	lsls	r1, r2, #8
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6912      	ldr	r2, [r2, #16]
 80074a2:	0852      	lsrs	r2, r2, #1
 80074a4:	3a01      	subs	r2, #1
 80074a6:	0552      	lsls	r2, r2, #21
 80074a8:	430a      	orrs	r2, r1
 80074aa:	491f      	ldr	r1, [pc, #124]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	610b      	str	r3, [r1, #16]
 80074b0:	e011      	b.n	80074d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80074ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6892      	ldr	r2, [r2, #8]
 80074c2:	0211      	lsls	r1, r2, #8
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6952      	ldr	r2, [r2, #20]
 80074c8:	0852      	lsrs	r2, r2, #1
 80074ca:	3a01      	subs	r2, #1
 80074cc:	0652      	lsls	r2, r2, #25
 80074ce:	430a      	orrs	r2, r1
 80074d0:	4915      	ldr	r1, [pc, #84]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80074d6:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a13      	ldr	r2, [pc, #76]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e2:	f7fc ff75 	bl	80043d0 <HAL_GetTick>
 80074e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074e8:	e009      	b.n	80074fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074ea:	f7fc ff71 	bl	80043d0 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d902      	bls.n	80074fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	73fb      	strb	r3, [r7, #15]
          break;
 80074fc:	e005      	b.n	800750a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0ef      	beq.n	80074ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	4903      	ldr	r1, [pc, #12]	@ (8007528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800751a:	4313      	orrs	r3, r2
 800751c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000

0800752c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e049      	b.n	80075d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc fc88 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f000 fa7e 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d001      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e03b      	b.n	800766c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a19      	ldr	r2, [pc, #100]	@ (8007678 <HAL_TIM_Base_Start_IT+0x9c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_TIM_Base_Start_IT+0x4e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761e:	d004      	beq.n	800762a <HAL_TIM_Base_Start_IT+0x4e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a15      	ldr	r2, [pc, #84]	@ (800767c <HAL_TIM_Base_Start_IT+0xa0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d115      	bne.n	8007656 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	4b13      	ldr	r3, [pc, #76]	@ (8007680 <HAL_TIM_Base_Start_IT+0xa4>)
 8007632:	4013      	ands	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b06      	cmp	r3, #6
 800763a:	d015      	beq.n	8007668 <HAL_TIM_Base_Start_IT+0x8c>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007642:	d011      	beq.n	8007668 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	e008      	b.n	8007668 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e000      	b.n	800766a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007668:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40012c00 	.word	0x40012c00
 800767c:	40014000 	.word	0x40014000
 8007680:	00010007 	.word	0x00010007

08007684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d020      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01b      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0202 	mvn.w	r2, #2
 80076b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f9ad 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f99f 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9b0 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01b      	beq.n	8007734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0204 	mvn.w	r2, #4
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f987 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f979 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f98a 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d020      	beq.n	8007780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01b      	beq.n	8007780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0208 	mvn.w	r2, #8
 8007750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2204      	movs	r2, #4
 8007756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f961 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f953 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f964 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b00      	cmp	r3, #0
 8007788:	d020      	beq.n	80077cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01b      	beq.n	80077cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0210 	mvn.w	r2, #16
 800779c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2208      	movs	r2, #8
 80077a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f93b 	bl	8007a2e <HAL_TIM_IC_CaptureCallback>
 80077b8:	e005      	b.n	80077c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f92d 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f93e 	bl	8007a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00c      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0201 	mvn.w	r2, #1
 80077e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fb fc40 	bl	8003070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa9a 	bl	8007d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa92 	bl	8007d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00c      	beq.n	800785c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d007      	beq.n	800785c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8fd 	bl	8007a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0220 	mvn.w	r2, #32
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa5a 	bl	8007d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_TIM_ConfigClockSource+0x1c>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e0b6      	b.n	8007a12 <HAL_TIM_ConfigClockSource+0x18a>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80078c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e0:	d03e      	beq.n	8007960 <HAL_TIM_ConfigClockSource+0xd8>
 80078e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e6:	f200 8087 	bhi.w	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ee:	f000 8086 	beq.w	80079fe <HAL_TIM_ConfigClockSource+0x176>
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f6:	d87f      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 80078f8:	2b70      	cmp	r3, #112	@ 0x70
 80078fa:	d01a      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0xaa>
 80078fc:	2b70      	cmp	r3, #112	@ 0x70
 80078fe:	d87b      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 8007900:	2b60      	cmp	r3, #96	@ 0x60
 8007902:	d050      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x11e>
 8007904:	2b60      	cmp	r3, #96	@ 0x60
 8007906:	d877      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 8007908:	2b50      	cmp	r3, #80	@ 0x50
 800790a:	d03c      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0xfe>
 800790c:	2b50      	cmp	r3, #80	@ 0x50
 800790e:	d873      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 8007910:	2b40      	cmp	r3, #64	@ 0x40
 8007912:	d058      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x13e>
 8007914:	2b40      	cmp	r3, #64	@ 0x40
 8007916:	d86f      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 8007918:	2b30      	cmp	r3, #48	@ 0x30
 800791a:	d064      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15e>
 800791c:	2b30      	cmp	r3, #48	@ 0x30
 800791e:	d86b      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 8007920:	2b20      	cmp	r3, #32
 8007922:	d060      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15e>
 8007924:	2b20      	cmp	r3, #32
 8007926:	d867      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d05c      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15e>
 800792c:	2b10      	cmp	r3, #16
 800792e:	d05a      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15e>
 8007930:	e062      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007942:	f000 f971 	bl	8007c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	609a      	str	r2, [r3, #8]
      break;
 800795e:	e04f      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007970:	f000 f95a 	bl	8007c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007982:	609a      	str	r2, [r3, #8]
      break;
 8007984:	e03c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	461a      	mov	r2, r3
 8007994:	f000 f8ce 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2150      	movs	r1, #80	@ 0x50
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f927 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079a4:	e02c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 f8ed 	bl	8007b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2160      	movs	r1, #96	@ 0x60
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f917 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079c4:	e01c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d2:	461a      	mov	r2, r3
 80079d4:	f000 f8ae 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2140      	movs	r1, #64	@ 0x40
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f907 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f000 f8fe 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079f6:	e003      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
      break;
 80079fc:	e000      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80079fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b28 <TIM_Base_SetConfig+0xbc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x20>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8a:	d108      	bne.n	8007a9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a21      	ldr	r2, [pc, #132]	@ (8007b28 <TIM_Base_SetConfig+0xbc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_Base_SetConfig+0x52>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aac:	d007      	beq.n	8007abe <TIM_Base_SetConfig+0x52>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b2c <TIM_Base_SetConfig+0xc0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_Base_SetConfig+0x52>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b30 <TIM_Base_SetConfig+0xc4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d108      	bne.n	8007ad0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a0c      	ldr	r2, [pc, #48]	@ (8007b28 <TIM_Base_SetConfig+0xbc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <TIM_Base_SetConfig+0xa0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a0b      	ldr	r2, [pc, #44]	@ (8007b2c <TIM_Base_SetConfig+0xc0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_Base_SetConfig+0xa0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a0a      	ldr	r2, [pc, #40]	@ (8007b30 <TIM_Base_SetConfig+0xc4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d103      	bne.n	8007b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	615a      	str	r2, [r3, #20]
}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400

08007b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 030a 	bic.w	r3, r3, #10
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b087      	sub	sp, #28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f023 0210 	bic.w	r2, r3, #16
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f043 0307 	orr.w	r3, r3, #7
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	021a      	lsls	r2, r3, #8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	609a      	str	r2, [r3, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e04f      	b.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a21      	ldr	r2, [pc, #132]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d108      	bne.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a14      	ldr	r2, [pc, #80]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce8:	d004      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a10      	ldr	r2, [pc, #64]	@ (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d10c      	bne.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40014000 	.word	0x40014000

08007d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e040      	b.n	8007e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fc f88c 	bl	8003eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2224      	movs	r2, #36	@ 0x24
 8007d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fe5e 	bl	8008a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc01 	bl	80085c4 <UART_SetConfig>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e01b      	b.n	8007e04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fedd 	bl	8008bbc <UART_CheckIdleState>
 8007e02:	4603      	mov	r3, r0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	@ 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d165      	bne.n	8007eee <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_UART_Transmit_DMA+0x22>
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e05e      	b.n	8007ef0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2221      	movs	r2, #33	@ 0x21
 8007e54:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d027      	beq.n	8007eae <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e62:	4a25      	ldr	r2, [pc, #148]	@ (8007ef8 <HAL_UART_Transmit_DMA+0xec>)
 8007e64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6a:	4a24      	ldr	r2, [pc, #144]	@ (8007efc <HAL_UART_Transmit_DMA+0xf0>)
 8007e6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e72:	4a23      	ldr	r2, [pc, #140]	@ (8007f00 <HAL_UART_Transmit_DMA+0xf4>)
 8007e74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e86:	4619      	mov	r1, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3328      	adds	r3, #40	@ 0x28
 8007e8e:	461a      	mov	r2, r3
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	f7fd fe23 	bl	8005adc <HAL_DMA_Start_IT>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e020      	b.n	8007ef0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2240      	movs	r2, #64	@ 0x40
 8007eb4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed6:	623a      	str	r2, [r7, #32]
 8007ed8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	69f9      	ldr	r1, [r7, #28]
 8007edc:	6a3a      	ldr	r2, [r7, #32]
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e5      	bne.n	8007eb6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e000      	b.n	8007ef0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
  }
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3728      	adds	r7, #40	@ 0x28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	08009031 	.word	0x08009031
 8007efc:	080090cb 	.word	0x080090cb
 8007f00:	08009251 	.word	0x08009251

08007f04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	@ 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d137      	bne.n	8007f8c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_UART_Receive_DMA+0x24>
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e030      	b.n	8007f8e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	@ (8007f98 <HAL_UART_Receive_DMA+0x94>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d01f      	beq.n	8007f7c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d018      	beq.n	8007f7c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	613b      	str	r3, [r7, #16]
   return(result);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	623b      	str	r3, [r7, #32]
 8007f6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 ff2a 	bl	8008ddc <UART_Start_Receive_DMA>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	e000      	b.n	8007f8e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
  }
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3728      	adds	r7, #40	@ 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	40008000 	.word	0x40008000

08007f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b0ba      	sub	sp, #232	@ 0xe8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fca:	4013      	ands	r3, r2
 8007fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d115      	bne.n	8008004 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00f      	beq.n	8008004 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 82ae 	beq.w	8008556 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
      }
      return;
 8008002:	e2a8      	b.n	8008556 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8117 	beq.w	800823c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800800e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800801a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800801e:	4b85      	ldr	r3, [pc, #532]	@ (8008234 <HAL_UART_IRQHandler+0x298>)
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 810a 	beq.w	800823c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d011      	beq.n	8008058 <HAL_UART_IRQHandler+0xbc>
 8008034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804e:	f043 0201 	orr.w	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d011      	beq.n	8008088 <HAL_UART_IRQHandler+0xec>
 8008064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2202      	movs	r2, #2
 8008076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807e:	f043 0204 	orr.w	r2, r3, #4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d011      	beq.n	80080b8 <HAL_UART_IRQHandler+0x11c>
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2204      	movs	r2, #4
 80080a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ae:	f043 0202 	orr.w	r2, r3, #2
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d017      	beq.n	80080f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2208      	movs	r2, #8
 80080e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ea:	f043 0208 	orr.w	r2, r3, #8
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d012      	beq.n	8008126 <HAL_UART_IRQHandler+0x18a>
 8008100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00c      	beq.n	8008126 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800811c:	f043 0220 	orr.w	r2, r3, #32
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 8214 	beq.w	800855a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800813e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008160:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d005      	beq.n	800817e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008176:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800817a:	2b00      	cmp	r3, #0
 800817c:	d04f      	beq.n	800821e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fef2 	bl	8008f68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818e:	2b40      	cmp	r3, #64	@ 0x40
 8008190:	d141      	bne.n	8008216 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3308      	adds	r3, #8
 8008198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1d9      	bne.n	8008192 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d013      	beq.n	800820e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ea:	4a13      	ldr	r2, [pc, #76]	@ (8008238 <HAL_UART_IRQHandler+0x29c>)
 80081ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fd fd10 	bl	8005c18 <HAL_DMA_Abort_IT>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d017      	beq.n	800822e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820c:	e00f      	b.n	800822e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f9c2 	bl	8008598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008214:	e00b      	b.n	800822e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9be 	bl	8008598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821c:	e007      	b.n	800822e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9ba 	bl	8008598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800822c:	e195      	b.n	800855a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822e:	bf00      	nop
    return;
 8008230:	e193      	b.n	800855a <HAL_UART_IRQHandler+0x5be>
 8008232:	bf00      	nop
 8008234:	04000120 	.word	0x04000120
 8008238:	080092cf 	.word	0x080092cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008240:	2b01      	cmp	r3, #1
 8008242:	f040 814e 	bne.w	80084e2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 8147 	beq.w	80084e2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8140 	beq.w	80084e2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2210      	movs	r2, #16
 8008268:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008274:	2b40      	cmp	r3, #64	@ 0x40
 8008276:	f040 80b8 	bne.w	80083ea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008286:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8167 	beq.w	800855e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800829a:	429a      	cmp	r2, r3
 800829c:	f080 815f 	bcs.w	800855e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f040 8086 	bne.w	80083c8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1da      	bne.n	80082bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800832a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800832e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800833c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e1      	bne.n	8008306 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3308      	adds	r3, #8
 8008362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800836c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e3      	bne.n	8008342 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008398:	f023 0310 	bic.w	r3, r3, #16
 800839c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e4      	bne.n	8008388 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fbea 	bl	8005b9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083da:	b29b      	uxth	r3, r3
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8e2 	bl	80085ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083e8:	e0b9      	b.n	800855e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80ab 	beq.w	8008562 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800840c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 80a6 	beq.w	8008562 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800842a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008438:	647b      	str	r3, [r7, #68]	@ 0x44
 800843a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800843e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e4      	bne.n	8008416 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	623b      	str	r3, [r7, #32]
   return(result);
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008470:	633a      	str	r2, [r7, #48]	@ 0x30
 8008472:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e3      	bne.n	800844c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f023 0310 	bic.w	r3, r3, #16
 80084ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084ba:	61fb      	str	r3, [r7, #28]
 80084bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	69b9      	ldr	r1, [r7, #24]
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	617b      	str	r3, [r7, #20]
   return(result);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e4      	bne.n	8008498 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f866 	bl	80085ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084e0:	e03f      	b.n	8008562 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00e      	beq.n	800850c <HAL_UART_IRQHandler+0x570>
 80084ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008502:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 ff22 	bl	800934e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800850a:	e02d      	b.n	8008568 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800850c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00e      	beq.n	8008536 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800851c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	d008      	beq.n	8008536 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01c      	beq.n	8008566 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
    }
    return;
 8008534:	e017      	b.n	8008566 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d012      	beq.n	8008568 <HAL_UART_IRQHandler+0x5cc>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fed3 	bl	80092fa <UART_EndTransmit_IT>
    return;
 8008554:	e008      	b.n	8008568 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008556:	bf00      	nop
 8008558:	e006      	b.n	8008568 <HAL_UART_IRQHandler+0x5cc>
    return;
 800855a:	bf00      	nop
 800855c:	e004      	b.n	8008568 <HAL_UART_IRQHandler+0x5cc>
      return;
 800855e:	bf00      	nop
 8008560:	e002      	b.n	8008568 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008562:	bf00      	nop
 8008564:	e000      	b.n	8008568 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008566:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008568:	37e8      	adds	r7, #232	@ 0xe8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop

08008570 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c8:	b08a      	sub	sp, #40	@ 0x28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	431a      	orrs	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b9e      	ldr	r3, [pc, #632]	@ (800886c <UART_SetConfig+0x2a8>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a93      	ldr	r2, [pc, #588]	@ (8008870 <UART_SetConfig+0x2ac>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d004      	beq.n	8008630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800862c:	4313      	orrs	r3, r2
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008640:	430a      	orrs	r2, r1
 8008642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a8a      	ldr	r2, [pc, #552]	@ (8008874 <UART_SetConfig+0x2b0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d126      	bne.n	800869c <UART_SetConfig+0xd8>
 800864e:	4b8a      	ldr	r3, [pc, #552]	@ (8008878 <UART_SetConfig+0x2b4>)
 8008650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	2b03      	cmp	r3, #3
 800865a:	d81b      	bhi.n	8008694 <UART_SetConfig+0xd0>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <UART_SetConfig+0xa0>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008675 	.word	0x08008675
 8008668:	08008685 	.word	0x08008685
 800866c:	0800867d 	.word	0x0800867d
 8008670:	0800868d 	.word	0x0800868d
 8008674:	2301      	movs	r3, #1
 8008676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800867a:	e0ab      	b.n	80087d4 <UART_SetConfig+0x210>
 800867c:	2302      	movs	r3, #2
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008682:	e0a7      	b.n	80087d4 <UART_SetConfig+0x210>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868a:	e0a3      	b.n	80087d4 <UART_SetConfig+0x210>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008692:	e09f      	b.n	80087d4 <UART_SetConfig+0x210>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869a:	e09b      	b.n	80087d4 <UART_SetConfig+0x210>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a76      	ldr	r2, [pc, #472]	@ (800887c <UART_SetConfig+0x2b8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d138      	bne.n	8008718 <UART_SetConfig+0x154>
 80086a6:	4b74      	ldr	r3, [pc, #464]	@ (8008878 <UART_SetConfig+0x2b4>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ac:	f003 030c 	and.w	r3, r3, #12
 80086b0:	2b0c      	cmp	r3, #12
 80086b2:	d82d      	bhi.n	8008710 <UART_SetConfig+0x14c>
 80086b4:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <UART_SetConfig+0xf8>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086f1 	.word	0x080086f1
 80086c0:	08008711 	.word	0x08008711
 80086c4:	08008711 	.word	0x08008711
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008701 	.word	0x08008701
 80086d0:	08008711 	.word	0x08008711
 80086d4:	08008711 	.word	0x08008711
 80086d8:	08008711 	.word	0x08008711
 80086dc:	080086f9 	.word	0x080086f9
 80086e0:	08008711 	.word	0x08008711
 80086e4:	08008711 	.word	0x08008711
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008709 	.word	0x08008709
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f6:	e06d      	b.n	80087d4 <UART_SetConfig+0x210>
 80086f8:	2302      	movs	r3, #2
 80086fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fe:	e069      	b.n	80087d4 <UART_SetConfig+0x210>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008706:	e065      	b.n	80087d4 <UART_SetConfig+0x210>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800870e:	e061      	b.n	80087d4 <UART_SetConfig+0x210>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008716:	e05d      	b.n	80087d4 <UART_SetConfig+0x210>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a58      	ldr	r2, [pc, #352]	@ (8008880 <UART_SetConfig+0x2bc>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d125      	bne.n	800876e <UART_SetConfig+0x1aa>
 8008722:	4b55      	ldr	r3, [pc, #340]	@ (8008878 <UART_SetConfig+0x2b4>)
 8008724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008728:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800872c:	2b30      	cmp	r3, #48	@ 0x30
 800872e:	d016      	beq.n	800875e <UART_SetConfig+0x19a>
 8008730:	2b30      	cmp	r3, #48	@ 0x30
 8008732:	d818      	bhi.n	8008766 <UART_SetConfig+0x1a2>
 8008734:	2b20      	cmp	r3, #32
 8008736:	d00a      	beq.n	800874e <UART_SetConfig+0x18a>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d814      	bhi.n	8008766 <UART_SetConfig+0x1a2>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <UART_SetConfig+0x182>
 8008740:	2b10      	cmp	r3, #16
 8008742:	d008      	beq.n	8008756 <UART_SetConfig+0x192>
 8008744:	e00f      	b.n	8008766 <UART_SetConfig+0x1a2>
 8008746:	2300      	movs	r3, #0
 8008748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800874c:	e042      	b.n	80087d4 <UART_SetConfig+0x210>
 800874e:	2302      	movs	r3, #2
 8008750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008754:	e03e      	b.n	80087d4 <UART_SetConfig+0x210>
 8008756:	2304      	movs	r3, #4
 8008758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800875c:	e03a      	b.n	80087d4 <UART_SetConfig+0x210>
 800875e:	2308      	movs	r3, #8
 8008760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008764:	e036      	b.n	80087d4 <UART_SetConfig+0x210>
 8008766:	2310      	movs	r3, #16
 8008768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800876c:	e032      	b.n	80087d4 <UART_SetConfig+0x210>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a3f      	ldr	r2, [pc, #252]	@ (8008870 <UART_SetConfig+0x2ac>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d12a      	bne.n	80087ce <UART_SetConfig+0x20a>
 8008778:	4b3f      	ldr	r3, [pc, #252]	@ (8008878 <UART_SetConfig+0x2b4>)
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800877e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008786:	d01a      	beq.n	80087be <UART_SetConfig+0x1fa>
 8008788:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800878c:	d81b      	bhi.n	80087c6 <UART_SetConfig+0x202>
 800878e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008792:	d00c      	beq.n	80087ae <UART_SetConfig+0x1ea>
 8008794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008798:	d815      	bhi.n	80087c6 <UART_SetConfig+0x202>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <UART_SetConfig+0x1e2>
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a2:	d008      	beq.n	80087b6 <UART_SetConfig+0x1f2>
 80087a4:	e00f      	b.n	80087c6 <UART_SetConfig+0x202>
 80087a6:	2300      	movs	r3, #0
 80087a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ac:	e012      	b.n	80087d4 <UART_SetConfig+0x210>
 80087ae:	2302      	movs	r3, #2
 80087b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087b4:	e00e      	b.n	80087d4 <UART_SetConfig+0x210>
 80087b6:	2304      	movs	r3, #4
 80087b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087bc:	e00a      	b.n	80087d4 <UART_SetConfig+0x210>
 80087be:	2308      	movs	r3, #8
 80087c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087c4:	e006      	b.n	80087d4 <UART_SetConfig+0x210>
 80087c6:	2310      	movs	r3, #16
 80087c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087cc:	e002      	b.n	80087d4 <UART_SetConfig+0x210>
 80087ce:	2310      	movs	r3, #16
 80087d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a25      	ldr	r2, [pc, #148]	@ (8008870 <UART_SetConfig+0x2ac>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	f040 808a 	bne.w	80088f4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d824      	bhi.n	8008832 <UART_SetConfig+0x26e>
 80087e8:	a201      	add	r2, pc, #4	@ (adr r2, 80087f0 <UART_SetConfig+0x22c>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008815 	.word	0x08008815
 80087f4:	08008833 	.word	0x08008833
 80087f8:	0800881d 	.word	0x0800881d
 80087fc:	08008833 	.word	0x08008833
 8008800:	08008823 	.word	0x08008823
 8008804:	08008833 	.word	0x08008833
 8008808:	08008833 	.word	0x08008833
 800880c:	08008833 	.word	0x08008833
 8008810:	0800882b 	.word	0x0800882b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008814:	f7fe fac2 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008818:	61f8      	str	r0, [r7, #28]
        break;
 800881a:	e010      	b.n	800883e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800881c:	4b19      	ldr	r3, [pc, #100]	@ (8008884 <UART_SetConfig+0x2c0>)
 800881e:	61fb      	str	r3, [r7, #28]
        break;
 8008820:	e00d      	b.n	800883e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008822:	f7fe fa23 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8008826:	61f8      	str	r0, [r7, #28]
        break;
 8008828:	e009      	b.n	800883e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800882a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800882e:	61fb      	str	r3, [r7, #28]
        break;
 8008830:	e005      	b.n	800883e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800883c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 8109 	beq.w	8008a58 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4413      	add	r3, r2
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	429a      	cmp	r2, r3
 8008854:	d305      	bcc.n	8008862 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	429a      	cmp	r2, r3
 8008860:	d912      	bls.n	8008888 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008868:	e0f6      	b.n	8008a58 <UART_SetConfig+0x494>
 800886a:	bf00      	nop
 800886c:	efff69f3 	.word	0xefff69f3
 8008870:	40008000 	.word	0x40008000
 8008874:	40013800 	.word	0x40013800
 8008878:	40021000 	.word	0x40021000
 800887c:	40004400 	.word	0x40004400
 8008880:	40004800 	.word	0x40004800
 8008884:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2200      	movs	r2, #0
 800888c:	461c      	mov	r4, r3
 800888e:	4615      	mov	r5, r2
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	022b      	lsls	r3, r5, #8
 800889a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800889e:	0222      	lsls	r2, r4, #8
 80088a0:	68f9      	ldr	r1, [r7, #12]
 80088a2:	6849      	ldr	r1, [r1, #4]
 80088a4:	0849      	lsrs	r1, r1, #1
 80088a6:	2000      	movs	r0, #0
 80088a8:	4688      	mov	r8, r1
 80088aa:	4681      	mov	r9, r0
 80088ac:	eb12 0a08 	adds.w	sl, r2, r8
 80088b0:	eb43 0b09 	adc.w	fp, r3, r9
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c2:	4650      	mov	r0, sl
 80088c4:	4659      	mov	r1, fp
 80088c6:	f7f8 f98f 	bl	8000be8 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4613      	mov	r3, r2
 80088d0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088d8:	d308      	bcc.n	80088ec <UART_SetConfig+0x328>
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088e0:	d204      	bcs.n	80088ec <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e0b5      	b.n	8008a58 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088f2:	e0b1      	b.n	8008a58 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088fc:	d15d      	bne.n	80089ba <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80088fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008902:	2b08      	cmp	r3, #8
 8008904:	d827      	bhi.n	8008956 <UART_SetConfig+0x392>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <UART_SetConfig+0x348>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008931 	.word	0x08008931
 8008910:	08008939 	.word	0x08008939
 8008914:	08008941 	.word	0x08008941
 8008918:	08008957 	.word	0x08008957
 800891c:	08008947 	.word	0x08008947
 8008920:	08008957 	.word	0x08008957
 8008924:	08008957 	.word	0x08008957
 8008928:	08008957 	.word	0x08008957
 800892c:	0800894f 	.word	0x0800894f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008930:	f7fe fa34 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 8008934:	61f8      	str	r0, [r7, #28]
        break;
 8008936:	e014      	b.n	8008962 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008938:	f7fe fa46 	bl	8006dc8 <HAL_RCC_GetPCLK2Freq>
 800893c:	61f8      	str	r0, [r7, #28]
        break;
 800893e:	e010      	b.n	8008962 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008940:	4b4c      	ldr	r3, [pc, #304]	@ (8008a74 <UART_SetConfig+0x4b0>)
 8008942:	61fb      	str	r3, [r7, #28]
        break;
 8008944:	e00d      	b.n	8008962 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008946:	f7fe f991 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 800894a:	61f8      	str	r0, [r7, #28]
        break;
 800894c:	e009      	b.n	8008962 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800894e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008952:	61fb      	str	r3, [r7, #28]
        break;
 8008954:	e005      	b.n	8008962 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d077      	beq.n	8008a58 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	005a      	lsls	r2, r3, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	441a      	add	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	fbb2 f3f3 	udiv	r3, r2, r3
 800897c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2b0f      	cmp	r3, #15
 8008982:	d916      	bls.n	80089b2 <UART_SetConfig+0x3ee>
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800898a:	d212      	bcs.n	80089b2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f023 030f 	bic.w	r3, r3, #15
 8008994:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	085b      	lsrs	r3, r3, #1
 800899a:	b29b      	uxth	r3, r3
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	8afb      	ldrh	r3, [r7, #22]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	8afa      	ldrh	r2, [r7, #22]
 80089ae:	60da      	str	r2, [r3, #12]
 80089b0:	e052      	b.n	8008a58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80089b8:	e04e      	b.n	8008a58 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d827      	bhi.n	8008a12 <UART_SetConfig+0x44e>
 80089c2:	a201      	add	r2, pc, #4	@ (adr r2, 80089c8 <UART_SetConfig+0x404>)
 80089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	08008a13 	.word	0x08008a13
 80089d8:	08008a03 	.word	0x08008a03
 80089dc:	08008a13 	.word	0x08008a13
 80089e0:	08008a13 	.word	0x08008a13
 80089e4:	08008a13 	.word	0x08008a13
 80089e8:	08008a0b 	.word	0x08008a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ec:	f7fe f9d6 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
 80089f0:	61f8      	str	r0, [r7, #28]
        break;
 80089f2:	e014      	b.n	8008a1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fe f9e8 	bl	8006dc8 <HAL_RCC_GetPCLK2Freq>
 80089f8:	61f8      	str	r0, [r7, #28]
        break;
 80089fa:	e010      	b.n	8008a1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a74 <UART_SetConfig+0x4b0>)
 80089fe:	61fb      	str	r3, [r7, #28]
        break;
 8008a00:	e00d      	b.n	8008a1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a02:	f7fe f933 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8008a06:	61f8      	str	r0, [r7, #28]
        break;
 8008a08:	e009      	b.n	8008a1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a0e:	61fb      	str	r3, [r7, #28]
        break;
 8008a10:	e005      	b.n	8008a1e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d019      	beq.n	8008a58 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	085a      	lsrs	r2, r3, #1
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	441a      	add	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	d909      	bls.n	8008a52 <UART_SetConfig+0x48e>
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a44:	d205      	bcs.n	8008a52 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60da      	str	r2, [r3, #12]
 8008a50:	e002      	b.n	8008a58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008a64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3728      	adds	r7, #40	@ 0x28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a72:	bf00      	nop
 8008a74:	00f42400 	.word	0x00f42400

08008a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00a      	beq.n	8008aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b76:	d10a      	bne.n	8008b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b098      	sub	sp, #96	@ 0x60
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bcc:	f7fb fc00 	bl	80043d0 <HAL_GetTick>
 8008bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d12e      	bne.n	8008c3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008be8:	2200      	movs	r2, #0
 8008bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f88c 	bl	8008d0c <UART_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d021      	beq.n	8008c3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e6      	bne.n	8008bfa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e062      	b.n	8008d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d149      	bne.n	8008ce0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c54:	2200      	movs	r2, #0
 8008c56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f856 	bl	8008d0c <UART_WaitOnFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d03c      	beq.n	8008ce0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	623b      	str	r3, [r7, #32]
   return(result);
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e6      	bne.n	8008c66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cb8:	61fa      	str	r2, [r7, #28]
 8008cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	69b9      	ldr	r1, [r7, #24]
 8008cbe:	69fa      	ldr	r2, [r7, #28]
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e5      	bne.n	8008c98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e011      	b.n	8008d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3758      	adds	r7, #88	@ 0x58
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1c:	e049      	b.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d24:	d045      	beq.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d26:	f7fb fb53 	bl	80043d0 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d302      	bcc.n	8008d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e048      	b.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d031      	beq.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d110      	bne.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2208      	movs	r2, #8
 8008d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 f8ff 	bl	8008f68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e029      	b.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d8c:	d111      	bne.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f8e5 	bl	8008f68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e00f      	b.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69da      	ldr	r2, [r3, #28]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	bf0c      	ite	eq
 8008dc2:	2301      	moveq	r3, #1
 8008dc4:	2300      	movne	r3, #0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d0a6      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b096      	sub	sp, #88	@ 0x58
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2222      	movs	r2, #34	@ 0x22
 8008e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d028      	beq.n	8008e62 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e14:	4a3e      	ldr	r2, [pc, #248]	@ (8008f10 <UART_Start_Receive_DMA+0x134>)
 8008e16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e1c:	4a3d      	ldr	r2, [pc, #244]	@ (8008f14 <UART_Start_Receive_DMA+0x138>)
 8008e1e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e24:	4a3c      	ldr	r2, [pc, #240]	@ (8008f18 <UART_Start_Receive_DMA+0x13c>)
 8008e26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3324      	adds	r3, #36	@ 0x24
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e40:	461a      	mov	r2, r3
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	f7fc fe4a 	bl	8005adc <HAL_DMA_Start_IT>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2210      	movs	r2, #16
 8008e52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e051      	b.n	8008f06 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d018      	beq.n	8008e9c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e8a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e6      	bne.n	8008e6a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ebc:	637a      	str	r2, [r7, #52]	@ 0x34
 8008ebe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e5      	bne.n	8008e9c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ef0:	623a      	str	r2, [r7, #32]
 8008ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	69f9      	ldr	r1, [r7, #28]
 8008ef6:	6a3a      	ldr	r2, [r7, #32]
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e5      	bne.n	8008ed0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3758      	adds	r7, #88	@ 0x58
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	080090e7 	.word	0x080090e7
 8008f14:	08009213 	.word	0x08009213
 8008f18:	08009251 	.word	0x08009251

08008f1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b089      	sub	sp, #36	@ 0x24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	61bb      	str	r3, [r7, #24]
 8008f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6979      	ldr	r1, [r7, #20]
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e6      	bne.n	8008f24 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008f5c:	bf00      	nop
 8008f5e:	3724      	adds	r7, #36	@ 0x24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b095      	sub	sp, #84	@ 0x54
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e6      	bne.n	8008f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f023 0301 	bic.w	r3, r3, #1
 8008fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e5      	bne.n	8008fa2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d118      	bne.n	8009010 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f023 0310 	bic.w	r3, r3, #16
 8008ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6979      	ldr	r1, [r7, #20]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	613b      	str	r3, [r7, #16]
   return(result);
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e6      	bne.n	8008fde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2220      	movs	r2, #32
 8009014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009024:	bf00      	nop
 8009026:	3754      	adds	r7, #84	@ 0x54
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b090      	sub	sp, #64	@ 0x40
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d137      	bne.n	80090bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800904c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904e:	2200      	movs	r2, #0
 8009050:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	e853 3f00 	ldrex	r3, [r3]
 8009062:	623b      	str	r3, [r7, #32]
   return(result);
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800906a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800906c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3308      	adds	r3, #8
 8009072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009074:	633a      	str	r2, [r7, #48]	@ 0x30
 8009076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800907a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800907c:	e841 2300 	strex	r3, r2, [r1]
 8009080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e5      	bne.n	8009054 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	60fb      	str	r3, [r7, #12]
   return(result);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	69b9      	ldr	r1, [r7, #24]
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	617b      	str	r3, [r7, #20]
   return(result);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e6      	bne.n	8009088 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090ba:	e002      	b.n	80090c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80090be:	f7f9 f901 	bl	80022c4 <HAL_UART_TxCpltCallback>
}
 80090c2:	bf00      	nop
 80090c4:	3740      	adds	r7, #64	@ 0x40
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff fa49 	bl	8008570 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b09c      	sub	sp, #112	@ 0x70
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d171      	bne.n	80091e6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009104:	2200      	movs	r2, #0
 8009106:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800910a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800911a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800911e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800912a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800912e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e6      	bne.n	800910a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800914c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914e:	f023 0301 	bic.w	r3, r3, #1
 8009152:	667b      	str	r3, [r7, #100]	@ 0x64
 8009154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3308      	adds	r3, #8
 800915a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800915c:	647a      	str	r2, [r7, #68]	@ 0x44
 800915e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800916a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e5      	bne.n	800913c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3308      	adds	r3, #8
 8009176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	623b      	str	r3, [r7, #32]
   return(result);
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009186:	663b      	str	r3, [r7, #96]	@ 0x60
 8009188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009190:	633a      	str	r2, [r7, #48]	@ 0x30
 8009192:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800919e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e5      	bne.n	8009170 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091a6:	2220      	movs	r2, #32
 80091a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d118      	bne.n	80091e6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f023 0310 	bic.w	r3, r3, #16
 80091c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	69b9      	ldr	r1, [r7, #24]
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	617b      	str	r3, [r7, #20]
   return(result);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e6      	bne.n	80091b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e8:	2200      	movs	r2, #0
 80091ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d107      	bne.n	8009204 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80091fa:	4619      	mov	r1, r3
 80091fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80091fe:	f7ff f9d5 	bl	80085ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009202:	e002      	b.n	800920a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009204:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009206:	f7f9 f86f 	bl	80022e8 <HAL_UART_RxCpltCallback>
}
 800920a:	bf00      	nop
 800920c:	3770      	adds	r7, #112	@ 0x70
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800922a:	2b01      	cmp	r3, #1
 800922c:	d109      	bne.n	8009242 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	b29b      	uxth	r3, r3
 8009238:	4619      	mov	r1, r3
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f7ff f9b6 	bl	80085ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009240:	e002      	b.n	8009248 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff f99e 	bl	8008584 <HAL_UART_RxHalfCpltCallback>
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009262:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009276:	2b80      	cmp	r3, #128	@ 0x80
 8009278:	d109      	bne.n	800928e <UART_DMAError+0x3e>
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b21      	cmp	r3, #33	@ 0x21
 800927e:	d106      	bne.n	800928e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2200      	movs	r2, #0
 8009284:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009288:	6978      	ldr	r0, [r7, #20]
 800928a:	f7ff fe47 	bl	8008f1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009298:	2b40      	cmp	r3, #64	@ 0x40
 800929a:	d109      	bne.n	80092b0 <UART_DMAError+0x60>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b22      	cmp	r3, #34	@ 0x22
 80092a0:	d106      	bne.n	80092b0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f7ff fe5c 	bl	8008f68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092b6:	f043 0210 	orr.w	r2, r3, #16
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f7ff f969 	bl	8008598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c6:	bf00      	nop
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff f953 	bl	8008598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b088      	sub	sp, #32
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7f8 ffbf 	bl	80022c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009346:	bf00      	nop
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
	...

08009364 <arm_cfft_radix8by2_f32>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	ed2d 8b08 	vpush	{d8-d11}
 800936c:	4607      	mov	r7, r0
 800936e:	4608      	mov	r0, r1
 8009370:	f8b7 c000 	ldrh.w	ip, [r7]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800937a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800937e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009382:	f000 80b0 	beq.w	80094e6 <arm_cfft_radix8by2_f32+0x182>
 8009386:	008c      	lsls	r4, r1, #2
 8009388:	3410      	adds	r4, #16
 800938a:	f100 0310 	add.w	r3, r0, #16
 800938e:	1906      	adds	r6, r0, r4
 8009390:	3210      	adds	r2, #16
 8009392:	4444      	add	r4, r8
 8009394:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009398:	f108 0510 	add.w	r5, r8, #16
 800939c:	ed15 2a04 	vldr	s4, [r5, #-16]
 80093a0:	ed55 2a03 	vldr	s5, [r5, #-12]
 80093a4:	ed54 4a04 	vldr	s9, [r4, #-16]
 80093a8:	ed14 4a03 	vldr	s8, [r4, #-12]
 80093ac:	ed14 6a02 	vldr	s12, [r4, #-8]
 80093b0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80093b4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80093b8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80093bc:	ed55 0a01 	vldr	s1, [r5, #-4]
 80093c0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80093c4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80093c8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80093cc:	ed13 5a02 	vldr	s10, [r3, #-8]
 80093d0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80093d4:	ed16 1a02 	vldr	s2, [r6, #-8]
 80093d8:	ed56 1a01 	vldr	s3, [r6, #-4]
 80093dc:	ee73 ba82 	vadd.f32	s23, s7, s4
 80093e0:	ee37 ba22 	vadd.f32	s22, s14, s5
 80093e4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80093e8:	ee33 9a04 	vadd.f32	s18, s6, s8
 80093ec:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80093f0:	ee75 aa00 	vadd.f32	s21, s10, s0
 80093f4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80093f8:	ee71 8a06 	vadd.f32	s17, s2, s12
 80093fc:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009400:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009404:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009408:	ed03 aa01 	vstr	s20, [r3, #-4]
 800940c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009410:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009414:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009418:	ed46 8a02 	vstr	s17, [r6, #-8]
 800941c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009420:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009424:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009428:	ed52 6a03 	vldr	s13, [r2, #-12]
 800942c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009430:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009434:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009438:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800943c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009440:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009444:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009448:	ee27 7a03 	vmul.f32	s14, s14, s6
 800944c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009450:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009454:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009458:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800945c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009460:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009464:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009468:	ed05 3a04 	vstr	s6, [r5, #-16]
 800946c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009470:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009474:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009478:	ee76 6a41 	vsub.f32	s13, s12, s2
 800947c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009480:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009484:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009488:	ed52 5a02 	vldr	s11, [r2, #-8]
 800948c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009490:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009494:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009498:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800949c:	ee25 5a07 	vmul.f32	s10, s10, s14
 80094a0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80094a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80094a8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80094ac:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80094b0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80094b4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80094b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094bc:	3310      	adds	r3, #16
 80094be:	4563      	cmp	r3, ip
 80094c0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80094c4:	f106 0610 	add.w	r6, r6, #16
 80094c8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80094cc:	f102 0210 	add.w	r2, r2, #16
 80094d0:	ed04 6a02 	vstr	s12, [r4, #-8]
 80094d4:	ed04 7a01 	vstr	s14, [r4, #-4]
 80094d8:	f105 0510 	add.w	r5, r5, #16
 80094dc:	f104 0410 	add.w	r4, r4, #16
 80094e0:	f47f af5c 	bne.w	800939c <arm_cfft_radix8by2_f32+0x38>
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	b28c      	uxth	r4, r1
 80094e8:	4621      	mov	r1, r4
 80094ea:	2302      	movs	r3, #2
 80094ec:	f000 fc1c 	bl	8009d28 <arm_radix8_butterfly_f32>
 80094f0:	ecbd 8b08 	vpop	{d8-d11}
 80094f4:	4621      	mov	r1, r4
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	4640      	mov	r0, r8
 80094fa:	2302      	movs	r3, #2
 80094fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	f000 bc12 	b.w	8009d28 <arm_radix8_butterfly_f32>

08009504 <arm_cfft_radix8by4_f32>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	ed2d 8b0a 	vpush	{d8-d12}
 800950c:	b08d      	sub	sp, #52	@ 0x34
 800950e:	460d      	mov	r5, r1
 8009510:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009512:	8801      	ldrh	r1, [r0, #0]
 8009514:	6842      	ldr	r2, [r0, #4]
 8009516:	900a      	str	r0, [sp, #40]	@ 0x28
 8009518:	0849      	lsrs	r1, r1, #1
 800951a:	008b      	lsls	r3, r1, #2
 800951c:	18ee      	adds	r6, r5, r3
 800951e:	18f0      	adds	r0, r6, r3
 8009520:	edd0 5a00 	vldr	s11, [r0]
 8009524:	edd5 7a00 	vldr	s15, [r5]
 8009528:	ed96 7a00 	vldr	s14, [r6]
 800952c:	edd0 3a01 	vldr	s7, [r0, #4]
 8009530:	ed96 4a01 	vldr	s8, [r6, #4]
 8009534:	ed95 5a01 	vldr	s10, [r5, #4]
 8009538:	9008      	str	r0, [sp, #32]
 800953a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800953e:	18c7      	adds	r7, r0, r3
 8009540:	edd7 4a00 	vldr	s9, [r7]
 8009544:	ed97 3a01 	vldr	s6, [r7, #4]
 8009548:	9701      	str	r7, [sp, #4]
 800954a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800954e:	462c      	mov	r4, r5
 8009550:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009554:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009558:	ee16 ca90 	vmov	ip, s13
 800955c:	f844 cb08 	str.w	ip, [r4], #8
 8009560:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009564:	edd6 5a01 	vldr	s11, [r6, #4]
 8009568:	edd7 2a01 	vldr	s5, [r7, #4]
 800956c:	9404      	str	r4, [sp, #16]
 800956e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009572:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009576:	ee36 6a47 	vsub.f32	s12, s12, s14
 800957a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800957e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009582:	0849      	lsrs	r1, r1, #1
 8009584:	f102 0e08 	add.w	lr, r2, #8
 8009588:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800958c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009590:	9109      	str	r1, [sp, #36]	@ 0x24
 8009592:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009596:	f1a1 0902 	sub.w	r9, r1, #2
 800959a:	f8cd e00c 	str.w	lr, [sp, #12]
 800959e:	4631      	mov	r1, r6
 80095a0:	ee13 ea90 	vmov	lr, s7
 80095a4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80095a8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80095ac:	4604      	mov	r4, r0
 80095ae:	edc5 5a01 	vstr	s11, [r5, #4]
 80095b2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80095b6:	f841 eb08 	str.w	lr, [r1], #8
 80095ba:	ee34 5a24 	vadd.f32	s10, s8, s9
 80095be:	ee16 ea10 	vmov	lr, s12
 80095c2:	ed86 5a01 	vstr	s10, [r6, #4]
 80095c6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80095ca:	f844 eb08 	str.w	lr, [r4], #8
 80095ce:	ee77 7a83 	vadd.f32	s15, s15, s6
 80095d2:	edc0 6a01 	vstr	s13, [r0, #4]
 80095d6:	9405      	str	r4, [sp, #20]
 80095d8:	4604      	mov	r4, r0
 80095da:	ee17 0a90 	vmov	r0, s15
 80095de:	9106      	str	r1, [sp, #24]
 80095e0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80095e4:	f102 0110 	add.w	r1, r2, #16
 80095e8:	46bc      	mov	ip, r7
 80095ea:	9100      	str	r1, [sp, #0]
 80095ec:	f847 0b08 	str.w	r0, [r7], #8
 80095f0:	f102 0118 	add.w	r1, r2, #24
 80095f4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80095f8:	9102      	str	r1, [sp, #8]
 80095fa:	ed8c 7a01 	vstr	s14, [ip, #4]
 80095fe:	9007      	str	r0, [sp, #28]
 8009600:	f000 8134 	beq.w	800986c <arm_cfft_radix8by4_f32+0x368>
 8009604:	f102 0920 	add.w	r9, r2, #32
 8009608:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800960c:	9a01      	ldr	r2, [sp, #4]
 800960e:	f8dd a000 	ldr.w	sl, [sp]
 8009612:	3b0c      	subs	r3, #12
 8009614:	4683      	mov	fp, r0
 8009616:	4463      	add	r3, ip
 8009618:	f105 0e10 	add.w	lr, r5, #16
 800961c:	f1a4 010c 	sub.w	r1, r4, #12
 8009620:	f104 0510 	add.w	r5, r4, #16
 8009624:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009628:	f1a2 040c 	sub.w	r4, r2, #12
 800962c:	f106 0010 	add.w	r0, r6, #16
 8009630:	3210      	adds	r2, #16
 8009632:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009636:	ed55 5a02 	vldr	s11, [r5, #-8]
 800963a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800963e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009642:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009646:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800964a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800964e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009652:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009656:	ee30 6a26 	vadd.f32	s12, s0, s13
 800965a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800965e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009662:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009666:	ee75 5a65 	vsub.f32	s11, s10, s11
 800966a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800966e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8009672:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009676:	ee36 7a07 	vadd.f32	s14, s12, s14
 800967a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800967e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009682:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009686:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800968a:	ed94 7a02 	vldr	s14, [r4, #8]
 800968e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009692:	ed91 ba02 	vldr	s22, [r1, #8]
 8009696:	edd3 9a02 	vldr	s19, [r3, #8]
 800969a:	edd4 2a01 	vldr	s5, [r4, #4]
 800969e:	ed9c 9a01 	vldr	s18, [ip, #4]
 80096a2:	ed93 5a01 	vldr	s10, [r3, #4]
 80096a6:	edd1 0a01 	vldr	s1, [r1, #4]
 80096aa:	ee72 6a07 	vadd.f32	s13, s4, s14
 80096ae:	ee32 2a47 	vsub.f32	s4, s4, s14
 80096b2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80096b6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80096ba:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80096be:	ee79 2a62 	vsub.f32	s5, s18, s5
 80096c2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80096c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80096ca:	edd3 8a01 	vldr	s17, [r3, #4]
 80096ce:	ee34 7a87 	vadd.f32	s14, s9, s14
 80096d2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80096d6:	ee37 7a28 	vadd.f32	s14, s14, s17
 80096da:	ee32 9a60 	vsub.f32	s18, s4, s1
 80096de:	ed8c 7a01 	vstr	s14, [ip, #4]
 80096e2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80096e6:	ed1a aa02 	vldr	s20, [sl, #-8]
 80096ea:	ee73 8a22 	vadd.f32	s17, s6, s5
 80096ee:	ee39 9a05 	vadd.f32	s18, s18, s10
 80096f2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80096f6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80096fa:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80096fe:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009702:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009706:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800970a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800970e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009712:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009716:	ee68 8a87 	vmul.f32	s17, s17, s14
 800971a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800971e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009722:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009726:	ee3b aaca 	vsub.f32	s20, s23, s20
 800972a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800972e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009732:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009736:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800973a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800973e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009742:	edc1 8a01 	vstr	s17, [r1, #4]
 8009746:	ed81 aa02 	vstr	s20, [r1, #8]
 800974a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800974e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009752:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009756:	ed59 6a03 	vldr	s13, [r9, #-12]
 800975a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800975e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009762:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009766:	ee66 9a26 	vmul.f32	s19, s12, s13
 800976a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800976e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009772:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009776:	ee27 7a26 	vmul.f32	s14, s14, s13
 800977a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800977e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009782:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009786:	ee37 7a64 	vsub.f32	s14, s14, s9
 800978a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800978e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009792:	ee75 6a60 	vsub.f32	s13, s10, s1
 8009796:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800979a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800979e:	ed45 3a02 	vstr	s7, [r5, #-8]
 80097a2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80097a6:	ed84 7a01 	vstr	s14, [r4, #4]
 80097aa:	ed84 4a02 	vstr	s8, [r4, #8]
 80097ae:	ee35 6a81 	vadd.f32	s12, s11, s2
 80097b2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80097b6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80097ba:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80097be:	ee33 3a62 	vsub.f32	s6, s6, s5
 80097c2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80097c6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80097ca:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80097ce:	ee26 5a25 	vmul.f32	s10, s12, s11
 80097d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80097d6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80097da:	ee27 7a25 	vmul.f32	s14, s14, s11
 80097de:	ee63 6a26 	vmul.f32	s13, s6, s13
 80097e2:	ee23 3a25 	vmul.f32	s6, s6, s11
 80097e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80097ea:	ee75 5a24 	vadd.f32	s11, s10, s9
 80097ee:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80097f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80097f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80097fa:	ed42 5a02 	vstr	s11, [r2, #-8]
 80097fe:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009802:	f10e 0e08 	add.w	lr, lr, #8
 8009806:	ed83 3a02 	vstr	s6, [r3, #8]
 800980a:	ed83 7a01 	vstr	s14, [r3, #4]
 800980e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009812:	f10a 0a08 	add.w	sl, sl, #8
 8009816:	f100 0008 	add.w	r0, r0, #8
 800981a:	f1a1 0108 	sub.w	r1, r1, #8
 800981e:	f109 0910 	add.w	r9, r9, #16
 8009822:	f105 0508 	add.w	r5, r5, #8
 8009826:	f1a4 0408 	sub.w	r4, r4, #8
 800982a:	f108 0818 	add.w	r8, r8, #24
 800982e:	f102 0208 	add.w	r2, r2, #8
 8009832:	f1a3 0308 	sub.w	r3, r3, #8
 8009836:	f47f aefc 	bne.w	8009632 <arm_cfft_radix8by4_f32+0x12e>
 800983a:	9907      	ldr	r1, [sp, #28]
 800983c:	9800      	ldr	r0, [sp, #0]
 800983e:	00cb      	lsls	r3, r1, #3
 8009840:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009844:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009848:	9100      	str	r1, [sp, #0]
 800984a:	9904      	ldr	r1, [sp, #16]
 800984c:	4419      	add	r1, r3
 800984e:	9104      	str	r1, [sp, #16]
 8009850:	9903      	ldr	r1, [sp, #12]
 8009852:	4419      	add	r1, r3
 8009854:	9103      	str	r1, [sp, #12]
 8009856:	9906      	ldr	r1, [sp, #24]
 8009858:	4419      	add	r1, r3
 800985a:	9106      	str	r1, [sp, #24]
 800985c:	9905      	ldr	r1, [sp, #20]
 800985e:	441f      	add	r7, r3
 8009860:	4419      	add	r1, r3
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	9105      	str	r1, [sp, #20]
 8009866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	9904      	ldr	r1, [sp, #16]
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	ed91 4a00 	vldr	s8, [r1]
 8009874:	edd0 6a00 	vldr	s13, [r0]
 8009878:	9b06      	ldr	r3, [sp, #24]
 800987a:	ed97 3a00 	vldr	s6, [r7]
 800987e:	edd3 7a00 	vldr	s15, [r3]
 8009882:	edd0 4a01 	vldr	s9, [r0, #4]
 8009886:	edd1 3a01 	vldr	s7, [r1, #4]
 800988a:	ed97 2a01 	vldr	s4, [r7, #4]
 800988e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009892:	9a03      	ldr	r2, [sp, #12]
 8009894:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8009898:	ee34 6a26 	vadd.f32	s12, s8, s13
 800989c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80098a0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80098a4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80098a8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80098ac:	ee74 6a66 	vsub.f32	s13, s8, s13
 80098b0:	ed81 5a00 	vstr	s10, [r1]
 80098b4:	ed93 5a01 	vldr	s10, [r3, #4]
 80098b8:	edd7 4a01 	vldr	s9, [r7, #4]
 80098bc:	ee35 5a85 	vadd.f32	s10, s11, s10
 80098c0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80098c4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80098c8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80098cc:	ed81 5a01 	vstr	s10, [r1, #4]
 80098d0:	edd2 1a00 	vldr	s3, [r2]
 80098d4:	edd2 2a01 	vldr	s5, [r2, #4]
 80098d8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80098dc:	ee34 4a42 	vsub.f32	s8, s8, s4
 80098e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80098e4:	ee64 4a21 	vmul.f32	s9, s8, s3
 80098e8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80098ec:	ee65 2a22 	vmul.f32	s5, s10, s5
 80098f0:	ee25 5a21 	vmul.f32	s10, s10, s3
 80098f4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80098f8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80098fc:	edc3 2a00 	vstr	s5, [r3]
 8009900:	ed83 5a01 	vstr	s10, [r3, #4]
 8009904:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009908:	9b00      	ldr	r3, [sp, #0]
 800990a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800990e:	ed93 4a01 	vldr	s8, [r3, #4]
 8009912:	ed93 5a00 	vldr	s10, [r3]
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800991c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009920:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009924:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009928:	ee65 5a84 	vmul.f32	s11, s11, s8
 800992c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009930:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009934:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009938:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800993c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009940:	edc0 5a00 	vstr	s11, [r0]
 8009944:	edd3 5a01 	vldr	s11, [r3, #4]
 8009948:	edd3 6a00 	vldr	s13, [r3]
 800994c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009950:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009954:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009958:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800995c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009960:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009964:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009968:	ee76 7a27 	vadd.f32	s15, s12, s15
 800996c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009970:	edc7 7a00 	vstr	s15, [r7]
 8009974:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8009978:	4621      	mov	r1, r4
 800997a:	686a      	ldr	r2, [r5, #4]
 800997c:	2304      	movs	r3, #4
 800997e:	f000 f9d3 	bl	8009d28 <arm_radix8_butterfly_f32>
 8009982:	4630      	mov	r0, r6
 8009984:	4621      	mov	r1, r4
 8009986:	686a      	ldr	r2, [r5, #4]
 8009988:	2304      	movs	r3, #4
 800998a:	f000 f9cd 	bl	8009d28 <arm_radix8_butterfly_f32>
 800998e:	9808      	ldr	r0, [sp, #32]
 8009990:	686a      	ldr	r2, [r5, #4]
 8009992:	4621      	mov	r1, r4
 8009994:	2304      	movs	r3, #4
 8009996:	f000 f9c7 	bl	8009d28 <arm_radix8_butterfly_f32>
 800999a:	686a      	ldr	r2, [r5, #4]
 800999c:	9801      	ldr	r0, [sp, #4]
 800999e:	4621      	mov	r1, r4
 80099a0:	2304      	movs	r3, #4
 80099a2:	b00d      	add	sp, #52	@ 0x34
 80099a4:	ecbd 8b0a 	vpop	{d8-d12}
 80099a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	f000 b9bc 	b.w	8009d28 <arm_radix8_butterfly_f32>

080099b0 <arm_cfft_f32>:
 80099b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b4:	2a01      	cmp	r2, #1
 80099b6:	4606      	mov	r6, r0
 80099b8:	4617      	mov	r7, r2
 80099ba:	460c      	mov	r4, r1
 80099bc:	4698      	mov	r8, r3
 80099be:	8805      	ldrh	r5, [r0, #0]
 80099c0:	d056      	beq.n	8009a70 <arm_cfft_f32+0xc0>
 80099c2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80099c6:	d063      	beq.n	8009a90 <arm_cfft_f32+0xe0>
 80099c8:	d916      	bls.n	80099f8 <arm_cfft_f32+0x48>
 80099ca:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80099ce:	d01a      	beq.n	8009a06 <arm_cfft_f32+0x56>
 80099d0:	d947      	bls.n	8009a62 <arm_cfft_f32+0xb2>
 80099d2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80099d6:	d05b      	beq.n	8009a90 <arm_cfft_f32+0xe0>
 80099d8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80099dc:	d105      	bne.n	80099ea <arm_cfft_f32+0x3a>
 80099de:	2301      	movs	r3, #1
 80099e0:	6872      	ldr	r2, [r6, #4]
 80099e2:	4629      	mov	r1, r5
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 f99f 	bl	8009d28 <arm_radix8_butterfly_f32>
 80099ea:	f1b8 0f00 	cmp.w	r8, #0
 80099ee:	d111      	bne.n	8009a14 <arm_cfft_f32+0x64>
 80099f0:	2f01      	cmp	r7, #1
 80099f2:	d016      	beq.n	8009a22 <arm_cfft_f32+0x72>
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	2d20      	cmp	r5, #32
 80099fa:	d049      	beq.n	8009a90 <arm_cfft_f32+0xe0>
 80099fc:	d935      	bls.n	8009a6a <arm_cfft_f32+0xba>
 80099fe:	2d40      	cmp	r5, #64	@ 0x40
 8009a00:	d0ed      	beq.n	80099de <arm_cfft_f32+0x2e>
 8009a02:	2d80      	cmp	r5, #128	@ 0x80
 8009a04:	d1f1      	bne.n	80099ea <arm_cfft_f32+0x3a>
 8009a06:	4621      	mov	r1, r4
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fcab 	bl	8009364 <arm_cfft_radix8by2_f32>
 8009a0e:	f1b8 0f00 	cmp.w	r8, #0
 8009a12:	d0ed      	beq.n	80099f0 <arm_cfft_f32+0x40>
 8009a14:	68b2      	ldr	r2, [r6, #8]
 8009a16:	89b1      	ldrh	r1, [r6, #12]
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 f841 	bl	8009aa0 <arm_bitreversal_32>
 8009a1e:	2f01      	cmp	r7, #1
 8009a20:	d1e8      	bne.n	80099f4 <arm_cfft_f32+0x44>
 8009a22:	ee07 5a90 	vmov	s15, r5
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009a32:	2d00      	cmp	r5, #0
 8009a34:	d0de      	beq.n	80099f4 <arm_cfft_f32+0x44>
 8009a36:	f104 0108 	add.w	r1, r4, #8
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	429d      	cmp	r5, r3
 8009a40:	f101 0108 	add.w	r1, r1, #8
 8009a44:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009a48:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009a4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009a50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009a54:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009a58:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009a5c:	d1ee      	bne.n	8009a3c <arm_cfft_f32+0x8c>
 8009a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a62:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009a66:	d0ba      	beq.n	80099de <arm_cfft_f32+0x2e>
 8009a68:	e7bf      	b.n	80099ea <arm_cfft_f32+0x3a>
 8009a6a:	2d10      	cmp	r5, #16
 8009a6c:	d0cb      	beq.n	8009a06 <arm_cfft_f32+0x56>
 8009a6e:	e7bc      	b.n	80099ea <arm_cfft_f32+0x3a>
 8009a70:	b19d      	cbz	r5, 8009a9a <arm_cfft_f32+0xea>
 8009a72:	f101 030c 	add.w	r3, r1, #12
 8009a76:	2200      	movs	r2, #0
 8009a78:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009a7c:	3201      	adds	r2, #1
 8009a7e:	eef1 7a67 	vneg.f32	s15, s15
 8009a82:	4295      	cmp	r5, r2
 8009a84:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009a88:	f103 0308 	add.w	r3, r3, #8
 8009a8c:	d1f4      	bne.n	8009a78 <arm_cfft_f32+0xc8>
 8009a8e:	e798      	b.n	80099c2 <arm_cfft_f32+0x12>
 8009a90:	4621      	mov	r1, r4
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff fd36 	bl	8009504 <arm_cfft_radix8by4_f32>
 8009a98:	e7a7      	b.n	80099ea <arm_cfft_f32+0x3a>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0aa      	beq.n	80099f4 <arm_cfft_f32+0x44>
 8009a9e:	e7b9      	b.n	8009a14 <arm_cfft_f32+0x64>

08009aa0 <arm_bitreversal_32>:
 8009aa0:	b1e9      	cbz	r1, 8009ade <arm_bitreversal_32+0x3e>
 8009aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	f102 0e02 	add.w	lr, r2, #2
 8009aaa:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009aae:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009ab2:	08a4      	lsrs	r4, r4, #2
 8009ab4:	089b      	lsrs	r3, r3, #2
 8009ab6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009aba:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009abe:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009ac2:	00a6      	lsls	r6, r4, #2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009aca:	3304      	adds	r3, #4
 8009acc:	1d34      	adds	r4, r6, #4
 8009ace:	3502      	adds	r5, #2
 8009ad0:	58c6      	ldr	r6, [r0, r3]
 8009ad2:	5907      	ldr	r7, [r0, r4]
 8009ad4:	50c7      	str	r7, [r0, r3]
 8009ad6:	428d      	cmp	r5, r1
 8009ad8:	5106      	str	r6, [r0, r4]
 8009ada:	d3e6      	bcc.n	8009aaa <arm_bitreversal_32+0xa>
 8009adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ade:	4770      	bx	lr

08009ae0 <arm_cmplx_mag_f32>:
 8009ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae4:	ed2d 8b02 	vpush	{d8}
 8009ae8:	0897      	lsrs	r7, r2, #2
 8009aea:	b084      	sub	sp, #16
 8009aec:	d077      	beq.n	8009bde <arm_cmplx_mag_f32+0xfe>
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	f100 0420 	add.w	r4, r0, #32
 8009af6:	f101 0510 	add.w	r5, r1, #16
 8009afa:	463e      	mov	r6, r7
 8009afc:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8009b00:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8009b04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b18:	f2c0 80c5 	blt.w	8009ca6 <arm_cmplx_mag_f32+0x1c6>
 8009b1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b24:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b28:	f100 80cb 	bmi.w	8009cc2 <arm_cmplx_mag_f32+0x1e2>
 8009b2c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009b30:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8009b34:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8009b38:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4c:	f2c0 80a8 	blt.w	8009ca0 <arm_cmplx_mag_f32+0x1c0>
 8009b50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b58:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b5c:	f100 80a8 	bmi.w	8009cb0 <arm_cmplx_mag_f32+0x1d0>
 8009b60:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009b64:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009b68:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009b6c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b80:	f2c0 808b 	blt.w	8009c9a <arm_cmplx_mag_f32+0x1ba>
 8009b84:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b90:	f100 80a9 	bmi.w	8009ce6 <arm_cmplx_mag_f32+0x206>
 8009b94:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009b98:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009b9c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009ba0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ba4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009ba8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb4:	db6e      	blt.n	8009c94 <arm_cmplx_mag_f32+0x1b4>
 8009bb6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009bc2:	f100 8087 	bmi.w	8009cd4 <arm_cmplx_mag_f32+0x1f4>
 8009bc6:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009bca:	3e01      	subs	r6, #1
 8009bcc:	f104 0420 	add.w	r4, r4, #32
 8009bd0:	f105 0510 	add.w	r5, r5, #16
 8009bd4:	d192      	bne.n	8009afc <arm_cmplx_mag_f32+0x1c>
 8009bd6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009bda:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009bde:	f012 0203 	ands.w	r2, r2, #3
 8009be2:	d052      	beq.n	8009c8a <arm_cmplx_mag_f32+0x1aa>
 8009be4:	ed90 0a00 	vldr	s0, [r0]
 8009be8:	edd0 7a01 	vldr	s15, [r0, #4]
 8009bec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009bf0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009bfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c02:	bfb8      	it	lt
 8009c04:	600b      	strlt	r3, [r1, #0]
 8009c06:	db08      	blt.n	8009c1a <arm_cmplx_mag_f32+0x13a>
 8009c08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c10:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c14:	d479      	bmi.n	8009d0a <arm_cmplx_mag_f32+0x22a>
 8009c16:	ed81 8a00 	vstr	s16, [r1]
 8009c1a:	3a01      	subs	r2, #1
 8009c1c:	d035      	beq.n	8009c8a <arm_cmplx_mag_f32+0x1aa>
 8009c1e:	ed90 0a02 	vldr	s0, [r0, #8]
 8009c22:	edd0 7a03 	vldr	s15, [r0, #12]
 8009c26:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c2e:	2300      	movs	r3, #0
 8009c30:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009c34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	bfb8      	it	lt
 8009c3e:	604b      	strlt	r3, [r1, #4]
 8009c40:	db08      	blt.n	8009c54 <arm_cmplx_mag_f32+0x174>
 8009c42:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c4e:	d453      	bmi.n	8009cf8 <arm_cmplx_mag_f32+0x218>
 8009c50:	ed81 8a01 	vstr	s16, [r1, #4]
 8009c54:	2a01      	cmp	r2, #1
 8009c56:	d018      	beq.n	8009c8a <arm_cmplx_mag_f32+0x1aa>
 8009c58:	ed90 0a04 	vldr	s0, [r0, #16]
 8009c5c:	edd0 7a05 	vldr	s15, [r0, #20]
 8009c60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c68:	2300      	movs	r3, #0
 8009c6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c76:	db19      	blt.n	8009cac <arm_cmplx_mag_f32+0x1cc>
 8009c78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c84:	d44a      	bmi.n	8009d1c <arm_cmplx_mag_f32+0x23c>
 8009c86:	ed81 8a02 	vstr	s16, [r1, #8]
 8009c8a:	b004      	add	sp, #16
 8009c8c:	ecbd 8b02 	vpop	{d8}
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	f845 8c04 	str.w	r8, [r5, #-4]
 8009c98:	e797      	b.n	8009bca <arm_cmplx_mag_f32+0xea>
 8009c9a:	f845 8c08 	str.w	r8, [r5, #-8]
 8009c9e:	e77b      	b.n	8009b98 <arm_cmplx_mag_f32+0xb8>
 8009ca0:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009ca4:	e75e      	b.n	8009b64 <arm_cmplx_mag_f32+0x84>
 8009ca6:	f845 8c10 	str.w	r8, [r5, #-16]
 8009caa:	e741      	b.n	8009b30 <arm_cmplx_mag_f32+0x50>
 8009cac:	608b      	str	r3, [r1, #8]
 8009cae:	e7ec      	b.n	8009c8a <arm_cmplx_mag_f32+0x1aa>
 8009cb0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009cb4:	9001      	str	r0, [sp, #4]
 8009cb6:	f000 fb4f 	bl	800a358 <sqrtf>
 8009cba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009cbe:	9801      	ldr	r0, [sp, #4]
 8009cc0:	e74e      	b.n	8009b60 <arm_cmplx_mag_f32+0x80>
 8009cc2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009cc6:	9001      	str	r0, [sp, #4]
 8009cc8:	f000 fb46 	bl	800a358 <sqrtf>
 8009ccc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009cd0:	9801      	ldr	r0, [sp, #4]
 8009cd2:	e72b      	b.n	8009b2c <arm_cmplx_mag_f32+0x4c>
 8009cd4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009cd8:	9001      	str	r0, [sp, #4]
 8009cda:	f000 fb3d 	bl	800a358 <sqrtf>
 8009cde:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009ce2:	9801      	ldr	r0, [sp, #4]
 8009ce4:	e76f      	b.n	8009bc6 <arm_cmplx_mag_f32+0xe6>
 8009ce6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009cea:	9001      	str	r0, [sp, #4]
 8009cec:	f000 fb34 	bl	800a358 <sqrtf>
 8009cf0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009cf4:	9801      	ldr	r0, [sp, #4]
 8009cf6:	e74d      	b.n	8009b94 <arm_cmplx_mag_f32+0xb4>
 8009cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cfc:	9201      	str	r2, [sp, #4]
 8009cfe:	f000 fb2b 	bl	800a358 <sqrtf>
 8009d02:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009d06:	9903      	ldr	r1, [sp, #12]
 8009d08:	e7a2      	b.n	8009c50 <arm_cmplx_mag_f32+0x170>
 8009d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d0e:	9201      	str	r2, [sp, #4]
 8009d10:	f000 fb22 	bl	800a358 <sqrtf>
 8009d14:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009d18:	9903      	ldr	r1, [sp, #12]
 8009d1a:	e77c      	b.n	8009c16 <arm_cmplx_mag_f32+0x136>
 8009d1c:	9101      	str	r1, [sp, #4]
 8009d1e:	f000 fb1b 	bl	800a358 <sqrtf>
 8009d22:	9901      	ldr	r1, [sp, #4]
 8009d24:	e7af      	b.n	8009c86 <arm_cmplx_mag_f32+0x1a6>
 8009d26:	bf00      	nop

08009d28 <arm_radix8_butterfly_f32>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	ed2d 8b10 	vpush	{d8-d15}
 8009d30:	b095      	sub	sp, #84	@ 0x54
 8009d32:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8009d36:	4603      	mov	r3, r0
 8009d38:	3304      	adds	r3, #4
 8009d3a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800a020 <arm_radix8_butterfly_f32+0x2f8>
 8009d3e:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d40:	468b      	mov	fp, r1
 8009d42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d44:	4689      	mov	r9, r1
 8009d46:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009d4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d4c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8009d4e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8009d52:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009d56:	eb03 0508 	add.w	r5, r3, r8
 8009d5a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8009d5e:	eb05 040e 	add.w	r4, r5, lr
 8009d62:	0137      	lsls	r7, r6, #4
 8009d64:	eba6 030a 	sub.w	r3, r6, sl
 8009d68:	eb04 000e 	add.w	r0, r4, lr
 8009d6c:	44b2      	add	sl, r6
 8009d6e:	1d3a      	adds	r2, r7, #4
 8009d70:	9702      	str	r7, [sp, #8]
 8009d72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009d76:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009d7a:	ebae 0c06 	sub.w	ip, lr, r6
 8009d7e:	9703      	str	r7, [sp, #12]
 8009d80:	eb03 0708 	add.w	r7, r3, r8
 8009d84:	9701      	str	r7, [sp, #4]
 8009d86:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009d8a:	9706      	str	r7, [sp, #24]
 8009d8c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8009d8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8009d92:	f10e 0104 	add.w	r1, lr, #4
 8009d96:	4439      	add	r1, r7
 8009d98:	443a      	add	r2, r7
 8009d9a:	0137      	lsls	r7, r6, #4
 8009d9c:	00f6      	lsls	r6, r6, #3
 8009d9e:	9704      	str	r7, [sp, #16]
 8009da0:	9605      	str	r6, [sp, #20]
 8009da2:	9f01      	ldr	r7, [sp, #4]
 8009da4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009da6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009daa:	f04f 0c00 	mov.w	ip, #0
 8009dae:	edd4 6a00 	vldr	s13, [r4]
 8009db2:	edd7 1a00 	vldr	s3, [r7]
 8009db6:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009dba:	edd5 5a00 	vldr	s11, [r5]
 8009dbe:	ed52 9a01 	vldr	s19, [r2, #-4]
 8009dc2:	ed90 6a00 	vldr	s12, [r0]
 8009dc6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009dca:	ed93 3a00 	vldr	s6, [r3]
 8009dce:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009dd2:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009dd6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009dda:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009dde:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009de2:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009de6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009dea:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009dee:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009df2:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009df6:	ed85 4a00 	vstr	s8, [r5]
 8009dfa:	edd1 6a00 	vldr	s13, [r1]
 8009dfe:	ed94 9a01 	vldr	s18, [r4, #4]
 8009e02:	edd3 2a01 	vldr	s5, [r3, #4]
 8009e06:	edd7 8a01 	vldr	s17, [r7, #4]
 8009e0a:	edd6 0a00 	vldr	s1, [r6]
 8009e0e:	edd5 3a01 	vldr	s7, [r5, #4]
 8009e12:	ed90 8a01 	vldr	s16, [r0, #4]
 8009e16:	ed92 7a00 	vldr	s14, [r2]
 8009e1a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009e1e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009e22:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009e26:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009e2a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009e2e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009e32:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009e36:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009e3a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009e3e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009e42:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009e46:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009e4a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009e4e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009e52:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009e56:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009e5a:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009e5e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009e62:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009e66:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009e6a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009e6e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009e72:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009e76:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009e7a:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009e7e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009e82:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009e86:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009e8a:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009e8e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009e92:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009e96:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009e9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009e9e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009ea2:	ee33 1a45 	vsub.f32	s2, s6, s10
 8009ea6:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009eaa:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009eae:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009eb2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009eb6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009eba:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009ebe:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009ec2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009ec6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009eca:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009ece:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009ed2:	44dc      	add	ip, fp
 8009ed4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009ed8:	45e1      	cmp	r9, ip
 8009eda:	ed86 8a00 	vstr	s16, [r6]
 8009ede:	ed85 2a01 	vstr	s4, [r5, #4]
 8009ee2:	4456      	add	r6, sl
 8009ee4:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009ee8:	4455      	add	r5, sl
 8009eea:	edc0 6a00 	vstr	s13, [r0]
 8009eee:	ed82 1a00 	vstr	s2, [r2]
 8009ef2:	ed80 5a01 	vstr	s10, [r0, #4]
 8009ef6:	4452      	add	r2, sl
 8009ef8:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009efc:	4450      	add	r0, sl
 8009efe:	edc7 2a00 	vstr	s5, [r7]
 8009f02:	edc4 4a00 	vstr	s9, [r4]
 8009f06:	ed83 7a00 	vstr	s14, [r3]
 8009f0a:	edc1 5a00 	vstr	s11, [r1]
 8009f0e:	edc7 3a01 	vstr	s7, [r7, #4]
 8009f12:	4451      	add	r1, sl
 8009f14:	ed84 6a01 	vstr	s12, [r4, #4]
 8009f18:	4457      	add	r7, sl
 8009f1a:	edc3 7a01 	vstr	s15, [r3, #4]
 8009f1e:	4454      	add	r4, sl
 8009f20:	4453      	add	r3, sl
 8009f22:	f63f af44 	bhi.w	8009dae <arm_radix8_butterfly_f32+0x86>
 8009f26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f28:	2b07      	cmp	r3, #7
 8009f2a:	f240 81b7 	bls.w	800a29c <arm_radix8_butterfly_f32+0x574>
 8009f2e:	9b06      	ldr	r3, [sp, #24]
 8009f30:	9903      	ldr	r1, [sp, #12]
 8009f32:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009f34:	9e05      	ldr	r6, [sp, #20]
 8009f36:	9a04      	ldr	r2, [sp, #16]
 8009f38:	f103 0c08 	add.w	ip, r3, #8
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	3108      	adds	r1, #8
 8009f40:	f108 0808 	add.w	r8, r8, #8
 8009f44:	1841      	adds	r1, r0, r1
 8009f46:	3608      	adds	r6, #8
 8009f48:	330c      	adds	r3, #12
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4444      	add	r4, r8
 8009f4e:	18c3      	adds	r3, r0, r3
 8009f50:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f52:	1981      	adds	r1, r0, r6
 8009f54:	f10e 0e08 	add.w	lr, lr, #8
 8009f58:	3208      	adds	r2, #8
 8009f5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f5c:	9107      	str	r1, [sp, #28]
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4601      	mov	r1, r0
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	f100 030c 	add.w	r3, r0, #12
 8009f68:	4474      	add	r4, lr
 8009f6a:	f04f 0801 	mov.w	r8, #1
 8009f6e:	1882      	adds	r2, r0, r2
 8009f70:	4461      	add	r1, ip
 8009f72:	9305      	str	r3, [sp, #20]
 8009f74:	464b      	mov	r3, r9
 8009f76:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f78:	46c1      	mov	r9, r8
 8009f7a:	9208      	str	r2, [sp, #32]
 8009f7c:	46d8      	mov	r8, fp
 8009f7e:	9106      	str	r1, [sp, #24]
 8009f80:	f04f 0e00 	mov.w	lr, #0
 8009f84:	469b      	mov	fp, r3
 8009f86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f8a:	449e      	add	lr, r3
 8009f8c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8009f90:	441a      	add	r2, r3
 8009f92:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f94:	441a      	add	r2, r3
 8009f96:	18d4      	adds	r4, r2, r3
 8009f98:	18e5      	adds	r5, r4, r3
 8009f9a:	18ee      	adds	r6, r5, r3
 8009f9c:	18f7      	adds	r7, r6, r3
 8009f9e:	eb07 0c03 	add.w	ip, r7, r3
 8009fa2:	920d      	str	r2, [sp, #52]	@ 0x34
 8009fa4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8009fa8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8009fac:	910c      	str	r1, [sp, #48]	@ 0x30
 8009fae:	4419      	add	r1, r3
 8009fb0:	9103      	str	r1, [sp, #12]
 8009fb2:	4419      	add	r1, r3
 8009fb4:	18ca      	adds	r2, r1, r3
 8009fb6:	9202      	str	r2, [sp, #8]
 8009fb8:	441a      	add	r2, r3
 8009fba:	18d0      	adds	r0, r2, r3
 8009fbc:	ed92 ea01 	vldr	s28, [r2, #4]
 8009fc0:	9a02      	ldr	r2, [sp, #8]
 8009fc2:	edd4 7a00 	vldr	s15, [r4]
 8009fc6:	edd2 da01 	vldr	s27, [r2, #4]
 8009fca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fcc:	ed91 da01 	vldr	s26, [r1, #4]
 8009fd0:	ed92 ca01 	vldr	s24, [r2, #4]
 8009fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fd6:	9903      	ldr	r1, [sp, #12]
 8009fd8:	edcd 7a03 	vstr	s15, [sp, #12]
 8009fdc:	edd2 7a00 	vldr	s15, [r2]
 8009fe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fe2:	edcd 7a02 	vstr	s15, [sp, #8]
 8009fe6:	edd2 7a00 	vldr	s15, [r2]
 8009fea:	edd0 ea01 	vldr	s29, [r0, #4]
 8009fee:	edd1 ca01 	vldr	s25, [r1, #4]
 8009ff2:	eddc ba00 	vldr	s23, [ip]
 8009ff6:	edd7 aa00 	vldr	s21, [r7]
 8009ffa:	ed96 aa00 	vldr	s20, [r6]
 8009ffe:	edd5 9a00 	vldr	s19, [r5]
 800a002:	edcd 7a01 	vstr	s15, [sp, #4]
 800a006:	4403      	add	r3, r0
 800a008:	ed93 fa01 	vldr	s30, [r3, #4]
 800a00c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a010:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a018:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800a01c:	46cc      	mov	ip, r9
 800a01e:	e001      	b.n	800a024 <arm_radix8_butterfly_f32+0x2fc>
 800a020:	3f3504f3 	.word	0x3f3504f3
 800a024:	ed91 6a00 	vldr	s12, [r1]
 800a028:	ed93 5a00 	vldr	s10, [r3]
 800a02c:	edd0 fa00 	vldr	s31, [r0]
 800a030:	edd4 7a00 	vldr	s15, [r4]
 800a034:	ed95 7a00 	vldr	s14, [r5]
 800a038:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a03c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a040:	ed92 2a00 	vldr	s4, [r2]
 800a044:	ed96 0a00 	vldr	s0, [r6]
 800a048:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a04c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a050:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a054:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a058:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a05c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a060:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a064:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a06c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a070:	edd4 8a01 	vldr	s17, [r4, #4]
 800a074:	ed92 9a01 	vldr	s18, [r2, #4]
 800a078:	edd7 0a00 	vldr	s1, [r7]
 800a07c:	edd1 2a01 	vldr	s5, [r1, #4]
 800a080:	ed95 7a01 	vldr	s14, [r5, #4]
 800a084:	ed93 6a01 	vldr	s12, [r3, #4]
 800a088:	edd0 5a01 	vldr	s11, [r0, #4]
 800a08c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a090:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a094:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a098:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a09c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a0a0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a0a4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a0a8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a0ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a0b0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a0b4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a0b8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a0bc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a0c0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a0c4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a0c8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a0cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a0d0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a0d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a0d8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a0dc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a0e0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a0e4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a0e8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a0ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a0f0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a0f4:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a0f8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a0fc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a100:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a104:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a108:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a10c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a110:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a114:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a118:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a11c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a120:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a124:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a128:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a12c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a130:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a134:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a138:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a13c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a140:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a144:	eddd 1a02 	vldr	s3, [sp, #8]
 800a148:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a14c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a150:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a154:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a158:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a15c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a160:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a164:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a168:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a16c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a170:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a174:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a178:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a17c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a180:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a184:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a188:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a18c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a190:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a194:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a198:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a19c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a1a0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a1a4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a1a8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a1ac:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a1b0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a1b4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a1b8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a1bc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a1c0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a1c4:	eddd 5a03 	vldr	s11, [sp, #12]
 800a1c8:	edc6 fa00 	vstr	s31, [r6]
 800a1cc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a1d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a1d4:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a1d8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a1dc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a1e0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a1e4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a1e8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a1ec:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a1f0:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a1f4:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a1f8:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a1fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a200:	44c4      	add	ip, r8
 800a202:	45e3      	cmp	fp, ip
 800a204:	edc3 3a00 	vstr	s7, [r3]
 800a208:	edc3 6a01 	vstr	s13, [r3, #4]
 800a20c:	4456      	add	r6, sl
 800a20e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a212:	edc7 0a00 	vstr	s1, [r7]
 800a216:	4453      	add	r3, sl
 800a218:	ed80 2a00 	vstr	s4, [r0]
 800a21c:	edc0 2a01 	vstr	s5, [r0, #4]
 800a220:	4457      	add	r7, sl
 800a222:	edc2 1a00 	vstr	s3, [r2]
 800a226:	ed82 7a01 	vstr	s14, [r2, #4]
 800a22a:	4450      	add	r0, sl
 800a22c:	ed85 8a00 	vstr	s16, [r5]
 800a230:	ed85 0a01 	vstr	s0, [r5, #4]
 800a234:	4452      	add	r2, sl
 800a236:	edc1 4a00 	vstr	s9, [r1]
 800a23a:	4455      	add	r5, sl
 800a23c:	ed81 3a01 	vstr	s6, [r1, #4]
 800a240:	edc4 8a00 	vstr	s17, [r4]
 800a244:	ed84 6a01 	vstr	s12, [r4, #4]
 800a248:	4451      	add	r1, sl
 800a24a:	4454      	add	r4, sl
 800a24c:	f63f aeea 	bhi.w	800a024 <arm_radix8_butterfly_f32+0x2fc>
 800a250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a252:	3308      	adds	r3, #8
 800a254:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a258:	3308      	adds	r3, #8
 800a25a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25e:	3308      	adds	r3, #8
 800a260:	9309      	str	r3, [sp, #36]	@ 0x24
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	3308      	adds	r3, #8
 800a266:	9308      	str	r3, [sp, #32]
 800a268:	9b07      	ldr	r3, [sp, #28]
 800a26a:	3308      	adds	r3, #8
 800a26c:	9307      	str	r3, [sp, #28]
 800a26e:	9b06      	ldr	r3, [sp, #24]
 800a270:	3308      	adds	r3, #8
 800a272:	9306      	str	r3, [sp, #24]
 800a274:	9b05      	ldr	r3, [sp, #20]
 800a276:	3308      	adds	r3, #8
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	3308      	adds	r3, #8
 800a27e:	9304      	str	r3, [sp, #16]
 800a280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a282:	f109 0901 	add.w	r9, r9, #1
 800a286:	454b      	cmp	r3, r9
 800a288:	f47f ae7d 	bne.w	8009f86 <arm_radix8_butterfly_f32+0x25e>
 800a28c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	b29b      	uxth	r3, r3
 800a292:	46d9      	mov	r9, fp
 800a294:	9310      	str	r3, [sp, #64]	@ 0x40
 800a296:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800a29a:	e554      	b.n	8009d46 <arm_radix8_butterfly_f32+0x1e>
 800a29c:	b015      	add	sp, #84	@ 0x54
 800a29e:	ecbd 8b10 	vpop	{d8-d15}
 800a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	bf00      	nop

0800a2a8 <powf>:
 800a2a8:	b508      	push	{r3, lr}
 800a2aa:	ed2d 8b04 	vpush	{d8-d9}
 800a2ae:	eeb0 8a60 	vmov.f32	s16, s1
 800a2b2:	eeb0 9a40 	vmov.f32	s18, s0
 800a2b6:	f000 f8c1 	bl	800a43c <__ieee754_powf>
 800a2ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800a2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c2:	eef0 8a40 	vmov.f32	s17, s0
 800a2c6:	d63e      	bvs.n	800a346 <powf+0x9e>
 800a2c8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d0:	d112      	bne.n	800a2f8 <powf+0x50>
 800a2d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2da:	d039      	beq.n	800a350 <powf+0xa8>
 800a2dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a2e0:	f000 f858 	bl	800a394 <finitef>
 800a2e4:	b378      	cbz	r0, 800a346 <powf+0x9e>
 800a2e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ee:	d52a      	bpl.n	800a346 <powf+0x9e>
 800a2f0:	f001 f9ee 	bl	800b6d0 <__errno>
 800a2f4:	2322      	movs	r3, #34	@ 0x22
 800a2f6:	e014      	b.n	800a322 <powf+0x7a>
 800a2f8:	f000 f84c 	bl	800a394 <finitef>
 800a2fc:	b998      	cbnz	r0, 800a326 <powf+0x7e>
 800a2fe:	eeb0 0a49 	vmov.f32	s0, s18
 800a302:	f000 f847 	bl	800a394 <finitef>
 800a306:	b170      	cbz	r0, 800a326 <powf+0x7e>
 800a308:	eeb0 0a48 	vmov.f32	s0, s16
 800a30c:	f000 f842 	bl	800a394 <finitef>
 800a310:	b148      	cbz	r0, 800a326 <powf+0x7e>
 800a312:	eef4 8a68 	vcmp.f32	s17, s17
 800a316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31a:	d7e9      	bvc.n	800a2f0 <powf+0x48>
 800a31c:	f001 f9d8 	bl	800b6d0 <__errno>
 800a320:	2321      	movs	r3, #33	@ 0x21
 800a322:	6003      	str	r3, [r0, #0]
 800a324:	e00f      	b.n	800a346 <powf+0x9e>
 800a326:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a32e:	d10a      	bne.n	800a346 <powf+0x9e>
 800a330:	eeb0 0a49 	vmov.f32	s0, s18
 800a334:	f000 f82e 	bl	800a394 <finitef>
 800a338:	b128      	cbz	r0, 800a346 <powf+0x9e>
 800a33a:	eeb0 0a48 	vmov.f32	s0, s16
 800a33e:	f000 f829 	bl	800a394 <finitef>
 800a342:	2800      	cmp	r0, #0
 800a344:	d1d4      	bne.n	800a2f0 <powf+0x48>
 800a346:	eeb0 0a68 	vmov.f32	s0, s17
 800a34a:	ecbd 8b04 	vpop	{d8-d9}
 800a34e:	bd08      	pop	{r3, pc}
 800a350:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a354:	e7f7      	b.n	800a346 <powf+0x9e>
	...

0800a358 <sqrtf>:
 800a358:	b508      	push	{r3, lr}
 800a35a:	ed2d 8b02 	vpush	{d8}
 800a35e:	eeb0 8a40 	vmov.f32	s16, s0
 800a362:	f000 f821 	bl	800a3a8 <__ieee754_sqrtf>
 800a366:	eeb4 8a48 	vcmp.f32	s16, s16
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	d60c      	bvs.n	800a38a <sqrtf+0x32>
 800a370:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a390 <sqrtf+0x38>
 800a374:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37c:	d505      	bpl.n	800a38a <sqrtf+0x32>
 800a37e:	f001 f9a7 	bl	800b6d0 <__errno>
 800a382:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a386:	2321      	movs	r3, #33	@ 0x21
 800a388:	6003      	str	r3, [r0, #0]
 800a38a:	ecbd 8b02 	vpop	{d8}
 800a38e:	bd08      	pop	{r3, pc}
 800a390:	00000000 	.word	0x00000000

0800a394 <finitef>:
 800a394:	ee10 3a10 	vmov	r3, s0
 800a398:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a39c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a3a0:	bfac      	ite	ge
 800a3a2:	2000      	movge	r0, #0
 800a3a4:	2001      	movlt	r0, #1
 800a3a6:	4770      	bx	lr

0800a3a8 <__ieee754_sqrtf>:
 800a3a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <round>:
 800a3b0:	ec51 0b10 	vmov	r0, r1, d0
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a3ba:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a3be:	2a13      	cmp	r2, #19
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	dc1b      	bgt.n	800a3fe <round+0x4e>
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	da0b      	bge.n	800a3e2 <round+0x32>
 800a3ca:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a3ce:	3201      	adds	r2, #1
 800a3d0:	bf04      	itt	eq
 800a3d2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a3d6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4610      	mov	r0, r2
 800a3e0:	e015      	b.n	800a40e <round+0x5e>
 800a3e2:	4c15      	ldr	r4, [pc, #84]	@ (800a438 <round+0x88>)
 800a3e4:	4114      	asrs	r4, r2
 800a3e6:	ea04 0601 	and.w	r6, r4, r1
 800a3ea:	4306      	orrs	r6, r0
 800a3ec:	d00f      	beq.n	800a40e <round+0x5e>
 800a3ee:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a3f2:	fa41 f202 	asr.w	r2, r1, r2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	ea23 0304 	bic.w	r3, r3, r4
 800a3fc:	e7ed      	b.n	800a3da <round+0x2a>
 800a3fe:	2a33      	cmp	r2, #51	@ 0x33
 800a400:	dd08      	ble.n	800a414 <round+0x64>
 800a402:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a406:	d102      	bne.n	800a40e <round+0x5e>
 800a408:	4602      	mov	r2, r0
 800a40a:	f7f5 ff3f 	bl	800028c <__adddf3>
 800a40e:	ec41 0b10 	vmov	d0, r0, r1
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a418:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a41c:	40f4      	lsrs	r4, r6
 800a41e:	4204      	tst	r4, r0
 800a420:	d0f5      	beq.n	800a40e <round+0x5e>
 800a422:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a426:	2201      	movs	r2, #1
 800a428:	408a      	lsls	r2, r1
 800a42a:	1952      	adds	r2, r2, r5
 800a42c:	bf28      	it	cs
 800a42e:	3301      	addcs	r3, #1
 800a430:	ea22 0204 	bic.w	r2, r2, r4
 800a434:	e7d2      	b.n	800a3dc <round+0x2c>
 800a436:	bf00      	nop
 800a438:	000fffff 	.word	0x000fffff

0800a43c <__ieee754_powf>:
 800a43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a440:	ee10 4a90 	vmov	r4, s1
 800a444:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800a448:	ed2d 8b02 	vpush	{d8}
 800a44c:	ee10 6a10 	vmov	r6, s0
 800a450:	eeb0 8a40 	vmov.f32	s16, s0
 800a454:	eef0 8a60 	vmov.f32	s17, s1
 800a458:	d10c      	bne.n	800a474 <__ieee754_powf+0x38>
 800a45a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800a45e:	0076      	lsls	r6, r6, #1
 800a460:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800a464:	f240 829c 	bls.w	800a9a0 <__ieee754_powf+0x564>
 800a468:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a46c:	ecbd 8b02 	vpop	{d8}
 800a470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a474:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800a478:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a47c:	d802      	bhi.n	800a484 <__ieee754_powf+0x48>
 800a47e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a482:	d908      	bls.n	800a496 <__ieee754_powf+0x5a>
 800a484:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800a488:	d1ee      	bne.n	800a468 <__ieee754_powf+0x2c>
 800a48a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a48e:	0064      	lsls	r4, r4, #1
 800a490:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a494:	e7e6      	b.n	800a464 <__ieee754_powf+0x28>
 800a496:	2e00      	cmp	r6, #0
 800a498:	da1e      	bge.n	800a4d8 <__ieee754_powf+0x9c>
 800a49a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800a49e:	d22b      	bcs.n	800a4f8 <__ieee754_powf+0xbc>
 800a4a0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a4a4:	d332      	bcc.n	800a50c <__ieee754_powf+0xd0>
 800a4a6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800a4aa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a4ae:	fa49 f503 	asr.w	r5, r9, r3
 800a4b2:	fa05 f303 	lsl.w	r3, r5, r3
 800a4b6:	454b      	cmp	r3, r9
 800a4b8:	d126      	bne.n	800a508 <__ieee754_powf+0xcc>
 800a4ba:	f005 0501 	and.w	r5, r5, #1
 800a4be:	f1c5 0502 	rsb	r5, r5, #2
 800a4c2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a4c6:	d122      	bne.n	800a50e <__ieee754_powf+0xd2>
 800a4c8:	2c00      	cmp	r4, #0
 800a4ca:	f280 826f 	bge.w	800a9ac <__ieee754_powf+0x570>
 800a4ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a4d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a4d6:	e7c9      	b.n	800a46c <__ieee754_powf+0x30>
 800a4d8:	2500      	movs	r5, #0
 800a4da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a4de:	d1f0      	bne.n	800a4c2 <__ieee754_powf+0x86>
 800a4e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a4e4:	f000 825c 	beq.w	800a9a0 <__ieee754_powf+0x564>
 800a4e8:	d908      	bls.n	800a4fc <__ieee754_powf+0xc0>
 800a4ea:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800a84c <__ieee754_powf+0x410>
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	bfa8      	it	ge
 800a4f2:	eeb0 0a68 	vmovge.f32	s0, s17
 800a4f6:	e7b9      	b.n	800a46c <__ieee754_powf+0x30>
 800a4f8:	2502      	movs	r5, #2
 800a4fa:	e7ee      	b.n	800a4da <__ieee754_powf+0x9e>
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	f280 8252 	bge.w	800a9a6 <__ieee754_powf+0x56a>
 800a502:	eeb1 0a68 	vneg.f32	s0, s17
 800a506:	e7b1      	b.n	800a46c <__ieee754_powf+0x30>
 800a508:	2500      	movs	r5, #0
 800a50a:	e7da      	b.n	800a4c2 <__ieee754_powf+0x86>
 800a50c:	2500      	movs	r5, #0
 800a50e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a512:	d102      	bne.n	800a51a <__ieee754_powf+0xde>
 800a514:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a518:	e7a8      	b.n	800a46c <__ieee754_powf+0x30>
 800a51a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a51e:	d109      	bne.n	800a534 <__ieee754_powf+0xf8>
 800a520:	2e00      	cmp	r6, #0
 800a522:	db07      	blt.n	800a534 <__ieee754_powf+0xf8>
 800a524:	eeb0 0a48 	vmov.f32	s0, s16
 800a528:	ecbd 8b02 	vpop	{d8}
 800a52c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a530:	f7ff bf3a 	b.w	800a3a8 <__ieee754_sqrtf>
 800a534:	eeb0 0a48 	vmov.f32	s0, s16
 800a538:	f000 fa50 	bl	800a9dc <fabsf>
 800a53c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a540:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a544:	4647      	mov	r7, r8
 800a546:	d002      	beq.n	800a54e <__ieee754_powf+0x112>
 800a548:	f1b8 0f00 	cmp.w	r8, #0
 800a54c:	d117      	bne.n	800a57e <__ieee754_powf+0x142>
 800a54e:	2c00      	cmp	r4, #0
 800a550:	bfbc      	itt	lt
 800a552:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a556:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	da86      	bge.n	800a46c <__ieee754_powf+0x30>
 800a55e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a562:	ea58 0805 	orrs.w	r8, r8, r5
 800a566:	d104      	bne.n	800a572 <__ieee754_powf+0x136>
 800a568:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a56c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a570:	e77c      	b.n	800a46c <__ieee754_powf+0x30>
 800a572:	2d01      	cmp	r5, #1
 800a574:	f47f af7a 	bne.w	800a46c <__ieee754_powf+0x30>
 800a578:	eeb1 0a40 	vneg.f32	s0, s0
 800a57c:	e776      	b.n	800a46c <__ieee754_powf+0x30>
 800a57e:	0ff0      	lsrs	r0, r6, #31
 800a580:	3801      	subs	r0, #1
 800a582:	ea55 0300 	orrs.w	r3, r5, r0
 800a586:	d104      	bne.n	800a592 <__ieee754_powf+0x156>
 800a588:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a58c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a590:	e76c      	b.n	800a46c <__ieee754_powf+0x30>
 800a592:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800a596:	d973      	bls.n	800a680 <__ieee754_powf+0x244>
 800a598:	4bad      	ldr	r3, [pc, #692]	@ (800a850 <__ieee754_powf+0x414>)
 800a59a:	4598      	cmp	r8, r3
 800a59c:	d808      	bhi.n	800a5b0 <__ieee754_powf+0x174>
 800a59e:	2c00      	cmp	r4, #0
 800a5a0:	da0b      	bge.n	800a5ba <__ieee754_powf+0x17e>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	ecbd 8b02 	vpop	{d8}
 800a5a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ac:	f000 baa4 	b.w	800aaf8 <__math_oflowf>
 800a5b0:	4ba8      	ldr	r3, [pc, #672]	@ (800a854 <__ieee754_powf+0x418>)
 800a5b2:	4598      	cmp	r8, r3
 800a5b4:	d908      	bls.n	800a5c8 <__ieee754_powf+0x18c>
 800a5b6:	2c00      	cmp	r4, #0
 800a5b8:	dcf3      	bgt.n	800a5a2 <__ieee754_powf+0x166>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	ecbd 8b02 	vpop	{d8}
 800a5c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c4:	f000 ba92 	b.w	800aaec <__math_uflowf>
 800a5c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a5cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5d0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800a858 <__ieee754_powf+0x41c>
 800a5d4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a5d8:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a5dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a5e0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a5e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a5e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5ec:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800a85c <__ieee754_powf+0x420>
 800a5f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a5f4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800a860 <__ieee754_powf+0x424>
 800a5f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a5fc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800a864 <__ieee754_powf+0x428>
 800a600:	eef0 6a67 	vmov.f32	s13, s15
 800a604:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a608:	ee16 3a90 	vmov	r3, s13
 800a60c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a610:	f023 030f 	bic.w	r3, r3, #15
 800a614:	ee06 3a90 	vmov	s13, r3
 800a618:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a61c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a620:	3d01      	subs	r5, #1
 800a622:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800a626:	4305      	orrs	r5, r0
 800a628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a62c:	f024 040f 	bic.w	r4, r4, #15
 800a630:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800a634:	bf18      	it	ne
 800a636:	eeb0 8a47 	vmovne.f32	s16, s14
 800a63a:	ee07 4a10 	vmov	s14, r4
 800a63e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a642:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a64e:	ee07 4a10 	vmov	s14, r4
 800a652:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a656:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a65a:	ee17 1a10 	vmov	r1, s14
 800a65e:	2900      	cmp	r1, #0
 800a660:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a664:	f340 80dd 	ble.w	800a822 <__ieee754_powf+0x3e6>
 800a668:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a66c:	f240 80ca 	bls.w	800a804 <__ieee754_powf+0x3c8>
 800a670:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a678:	bf4c      	ite	mi
 800a67a:	2001      	movmi	r0, #1
 800a67c:	2000      	movpl	r0, #0
 800a67e:	e791      	b.n	800a5a4 <__ieee754_powf+0x168>
 800a680:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a684:	bf01      	itttt	eq
 800a686:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800a868 <__ieee754_powf+0x42c>
 800a68a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a68e:	f06f 0317 	mvneq.w	r3, #23
 800a692:	ee17 7a90 	vmoveq	r7, s15
 800a696:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800a69a:	bf18      	it	ne
 800a69c:	2300      	movne	r3, #0
 800a69e:	3a7f      	subs	r2, #127	@ 0x7f
 800a6a0:	441a      	add	r2, r3
 800a6a2:	4b72      	ldr	r3, [pc, #456]	@ (800a86c <__ieee754_powf+0x430>)
 800a6a4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800a6a8:	429f      	cmp	r7, r3
 800a6aa:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800a6ae:	dd06      	ble.n	800a6be <__ieee754_powf+0x282>
 800a6b0:	4b6f      	ldr	r3, [pc, #444]	@ (800a870 <__ieee754_powf+0x434>)
 800a6b2:	429f      	cmp	r7, r3
 800a6b4:	f340 80a4 	ble.w	800a800 <__ieee754_powf+0x3c4>
 800a6b8:	3201      	adds	r2, #1
 800a6ba:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800a6be:	2600      	movs	r6, #0
 800a6c0:	4b6c      	ldr	r3, [pc, #432]	@ (800a874 <__ieee754_powf+0x438>)
 800a6c2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a6c6:	ee07 1a10 	vmov	s14, r1
 800a6ca:	edd3 5a00 	vldr	s11, [r3]
 800a6ce:	4b6a      	ldr	r3, [pc, #424]	@ (800a878 <__ieee754_powf+0x43c>)
 800a6d0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6d8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a6dc:	1049      	asrs	r1, r1, #1
 800a6de:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800a6e2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800a6e6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800a6ea:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a6ee:	ee07 1a90 	vmov	s15, r1
 800a6f2:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a6f6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a6fa:	ee15 7a10 	vmov	r7, s10
 800a6fe:	401f      	ands	r7, r3
 800a700:	ee06 7a90 	vmov	s13, r7
 800a704:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a708:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a70c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a710:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a714:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a87c <__ieee754_powf+0x440>
 800a718:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a880 <__ieee754_powf+0x444>
 800a71c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a720:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800a884 <__ieee754_powf+0x448>
 800a724:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a728:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800a858 <__ieee754_powf+0x41c>
 800a72c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a730:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a888 <__ieee754_powf+0x44c>
 800a734:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a738:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800a88c <__ieee754_powf+0x450>
 800a73c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a740:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a744:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a748:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a74c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a750:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800a754:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a758:	eef0 5a67 	vmov.f32	s11, s15
 800a75c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a760:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a764:	ee15 1a90 	vmov	r1, s11
 800a768:	4019      	ands	r1, r3
 800a76a:	ee05 1a90 	vmov	s11, r1
 800a76e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a772:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a77e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a782:	eeb0 6a67 	vmov.f32	s12, s15
 800a786:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a78a:	ee16 1a10 	vmov	r1, s12
 800a78e:	4019      	ands	r1, r3
 800a790:	ee06 1a10 	vmov	s12, r1
 800a794:	eeb0 7a46 	vmov.f32	s14, s12
 800a798:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a79c:	493c      	ldr	r1, [pc, #240]	@ (800a890 <__ieee754_powf+0x454>)
 800a79e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800a7a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a894 <__ieee754_powf+0x458>
 800a7aa:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800a898 <__ieee754_powf+0x45c>
 800a7ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7b2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a89c <__ieee754_powf+0x460>
 800a7b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a7ba:	ed91 7a00 	vldr	s14, [r1]
 800a7be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7c2:	ee07 2a10 	vmov	s14, r2
 800a7c6:	eef0 6a67 	vmov.f32	s13, s15
 800a7ca:	4a35      	ldr	r2, [pc, #212]	@ (800a8a0 <__ieee754_powf+0x464>)
 800a7cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a7d0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800a7d4:	ed92 5a00 	vldr	s10, [r2]
 800a7d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a7dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a7e0:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a7e4:	ee16 2a90 	vmov	r2, s13
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	ee06 3a90 	vmov	s13, r3
 800a7ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a7f2:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a7f6:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a7fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7fe:	e70f      	b.n	800a620 <__ieee754_powf+0x1e4>
 800a800:	2601      	movs	r6, #1
 800a802:	e75d      	b.n	800a6c0 <__ieee754_powf+0x284>
 800a804:	d152      	bne.n	800a8ac <__ieee754_powf+0x470>
 800a806:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a8a4 <__ieee754_powf+0x468>
 800a80a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a80e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a812:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81a:	f73f af29 	bgt.w	800a670 <__ieee754_powf+0x234>
 800a81e:	2386      	movs	r3, #134	@ 0x86
 800a820:	e048      	b.n	800a8b4 <__ieee754_powf+0x478>
 800a822:	4a21      	ldr	r2, [pc, #132]	@ (800a8a8 <__ieee754_powf+0x46c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d907      	bls.n	800a838 <__ieee754_powf+0x3fc>
 800a828:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a830:	bf4c      	ite	mi
 800a832:	2001      	movmi	r0, #1
 800a834:	2000      	movpl	r0, #0
 800a836:	e6c1      	b.n	800a5bc <__ieee754_powf+0x180>
 800a838:	d138      	bne.n	800a8ac <__ieee754_powf+0x470>
 800a83a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a83e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a846:	dbea      	blt.n	800a81e <__ieee754_powf+0x3e2>
 800a848:	e7ee      	b.n	800a828 <__ieee754_powf+0x3ec>
 800a84a:	bf00      	nop
 800a84c:	00000000 	.word	0x00000000
 800a850:	3f7ffff3 	.word	0x3f7ffff3
 800a854:	3f800007 	.word	0x3f800007
 800a858:	3eaaaaab 	.word	0x3eaaaaab
 800a85c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a860:	36eca570 	.word	0x36eca570
 800a864:	3fb8aa00 	.word	0x3fb8aa00
 800a868:	4b800000 	.word	0x4b800000
 800a86c:	001cc471 	.word	0x001cc471
 800a870:	005db3d6 	.word	0x005db3d6
 800a874:	0800eaec 	.word	0x0800eaec
 800a878:	fffff000 	.word	0xfffff000
 800a87c:	3e6c3255 	.word	0x3e6c3255
 800a880:	3e53f142 	.word	0x3e53f142
 800a884:	3e8ba305 	.word	0x3e8ba305
 800a888:	3edb6db7 	.word	0x3edb6db7
 800a88c:	3f19999a 	.word	0x3f19999a
 800a890:	0800eadc 	.word	0x0800eadc
 800a894:	3f76384f 	.word	0x3f76384f
 800a898:	3f763800 	.word	0x3f763800
 800a89c:	369dc3a0 	.word	0x369dc3a0
 800a8a0:	0800eae4 	.word	0x0800eae4
 800a8a4:	3338aa3c 	.word	0x3338aa3c
 800a8a8:	43160000 	.word	0x43160000
 800a8ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a8b0:	d971      	bls.n	800a996 <__ieee754_powf+0x55a>
 800a8b2:	15db      	asrs	r3, r3, #23
 800a8b4:	3b7e      	subs	r3, #126	@ 0x7e
 800a8b6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a8ba:	4118      	asrs	r0, r3
 800a8bc:	4408      	add	r0, r1
 800a8be:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a8c2:	4a3c      	ldr	r2, [pc, #240]	@ (800a9b4 <__ieee754_powf+0x578>)
 800a8c4:	3b7f      	subs	r3, #127	@ 0x7f
 800a8c6:	411a      	asrs	r2, r3
 800a8c8:	4002      	ands	r2, r0
 800a8ca:	ee07 2a10 	vmov	s14, r2
 800a8ce:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a8d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800a8d6:	f1c3 0317 	rsb	r3, r3, #23
 800a8da:	4118      	asrs	r0, r3
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8e2:	bfb8      	it	lt
 800a8e4:	4240      	neglt	r0, r0
 800a8e6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a8ea:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a9b8 <__ieee754_powf+0x57c>
 800a8ee:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800a9bc <__ieee754_powf+0x580>
 800a8f2:	ee17 3a10 	vmov	r3, s14
 800a8f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a8fa:	f023 030f 	bic.w	r3, r3, #15
 800a8fe:	ee07 3a10 	vmov	s14, r3
 800a902:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a906:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a90a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a90e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800a9c0 <__ieee754_powf+0x584>
 800a912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a916:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a91a:	eef0 6a67 	vmov.f32	s13, s15
 800a91e:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a922:	eef0 5a66 	vmov.f32	s11, s13
 800a926:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a92a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a92e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a932:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800a9c4 <__ieee754_powf+0x588>
 800a936:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800a9c8 <__ieee754_powf+0x58c>
 800a93a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a93e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800a9cc <__ieee754_powf+0x590>
 800a942:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a946:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a9d0 <__ieee754_powf+0x594>
 800a94a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a94e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800a9d4 <__ieee754_powf+0x598>
 800a952:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a956:	eeb0 6a66 	vmov.f32	s12, s13
 800a95a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a95e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a962:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a966:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a96a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a96e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a972:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a976:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a97a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a97e:	ee10 3a10 	vmov	r3, s0
 800a982:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a98a:	da06      	bge.n	800a99a <__ieee754_powf+0x55e>
 800a98c:	f000 f82e 	bl	800a9ec <scalbnf>
 800a990:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a994:	e56a      	b.n	800a46c <__ieee754_powf+0x30>
 800a996:	2000      	movs	r0, #0
 800a998:	e7a5      	b.n	800a8e6 <__ieee754_powf+0x4aa>
 800a99a:	ee00 3a10 	vmov	s0, r3
 800a99e:	e7f7      	b.n	800a990 <__ieee754_powf+0x554>
 800a9a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a9a4:	e562      	b.n	800a46c <__ieee754_powf+0x30>
 800a9a6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a9d8 <__ieee754_powf+0x59c>
 800a9aa:	e55f      	b.n	800a46c <__ieee754_powf+0x30>
 800a9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b0:	e55c      	b.n	800a46c <__ieee754_powf+0x30>
 800a9b2:	bf00      	nop
 800a9b4:	ff800000 	.word	0xff800000
 800a9b8:	3f317218 	.word	0x3f317218
 800a9bc:	3f317200 	.word	0x3f317200
 800a9c0:	35bfbe8c 	.word	0x35bfbe8c
 800a9c4:	b5ddea0e 	.word	0xb5ddea0e
 800a9c8:	3331bb4c 	.word	0x3331bb4c
 800a9cc:	388ab355 	.word	0x388ab355
 800a9d0:	bb360b61 	.word	0xbb360b61
 800a9d4:	3e2aaaab 	.word	0x3e2aaaab
 800a9d8:	00000000 	.word	0x00000000

0800a9dc <fabsf>:
 800a9dc:	ee10 3a10 	vmov	r3, s0
 800a9e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9e4:	ee00 3a10 	vmov	s0, r3
 800a9e8:	4770      	bx	lr
	...

0800a9ec <scalbnf>:
 800a9ec:	ee10 3a10 	vmov	r3, s0
 800a9f0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a9f4:	d02b      	beq.n	800aa4e <scalbnf+0x62>
 800a9f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a9fa:	d302      	bcc.n	800aa02 <scalbnf+0x16>
 800a9fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aa00:	4770      	bx	lr
 800aa02:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800aa06:	d123      	bne.n	800aa50 <scalbnf+0x64>
 800aa08:	4b24      	ldr	r3, [pc, #144]	@ (800aa9c <scalbnf+0xb0>)
 800aa0a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800aaa0 <scalbnf+0xb4>
 800aa0e:	4298      	cmp	r0, r3
 800aa10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aa14:	db17      	blt.n	800aa46 <scalbnf+0x5a>
 800aa16:	ee10 3a10 	vmov	r3, s0
 800aa1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aa1e:	3a19      	subs	r2, #25
 800aa20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800aa24:	4288      	cmp	r0, r1
 800aa26:	dd15      	ble.n	800aa54 <scalbnf+0x68>
 800aa28:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800aaa4 <scalbnf+0xb8>
 800aa2c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800aaa8 <scalbnf+0xbc>
 800aa30:	ee10 3a10 	vmov	r3, s0
 800aa34:	eeb0 7a67 	vmov.f32	s14, s15
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfb8      	it	lt
 800aa3c:	eef0 7a66 	vmovlt.f32	s15, s13
 800aa40:	ee27 0a87 	vmul.f32	s0, s15, s14
 800aa44:	4770      	bx	lr
 800aa46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aaac <scalbnf+0xc0>
 800aa4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa4e:	4770      	bx	lr
 800aa50:	0dd2      	lsrs	r2, r2, #23
 800aa52:	e7e5      	b.n	800aa20 <scalbnf+0x34>
 800aa54:	4410      	add	r0, r2
 800aa56:	28fe      	cmp	r0, #254	@ 0xfe
 800aa58:	dce6      	bgt.n	800aa28 <scalbnf+0x3c>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	dd06      	ble.n	800aa6c <scalbnf+0x80>
 800aa5e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aa66:	ee00 3a10 	vmov	s0, r3
 800aa6a:	4770      	bx	lr
 800aa6c:	f110 0f16 	cmn.w	r0, #22
 800aa70:	da09      	bge.n	800aa86 <scalbnf+0x9a>
 800aa72:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800aaac <scalbnf+0xc0>
 800aa76:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800aab0 <scalbnf+0xc4>
 800aa7a:	ee10 3a10 	vmov	r3, s0
 800aa7e:	eeb0 7a67 	vmov.f32	s14, s15
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	e7d9      	b.n	800aa3a <scalbnf+0x4e>
 800aa86:	3019      	adds	r0, #25
 800aa88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aa90:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800aab4 <scalbnf+0xc8>
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	e7d7      	b.n	800aa4a <scalbnf+0x5e>
 800aa9a:	bf00      	nop
 800aa9c:	ffff3cb0 	.word	0xffff3cb0
 800aaa0:	4c000000 	.word	0x4c000000
 800aaa4:	7149f2ca 	.word	0x7149f2ca
 800aaa8:	f149f2ca 	.word	0xf149f2ca
 800aaac:	0da24260 	.word	0x0da24260
 800aab0:	8da24260 	.word	0x8da24260
 800aab4:	33000000 	.word	0x33000000

0800aab8 <with_errnof>:
 800aab8:	b510      	push	{r4, lr}
 800aaba:	ed2d 8b02 	vpush	{d8}
 800aabe:	eeb0 8a40 	vmov.f32	s16, s0
 800aac2:	4604      	mov	r4, r0
 800aac4:	f000 fe04 	bl	800b6d0 <__errno>
 800aac8:	eeb0 0a48 	vmov.f32	s0, s16
 800aacc:	ecbd 8b02 	vpop	{d8}
 800aad0:	6004      	str	r4, [r0, #0]
 800aad2:	bd10      	pop	{r4, pc}

0800aad4 <xflowf>:
 800aad4:	b130      	cbz	r0, 800aae4 <xflowf+0x10>
 800aad6:	eef1 7a40 	vneg.f32	s15, s0
 800aada:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aade:	2022      	movs	r0, #34	@ 0x22
 800aae0:	f7ff bfea 	b.w	800aab8 <with_errnof>
 800aae4:	eef0 7a40 	vmov.f32	s15, s0
 800aae8:	e7f7      	b.n	800aada <xflowf+0x6>
	...

0800aaec <__math_uflowf>:
 800aaec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aaf4 <__math_uflowf+0x8>
 800aaf0:	f7ff bff0 	b.w	800aad4 <xflowf>
 800aaf4:	10000000 	.word	0x10000000

0800aaf8 <__math_oflowf>:
 800aaf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab00 <__math_oflowf+0x8>
 800aafc:	f7ff bfea 	b.w	800aad4 <xflowf>
 800ab00:	70000000 	.word	0x70000000

0800ab04 <realloc>:
 800ab04:	4b02      	ldr	r3, [pc, #8]	@ (800ab10 <realloc+0xc>)
 800ab06:	460a      	mov	r2, r1
 800ab08:	4601      	mov	r1, r0
 800ab0a:	6818      	ldr	r0, [r3, #0]
 800ab0c:	f000 b802 	b.w	800ab14 <_realloc_r>
 800ab10:	20000018 	.word	0x20000018

0800ab14 <_realloc_r>:
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4615      	mov	r5, r2
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	b921      	cbnz	r1, 800ab2a <_realloc_r+0x16>
 800ab20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	4611      	mov	r1, r2
 800ab26:	f001 bccf 	b.w	800c4c8 <_malloc_r>
 800ab2a:	b92a      	cbnz	r2, 800ab38 <_realloc_r+0x24>
 800ab2c:	f001 fc58 	bl	800c3e0 <_free_r>
 800ab30:	2400      	movs	r4, #0
 800ab32:	4620      	mov	r0, r4
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	f002 f8d4 	bl	800cce4 <_malloc_usable_size_r>
 800ab3c:	4285      	cmp	r5, r0
 800ab3e:	4606      	mov	r6, r0
 800ab40:	d802      	bhi.n	800ab48 <_realloc_r+0x34>
 800ab42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab46:	d8f4      	bhi.n	800ab32 <_realloc_r+0x1e>
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	f001 fcbc 	bl	800c4c8 <_malloc_r>
 800ab50:	4607      	mov	r7, r0
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0ec      	beq.n	800ab30 <_realloc_r+0x1c>
 800ab56:	42b5      	cmp	r5, r6
 800ab58:	462a      	mov	r2, r5
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	bf28      	it	cs
 800ab5e:	4632      	movcs	r2, r6
 800ab60:	f000 fde3 	bl	800b72a <memcpy>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4640      	mov	r0, r8
 800ab68:	f001 fc3a 	bl	800c3e0 <_free_r>
 800ab6c:	463c      	mov	r4, r7
 800ab6e:	e7e0      	b.n	800ab32 <_realloc_r+0x1e>

0800ab70 <__cvt>:
 800ab70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab74:	ec57 6b10 	vmov	r6, r7, d0
 800ab78:	2f00      	cmp	r7, #0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	463b      	mov	r3, r7
 800ab80:	bfbb      	ittet	lt
 800ab82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab86:	461f      	movlt	r7, r3
 800ab88:	2300      	movge	r3, #0
 800ab8a:	232d      	movlt	r3, #45	@ 0x2d
 800ab8c:	700b      	strb	r3, [r1, #0]
 800ab8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab94:	4691      	mov	r9, r2
 800ab96:	f023 0820 	bic.w	r8, r3, #32
 800ab9a:	bfbc      	itt	lt
 800ab9c:	4632      	movlt	r2, r6
 800ab9e:	4616      	movlt	r6, r2
 800aba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aba4:	d005      	beq.n	800abb2 <__cvt+0x42>
 800aba6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800abaa:	d100      	bne.n	800abae <__cvt+0x3e>
 800abac:	3401      	adds	r4, #1
 800abae:	2102      	movs	r1, #2
 800abb0:	e000      	b.n	800abb4 <__cvt+0x44>
 800abb2:	2103      	movs	r1, #3
 800abb4:	ab03      	add	r3, sp, #12
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	ab02      	add	r3, sp, #8
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	ec47 6b10 	vmov	d0, r6, r7
 800abc0:	4653      	mov	r3, sl
 800abc2:	4622      	mov	r2, r4
 800abc4:	f000 fe48 	bl	800b858 <_dtoa_r>
 800abc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800abcc:	4605      	mov	r5, r0
 800abce:	d119      	bne.n	800ac04 <__cvt+0x94>
 800abd0:	f019 0f01 	tst.w	r9, #1
 800abd4:	d00e      	beq.n	800abf4 <__cvt+0x84>
 800abd6:	eb00 0904 	add.w	r9, r0, r4
 800abda:	2200      	movs	r2, #0
 800abdc:	2300      	movs	r3, #0
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	f7f5 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 800abe6:	b108      	cbz	r0, 800abec <__cvt+0x7c>
 800abe8:	f8cd 900c 	str.w	r9, [sp, #12]
 800abec:	2230      	movs	r2, #48	@ 0x30
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	454b      	cmp	r3, r9
 800abf2:	d31e      	bcc.n	800ac32 <__cvt+0xc2>
 800abf4:	9b03      	ldr	r3, [sp, #12]
 800abf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abf8:	1b5b      	subs	r3, r3, r5
 800abfa:	4628      	mov	r0, r5
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	b004      	add	sp, #16
 800ac00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac08:	eb00 0904 	add.w	r9, r0, r4
 800ac0c:	d1e5      	bne.n	800abda <__cvt+0x6a>
 800ac0e:	7803      	ldrb	r3, [r0, #0]
 800ac10:	2b30      	cmp	r3, #48	@ 0x30
 800ac12:	d10a      	bne.n	800ac2a <__cvt+0xba>
 800ac14:	2200      	movs	r2, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac20:	b918      	cbnz	r0, 800ac2a <__cvt+0xba>
 800ac22:	f1c4 0401 	rsb	r4, r4, #1
 800ac26:	f8ca 4000 	str.w	r4, [sl]
 800ac2a:	f8da 3000 	ldr.w	r3, [sl]
 800ac2e:	4499      	add	r9, r3
 800ac30:	e7d3      	b.n	800abda <__cvt+0x6a>
 800ac32:	1c59      	adds	r1, r3, #1
 800ac34:	9103      	str	r1, [sp, #12]
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	e7d9      	b.n	800abee <__cvt+0x7e>

0800ac3a <__exponent>:
 800ac3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac3c:	2900      	cmp	r1, #0
 800ac3e:	bfba      	itte	lt
 800ac40:	4249      	neglt	r1, r1
 800ac42:	232d      	movlt	r3, #45	@ 0x2d
 800ac44:	232b      	movge	r3, #43	@ 0x2b
 800ac46:	2909      	cmp	r1, #9
 800ac48:	7002      	strb	r2, [r0, #0]
 800ac4a:	7043      	strb	r3, [r0, #1]
 800ac4c:	dd29      	ble.n	800aca2 <__exponent+0x68>
 800ac4e:	f10d 0307 	add.w	r3, sp, #7
 800ac52:	461d      	mov	r5, r3
 800ac54:	270a      	movs	r7, #10
 800ac56:	461a      	mov	r2, r3
 800ac58:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac5c:	fb07 1416 	mls	r4, r7, r6, r1
 800ac60:	3430      	adds	r4, #48	@ 0x30
 800ac62:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac66:	460c      	mov	r4, r1
 800ac68:	2c63      	cmp	r4, #99	@ 0x63
 800ac6a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ac6e:	4631      	mov	r1, r6
 800ac70:	dcf1      	bgt.n	800ac56 <__exponent+0x1c>
 800ac72:	3130      	adds	r1, #48	@ 0x30
 800ac74:	1e94      	subs	r4, r2, #2
 800ac76:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac7a:	1c41      	adds	r1, r0, #1
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	42ab      	cmp	r3, r5
 800ac80:	d30a      	bcc.n	800ac98 <__exponent+0x5e>
 800ac82:	f10d 0309 	add.w	r3, sp, #9
 800ac86:	1a9b      	subs	r3, r3, r2
 800ac88:	42ac      	cmp	r4, r5
 800ac8a:	bf88      	it	hi
 800ac8c:	2300      	movhi	r3, #0
 800ac8e:	3302      	adds	r3, #2
 800ac90:	4403      	add	r3, r0
 800ac92:	1a18      	subs	r0, r3, r0
 800ac94:	b003      	add	sp, #12
 800ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac98:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aca0:	e7ed      	b.n	800ac7e <__exponent+0x44>
 800aca2:	2330      	movs	r3, #48	@ 0x30
 800aca4:	3130      	adds	r1, #48	@ 0x30
 800aca6:	7083      	strb	r3, [r0, #2]
 800aca8:	70c1      	strb	r1, [r0, #3]
 800acaa:	1d03      	adds	r3, r0, #4
 800acac:	e7f1      	b.n	800ac92 <__exponent+0x58>
	...

0800acb0 <_printf_float>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	b08d      	sub	sp, #52	@ 0x34
 800acb6:	460c      	mov	r4, r1
 800acb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800acbc:	4616      	mov	r6, r2
 800acbe:	461f      	mov	r7, r3
 800acc0:	4605      	mov	r5, r0
 800acc2:	f000 fcbb 	bl	800b63c <_localeconv_r>
 800acc6:	6803      	ldr	r3, [r0, #0]
 800acc8:	9304      	str	r3, [sp, #16]
 800acca:	4618      	mov	r0, r3
 800accc:	f7f5 fad0 	bl	8000270 <strlen>
 800acd0:	2300      	movs	r3, #0
 800acd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd4:	f8d8 3000 	ldr.w	r3, [r8]
 800acd8:	9005      	str	r0, [sp, #20]
 800acda:	3307      	adds	r3, #7
 800acdc:	f023 0307 	bic.w	r3, r3, #7
 800ace0:	f103 0208 	add.w	r2, r3, #8
 800ace4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ace8:	f8d4 b000 	ldr.w	fp, [r4]
 800acec:	f8c8 2000 	str.w	r2, [r8]
 800acf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800acf8:	9307      	str	r3, [sp, #28]
 800acfa:	f8cd 8018 	str.w	r8, [sp, #24]
 800acfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad06:	4b9c      	ldr	r3, [pc, #624]	@ (800af78 <_printf_float+0x2c8>)
 800ad08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad0c:	f7f5 ff0e 	bl	8000b2c <__aeabi_dcmpun>
 800ad10:	bb70      	cbnz	r0, 800ad70 <_printf_float+0xc0>
 800ad12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad16:	4b98      	ldr	r3, [pc, #608]	@ (800af78 <_printf_float+0x2c8>)
 800ad18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad1c:	f7f5 fee8 	bl	8000af0 <__aeabi_dcmple>
 800ad20:	bb30      	cbnz	r0, 800ad70 <_printf_float+0xc0>
 800ad22:	2200      	movs	r2, #0
 800ad24:	2300      	movs	r3, #0
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fed7 	bl	8000adc <__aeabi_dcmplt>
 800ad2e:	b110      	cbz	r0, 800ad36 <_printf_float+0x86>
 800ad30:	232d      	movs	r3, #45	@ 0x2d
 800ad32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad36:	4a91      	ldr	r2, [pc, #580]	@ (800af7c <_printf_float+0x2cc>)
 800ad38:	4b91      	ldr	r3, [pc, #580]	@ (800af80 <_printf_float+0x2d0>)
 800ad3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad3e:	bf94      	ite	ls
 800ad40:	4690      	movls	r8, r2
 800ad42:	4698      	movhi	r8, r3
 800ad44:	2303      	movs	r3, #3
 800ad46:	6123      	str	r3, [r4, #16]
 800ad48:	f02b 0304 	bic.w	r3, fp, #4
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	f04f 0900 	mov.w	r9, #0
 800ad52:	9700      	str	r7, [sp, #0]
 800ad54:	4633      	mov	r3, r6
 800ad56:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f000 f9d2 	bl	800b104 <_printf_common>
 800ad60:	3001      	adds	r0, #1
 800ad62:	f040 808d 	bne.w	800ae80 <_printf_float+0x1d0>
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad6a:	b00d      	add	sp, #52	@ 0x34
 800ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	4642      	mov	r2, r8
 800ad72:	464b      	mov	r3, r9
 800ad74:	4640      	mov	r0, r8
 800ad76:	4649      	mov	r1, r9
 800ad78:	f7f5 fed8 	bl	8000b2c <__aeabi_dcmpun>
 800ad7c:	b140      	cbz	r0, 800ad90 <_printf_float+0xe0>
 800ad7e:	464b      	mov	r3, r9
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bfbc      	itt	lt
 800ad84:	232d      	movlt	r3, #45	@ 0x2d
 800ad86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad8a:	4a7e      	ldr	r2, [pc, #504]	@ (800af84 <_printf_float+0x2d4>)
 800ad8c:	4b7e      	ldr	r3, [pc, #504]	@ (800af88 <_printf_float+0x2d8>)
 800ad8e:	e7d4      	b.n	800ad3a <_printf_float+0x8a>
 800ad90:	6863      	ldr	r3, [r4, #4]
 800ad92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad96:	9206      	str	r2, [sp, #24]
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	d13b      	bne.n	800ae14 <_printf_float+0x164>
 800ad9c:	2306      	movs	r3, #6
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ada4:	2300      	movs	r3, #0
 800ada6:	6022      	str	r2, [r4, #0]
 800ada8:	9303      	str	r3, [sp, #12]
 800adaa:	ab0a      	add	r3, sp, #40	@ 0x28
 800adac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800adb0:	ab09      	add	r3, sp, #36	@ 0x24
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	6861      	ldr	r1, [r4, #4]
 800adb6:	ec49 8b10 	vmov	d0, r8, r9
 800adba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800adbe:	4628      	mov	r0, r5
 800adc0:	f7ff fed6 	bl	800ab70 <__cvt>
 800adc4:	9b06      	ldr	r3, [sp, #24]
 800adc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adc8:	2b47      	cmp	r3, #71	@ 0x47
 800adca:	4680      	mov	r8, r0
 800adcc:	d129      	bne.n	800ae22 <_printf_float+0x172>
 800adce:	1cc8      	adds	r0, r1, #3
 800add0:	db02      	blt.n	800add8 <_printf_float+0x128>
 800add2:	6863      	ldr	r3, [r4, #4]
 800add4:	4299      	cmp	r1, r3
 800add6:	dd41      	ble.n	800ae5c <_printf_float+0x1ac>
 800add8:	f1aa 0a02 	sub.w	sl, sl, #2
 800addc:	fa5f fa8a 	uxtb.w	sl, sl
 800ade0:	3901      	subs	r1, #1
 800ade2:	4652      	mov	r2, sl
 800ade4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ade8:	9109      	str	r1, [sp, #36]	@ 0x24
 800adea:	f7ff ff26 	bl	800ac3a <__exponent>
 800adee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adf0:	1813      	adds	r3, r2, r0
 800adf2:	2a01      	cmp	r2, #1
 800adf4:	4681      	mov	r9, r0
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	dc02      	bgt.n	800ae00 <_printf_float+0x150>
 800adfa:	6822      	ldr	r2, [r4, #0]
 800adfc:	07d2      	lsls	r2, r2, #31
 800adfe:	d501      	bpl.n	800ae04 <_printf_float+0x154>
 800ae00:	3301      	adds	r3, #1
 800ae02:	6123      	str	r3, [r4, #16]
 800ae04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0a2      	beq.n	800ad52 <_printf_float+0xa2>
 800ae0c:	232d      	movs	r3, #45	@ 0x2d
 800ae0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae12:	e79e      	b.n	800ad52 <_printf_float+0xa2>
 800ae14:	9a06      	ldr	r2, [sp, #24]
 800ae16:	2a47      	cmp	r2, #71	@ 0x47
 800ae18:	d1c2      	bne.n	800ada0 <_printf_float+0xf0>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1c0      	bne.n	800ada0 <_printf_float+0xf0>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e7bd      	b.n	800ad9e <_printf_float+0xee>
 800ae22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae26:	d9db      	bls.n	800ade0 <_printf_float+0x130>
 800ae28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae2c:	d118      	bne.n	800ae60 <_printf_float+0x1b0>
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	6863      	ldr	r3, [r4, #4]
 800ae32:	dd0b      	ble.n	800ae4c <_printf_float+0x19c>
 800ae34:	6121      	str	r1, [r4, #16]
 800ae36:	b913      	cbnz	r3, 800ae3e <_printf_float+0x18e>
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	07d0      	lsls	r0, r2, #31
 800ae3c:	d502      	bpl.n	800ae44 <_printf_float+0x194>
 800ae3e:	3301      	adds	r3, #1
 800ae40:	440b      	add	r3, r1
 800ae42:	6123      	str	r3, [r4, #16]
 800ae44:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae46:	f04f 0900 	mov.w	r9, #0
 800ae4a:	e7db      	b.n	800ae04 <_printf_float+0x154>
 800ae4c:	b913      	cbnz	r3, 800ae54 <_printf_float+0x1a4>
 800ae4e:	6822      	ldr	r2, [r4, #0]
 800ae50:	07d2      	lsls	r2, r2, #31
 800ae52:	d501      	bpl.n	800ae58 <_printf_float+0x1a8>
 800ae54:	3302      	adds	r3, #2
 800ae56:	e7f4      	b.n	800ae42 <_printf_float+0x192>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e7f2      	b.n	800ae42 <_printf_float+0x192>
 800ae5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae62:	4299      	cmp	r1, r3
 800ae64:	db05      	blt.n	800ae72 <_printf_float+0x1c2>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	6121      	str	r1, [r4, #16]
 800ae6a:	07d8      	lsls	r0, r3, #31
 800ae6c:	d5ea      	bpl.n	800ae44 <_printf_float+0x194>
 800ae6e:	1c4b      	adds	r3, r1, #1
 800ae70:	e7e7      	b.n	800ae42 <_printf_float+0x192>
 800ae72:	2900      	cmp	r1, #0
 800ae74:	bfd4      	ite	le
 800ae76:	f1c1 0202 	rsble	r2, r1, #2
 800ae7a:	2201      	movgt	r2, #1
 800ae7c:	4413      	add	r3, r2
 800ae7e:	e7e0      	b.n	800ae42 <_printf_float+0x192>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	055a      	lsls	r2, r3, #21
 800ae84:	d407      	bmi.n	800ae96 <_printf_float+0x1e6>
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	4642      	mov	r2, r8
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	d12b      	bne.n	800aeec <_printf_float+0x23c>
 800ae94:	e767      	b.n	800ad66 <_printf_float+0xb6>
 800ae96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae9a:	f240 80dd 	bls.w	800b058 <_printf_float+0x3a8>
 800ae9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aea2:	2200      	movs	r2, #0
 800aea4:	2300      	movs	r3, #0
 800aea6:	f7f5 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d033      	beq.n	800af16 <_printf_float+0x266>
 800aeae:	4a37      	ldr	r2, [pc, #220]	@ (800af8c <_printf_float+0x2dc>)
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	f43f af54 	beq.w	800ad66 <_printf_float+0xb6>
 800aebe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aec2:	4543      	cmp	r3, r8
 800aec4:	db02      	blt.n	800aecc <_printf_float+0x21c>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	07d8      	lsls	r0, r3, #31
 800aeca:	d50f      	bpl.n	800aeec <_printf_float+0x23c>
 800aecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aed0:	4631      	mov	r1, r6
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b8      	blx	r7
 800aed6:	3001      	adds	r0, #1
 800aed8:	f43f af45 	beq.w	800ad66 <_printf_float+0xb6>
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aee4:	f104 0a1a 	add.w	sl, r4, #26
 800aee8:	45c8      	cmp	r8, r9
 800aeea:	dc09      	bgt.n	800af00 <_printf_float+0x250>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	079b      	lsls	r3, r3, #30
 800aef0:	f100 8103 	bmi.w	800b0fa <_printf_float+0x44a>
 800aef4:	68e0      	ldr	r0, [r4, #12]
 800aef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aef8:	4298      	cmp	r0, r3
 800aefa:	bfb8      	it	lt
 800aefc:	4618      	movlt	r0, r3
 800aefe:	e734      	b.n	800ad6a <_printf_float+0xba>
 800af00:	2301      	movs	r3, #1
 800af02:	4652      	mov	r2, sl
 800af04:	4631      	mov	r1, r6
 800af06:	4628      	mov	r0, r5
 800af08:	47b8      	blx	r7
 800af0a:	3001      	adds	r0, #1
 800af0c:	f43f af2b 	beq.w	800ad66 <_printf_float+0xb6>
 800af10:	f109 0901 	add.w	r9, r9, #1
 800af14:	e7e8      	b.n	800aee8 <_printf_float+0x238>
 800af16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dc39      	bgt.n	800af90 <_printf_float+0x2e0>
 800af1c:	4a1b      	ldr	r2, [pc, #108]	@ (800af8c <_printf_float+0x2dc>)
 800af1e:	2301      	movs	r3, #1
 800af20:	4631      	mov	r1, r6
 800af22:	4628      	mov	r0, r5
 800af24:	47b8      	blx	r7
 800af26:	3001      	adds	r0, #1
 800af28:	f43f af1d 	beq.w	800ad66 <_printf_float+0xb6>
 800af2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af30:	ea59 0303 	orrs.w	r3, r9, r3
 800af34:	d102      	bne.n	800af3c <_printf_float+0x28c>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	07d9      	lsls	r1, r3, #31
 800af3a:	d5d7      	bpl.n	800aeec <_printf_float+0x23c>
 800af3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af40:	4631      	mov	r1, r6
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	f43f af0d 	beq.w	800ad66 <_printf_float+0xb6>
 800af4c:	f04f 0a00 	mov.w	sl, #0
 800af50:	f104 0b1a 	add.w	fp, r4, #26
 800af54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af56:	425b      	negs	r3, r3
 800af58:	4553      	cmp	r3, sl
 800af5a:	dc01      	bgt.n	800af60 <_printf_float+0x2b0>
 800af5c:	464b      	mov	r3, r9
 800af5e:	e793      	b.n	800ae88 <_printf_float+0x1d8>
 800af60:	2301      	movs	r3, #1
 800af62:	465a      	mov	r2, fp
 800af64:	4631      	mov	r1, r6
 800af66:	4628      	mov	r0, r5
 800af68:	47b8      	blx	r7
 800af6a:	3001      	adds	r0, #1
 800af6c:	f43f aefb 	beq.w	800ad66 <_printf_float+0xb6>
 800af70:	f10a 0a01 	add.w	sl, sl, #1
 800af74:	e7ee      	b.n	800af54 <_printf_float+0x2a4>
 800af76:	bf00      	nop
 800af78:	7fefffff 	.word	0x7fefffff
 800af7c:	0800eaf4 	.word	0x0800eaf4
 800af80:	0800eaf8 	.word	0x0800eaf8
 800af84:	0800eafc 	.word	0x0800eafc
 800af88:	0800eb00 	.word	0x0800eb00
 800af8c:	0800eb04 	.word	0x0800eb04
 800af90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af96:	4553      	cmp	r3, sl
 800af98:	bfa8      	it	ge
 800af9a:	4653      	movge	r3, sl
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	4699      	mov	r9, r3
 800afa0:	dc36      	bgt.n	800b010 <_printf_float+0x360>
 800afa2:	f04f 0b00 	mov.w	fp, #0
 800afa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afaa:	f104 021a 	add.w	r2, r4, #26
 800afae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afb0:	9306      	str	r3, [sp, #24]
 800afb2:	eba3 0309 	sub.w	r3, r3, r9
 800afb6:	455b      	cmp	r3, fp
 800afb8:	dc31      	bgt.n	800b01e <_printf_float+0x36e>
 800afba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afbc:	459a      	cmp	sl, r3
 800afbe:	dc3a      	bgt.n	800b036 <_printf_float+0x386>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	07da      	lsls	r2, r3, #31
 800afc4:	d437      	bmi.n	800b036 <_printf_float+0x386>
 800afc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc8:	ebaa 0903 	sub.w	r9, sl, r3
 800afcc:	9b06      	ldr	r3, [sp, #24]
 800afce:	ebaa 0303 	sub.w	r3, sl, r3
 800afd2:	4599      	cmp	r9, r3
 800afd4:	bfa8      	it	ge
 800afd6:	4699      	movge	r9, r3
 800afd8:	f1b9 0f00 	cmp.w	r9, #0
 800afdc:	dc33      	bgt.n	800b046 <_printf_float+0x396>
 800afde:	f04f 0800 	mov.w	r8, #0
 800afe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afe6:	f104 0b1a 	add.w	fp, r4, #26
 800afea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afec:	ebaa 0303 	sub.w	r3, sl, r3
 800aff0:	eba3 0309 	sub.w	r3, r3, r9
 800aff4:	4543      	cmp	r3, r8
 800aff6:	f77f af79 	ble.w	800aeec <_printf_float+0x23c>
 800affa:	2301      	movs	r3, #1
 800affc:	465a      	mov	r2, fp
 800affe:	4631      	mov	r1, r6
 800b000:	4628      	mov	r0, r5
 800b002:	47b8      	blx	r7
 800b004:	3001      	adds	r0, #1
 800b006:	f43f aeae 	beq.w	800ad66 <_printf_float+0xb6>
 800b00a:	f108 0801 	add.w	r8, r8, #1
 800b00e:	e7ec      	b.n	800afea <_printf_float+0x33a>
 800b010:	4642      	mov	r2, r8
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	d1c2      	bne.n	800afa2 <_printf_float+0x2f2>
 800b01c:	e6a3      	b.n	800ad66 <_printf_float+0xb6>
 800b01e:	2301      	movs	r3, #1
 800b020:	4631      	mov	r1, r6
 800b022:	4628      	mov	r0, r5
 800b024:	9206      	str	r2, [sp, #24]
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	f43f ae9c 	beq.w	800ad66 <_printf_float+0xb6>
 800b02e:	9a06      	ldr	r2, [sp, #24]
 800b030:	f10b 0b01 	add.w	fp, fp, #1
 800b034:	e7bb      	b.n	800afae <_printf_float+0x2fe>
 800b036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	d1c0      	bne.n	800afc6 <_printf_float+0x316>
 800b044:	e68f      	b.n	800ad66 <_printf_float+0xb6>
 800b046:	9a06      	ldr	r2, [sp, #24]
 800b048:	464b      	mov	r3, r9
 800b04a:	4442      	add	r2, r8
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	d1c3      	bne.n	800afde <_printf_float+0x32e>
 800b056:	e686      	b.n	800ad66 <_printf_float+0xb6>
 800b058:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b05c:	f1ba 0f01 	cmp.w	sl, #1
 800b060:	dc01      	bgt.n	800b066 <_printf_float+0x3b6>
 800b062:	07db      	lsls	r3, r3, #31
 800b064:	d536      	bpl.n	800b0d4 <_printf_float+0x424>
 800b066:	2301      	movs	r3, #1
 800b068:	4642      	mov	r2, r8
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	f43f ae78 	beq.w	800ad66 <_printf_float+0xb6>
 800b076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b07a:	4631      	mov	r1, r6
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b8      	blx	r7
 800b080:	3001      	adds	r0, #1
 800b082:	f43f ae70 	beq.w	800ad66 <_printf_float+0xb6>
 800b086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b092:	f7f5 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b096:	b9c0      	cbnz	r0, 800b0ca <_printf_float+0x41a>
 800b098:	4653      	mov	r3, sl
 800b09a:	f108 0201 	add.w	r2, r8, #1
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b8      	blx	r7
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d10c      	bne.n	800b0c2 <_printf_float+0x412>
 800b0a8:	e65d      	b.n	800ad66 <_printf_float+0xb6>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	465a      	mov	r2, fp
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	47b8      	blx	r7
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	f43f ae56 	beq.w	800ad66 <_printf_float+0xb6>
 800b0ba:	f108 0801 	add.w	r8, r8, #1
 800b0be:	45d0      	cmp	r8, sl
 800b0c0:	dbf3      	blt.n	800b0aa <_printf_float+0x3fa>
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0c8:	e6df      	b.n	800ae8a <_printf_float+0x1da>
 800b0ca:	f04f 0800 	mov.w	r8, #0
 800b0ce:	f104 0b1a 	add.w	fp, r4, #26
 800b0d2:	e7f4      	b.n	800b0be <_printf_float+0x40e>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	4642      	mov	r2, r8
 800b0d8:	e7e1      	b.n	800b09e <_printf_float+0x3ee>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	464a      	mov	r2, r9
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f43f ae3e 	beq.w	800ad66 <_printf_float+0xb6>
 800b0ea:	f108 0801 	add.w	r8, r8, #1
 800b0ee:	68e3      	ldr	r3, [r4, #12]
 800b0f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0f2:	1a5b      	subs	r3, r3, r1
 800b0f4:	4543      	cmp	r3, r8
 800b0f6:	dcf0      	bgt.n	800b0da <_printf_float+0x42a>
 800b0f8:	e6fc      	b.n	800aef4 <_printf_float+0x244>
 800b0fa:	f04f 0800 	mov.w	r8, #0
 800b0fe:	f104 0919 	add.w	r9, r4, #25
 800b102:	e7f4      	b.n	800b0ee <_printf_float+0x43e>

0800b104 <_printf_common>:
 800b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	4616      	mov	r6, r2
 800b10a:	4698      	mov	r8, r3
 800b10c:	688a      	ldr	r2, [r1, #8]
 800b10e:	690b      	ldr	r3, [r1, #16]
 800b110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b114:	4293      	cmp	r3, r2
 800b116:	bfb8      	it	lt
 800b118:	4613      	movlt	r3, r2
 800b11a:	6033      	str	r3, [r6, #0]
 800b11c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b120:	4607      	mov	r7, r0
 800b122:	460c      	mov	r4, r1
 800b124:	b10a      	cbz	r2, 800b12a <_printf_common+0x26>
 800b126:	3301      	adds	r3, #1
 800b128:	6033      	str	r3, [r6, #0]
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	0699      	lsls	r1, r3, #26
 800b12e:	bf42      	ittt	mi
 800b130:	6833      	ldrmi	r3, [r6, #0]
 800b132:	3302      	addmi	r3, #2
 800b134:	6033      	strmi	r3, [r6, #0]
 800b136:	6825      	ldr	r5, [r4, #0]
 800b138:	f015 0506 	ands.w	r5, r5, #6
 800b13c:	d106      	bne.n	800b14c <_printf_common+0x48>
 800b13e:	f104 0a19 	add.w	sl, r4, #25
 800b142:	68e3      	ldr	r3, [r4, #12]
 800b144:	6832      	ldr	r2, [r6, #0]
 800b146:	1a9b      	subs	r3, r3, r2
 800b148:	42ab      	cmp	r3, r5
 800b14a:	dc26      	bgt.n	800b19a <_printf_common+0x96>
 800b14c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b150:	6822      	ldr	r2, [r4, #0]
 800b152:	3b00      	subs	r3, #0
 800b154:	bf18      	it	ne
 800b156:	2301      	movne	r3, #1
 800b158:	0692      	lsls	r2, r2, #26
 800b15a:	d42b      	bmi.n	800b1b4 <_printf_common+0xb0>
 800b15c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b160:	4641      	mov	r1, r8
 800b162:	4638      	mov	r0, r7
 800b164:	47c8      	blx	r9
 800b166:	3001      	adds	r0, #1
 800b168:	d01e      	beq.n	800b1a8 <_printf_common+0xa4>
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	6922      	ldr	r2, [r4, #16]
 800b16e:	f003 0306 	and.w	r3, r3, #6
 800b172:	2b04      	cmp	r3, #4
 800b174:	bf02      	ittt	eq
 800b176:	68e5      	ldreq	r5, [r4, #12]
 800b178:	6833      	ldreq	r3, [r6, #0]
 800b17a:	1aed      	subeq	r5, r5, r3
 800b17c:	68a3      	ldr	r3, [r4, #8]
 800b17e:	bf0c      	ite	eq
 800b180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b184:	2500      	movne	r5, #0
 800b186:	4293      	cmp	r3, r2
 800b188:	bfc4      	itt	gt
 800b18a:	1a9b      	subgt	r3, r3, r2
 800b18c:	18ed      	addgt	r5, r5, r3
 800b18e:	2600      	movs	r6, #0
 800b190:	341a      	adds	r4, #26
 800b192:	42b5      	cmp	r5, r6
 800b194:	d11a      	bne.n	800b1cc <_printf_common+0xc8>
 800b196:	2000      	movs	r0, #0
 800b198:	e008      	b.n	800b1ac <_printf_common+0xa8>
 800b19a:	2301      	movs	r3, #1
 800b19c:	4652      	mov	r2, sl
 800b19e:	4641      	mov	r1, r8
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	47c8      	blx	r9
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d103      	bne.n	800b1b0 <_printf_common+0xac>
 800b1a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b0:	3501      	adds	r5, #1
 800b1b2:	e7c6      	b.n	800b142 <_printf_common+0x3e>
 800b1b4:	18e1      	adds	r1, r4, r3
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	2030      	movs	r0, #48	@ 0x30
 800b1ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1be:	4422      	add	r2, r4
 800b1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1c8:	3302      	adds	r3, #2
 800b1ca:	e7c7      	b.n	800b15c <_printf_common+0x58>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	4641      	mov	r1, r8
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	47c8      	blx	r9
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	d0e6      	beq.n	800b1a8 <_printf_common+0xa4>
 800b1da:	3601      	adds	r6, #1
 800b1dc:	e7d9      	b.n	800b192 <_printf_common+0x8e>
	...

0800b1e0 <_printf_i>:
 800b1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	7e0f      	ldrb	r7, [r1, #24]
 800b1e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1e8:	2f78      	cmp	r7, #120	@ 0x78
 800b1ea:	4691      	mov	r9, r2
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	469a      	mov	sl, r3
 800b1f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1f6:	d807      	bhi.n	800b208 <_printf_i+0x28>
 800b1f8:	2f62      	cmp	r7, #98	@ 0x62
 800b1fa:	d80a      	bhi.n	800b212 <_printf_i+0x32>
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	f000 80d2 	beq.w	800b3a6 <_printf_i+0x1c6>
 800b202:	2f58      	cmp	r7, #88	@ 0x58
 800b204:	f000 80b9 	beq.w	800b37a <_printf_i+0x19a>
 800b208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b20c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b210:	e03a      	b.n	800b288 <_printf_i+0xa8>
 800b212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b216:	2b15      	cmp	r3, #21
 800b218:	d8f6      	bhi.n	800b208 <_printf_i+0x28>
 800b21a:	a101      	add	r1, pc, #4	@ (adr r1, 800b220 <_printf_i+0x40>)
 800b21c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b220:	0800b279 	.word	0x0800b279
 800b224:	0800b28d 	.word	0x0800b28d
 800b228:	0800b209 	.word	0x0800b209
 800b22c:	0800b209 	.word	0x0800b209
 800b230:	0800b209 	.word	0x0800b209
 800b234:	0800b209 	.word	0x0800b209
 800b238:	0800b28d 	.word	0x0800b28d
 800b23c:	0800b209 	.word	0x0800b209
 800b240:	0800b209 	.word	0x0800b209
 800b244:	0800b209 	.word	0x0800b209
 800b248:	0800b209 	.word	0x0800b209
 800b24c:	0800b38d 	.word	0x0800b38d
 800b250:	0800b2b7 	.word	0x0800b2b7
 800b254:	0800b347 	.word	0x0800b347
 800b258:	0800b209 	.word	0x0800b209
 800b25c:	0800b209 	.word	0x0800b209
 800b260:	0800b3af 	.word	0x0800b3af
 800b264:	0800b209 	.word	0x0800b209
 800b268:	0800b2b7 	.word	0x0800b2b7
 800b26c:	0800b209 	.word	0x0800b209
 800b270:	0800b209 	.word	0x0800b209
 800b274:	0800b34f 	.word	0x0800b34f
 800b278:	6833      	ldr	r3, [r6, #0]
 800b27a:	1d1a      	adds	r2, r3, #4
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6032      	str	r2, [r6, #0]
 800b280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b288:	2301      	movs	r3, #1
 800b28a:	e09d      	b.n	800b3c8 <_printf_i+0x1e8>
 800b28c:	6833      	ldr	r3, [r6, #0]
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	1d19      	adds	r1, r3, #4
 800b292:	6031      	str	r1, [r6, #0]
 800b294:	0606      	lsls	r6, r0, #24
 800b296:	d501      	bpl.n	800b29c <_printf_i+0xbc>
 800b298:	681d      	ldr	r5, [r3, #0]
 800b29a:	e003      	b.n	800b2a4 <_printf_i+0xc4>
 800b29c:	0645      	lsls	r5, r0, #25
 800b29e:	d5fb      	bpl.n	800b298 <_printf_i+0xb8>
 800b2a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	da03      	bge.n	800b2b0 <_printf_i+0xd0>
 800b2a8:	232d      	movs	r3, #45	@ 0x2d
 800b2aa:	426d      	negs	r5, r5
 800b2ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2b0:	4859      	ldr	r0, [pc, #356]	@ (800b418 <_printf_i+0x238>)
 800b2b2:	230a      	movs	r3, #10
 800b2b4:	e011      	b.n	800b2da <_printf_i+0xfa>
 800b2b6:	6821      	ldr	r1, [r4, #0]
 800b2b8:	6833      	ldr	r3, [r6, #0]
 800b2ba:	0608      	lsls	r0, r1, #24
 800b2bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2c0:	d402      	bmi.n	800b2c8 <_printf_i+0xe8>
 800b2c2:	0649      	lsls	r1, r1, #25
 800b2c4:	bf48      	it	mi
 800b2c6:	b2ad      	uxthmi	r5, r5
 800b2c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2ca:	4853      	ldr	r0, [pc, #332]	@ (800b418 <_printf_i+0x238>)
 800b2cc:	6033      	str	r3, [r6, #0]
 800b2ce:	bf14      	ite	ne
 800b2d0:	230a      	movne	r3, #10
 800b2d2:	2308      	moveq	r3, #8
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2da:	6866      	ldr	r6, [r4, #4]
 800b2dc:	60a6      	str	r6, [r4, #8]
 800b2de:	2e00      	cmp	r6, #0
 800b2e0:	bfa2      	ittt	ge
 800b2e2:	6821      	ldrge	r1, [r4, #0]
 800b2e4:	f021 0104 	bicge.w	r1, r1, #4
 800b2e8:	6021      	strge	r1, [r4, #0]
 800b2ea:	b90d      	cbnz	r5, 800b2f0 <_printf_i+0x110>
 800b2ec:	2e00      	cmp	r6, #0
 800b2ee:	d04b      	beq.n	800b388 <_printf_i+0x1a8>
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b2fa:	5dc7      	ldrb	r7, [r0, r7]
 800b2fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b300:	462f      	mov	r7, r5
 800b302:	42bb      	cmp	r3, r7
 800b304:	460d      	mov	r5, r1
 800b306:	d9f4      	bls.n	800b2f2 <_printf_i+0x112>
 800b308:	2b08      	cmp	r3, #8
 800b30a:	d10b      	bne.n	800b324 <_printf_i+0x144>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	07df      	lsls	r7, r3, #31
 800b310:	d508      	bpl.n	800b324 <_printf_i+0x144>
 800b312:	6923      	ldr	r3, [r4, #16]
 800b314:	6861      	ldr	r1, [r4, #4]
 800b316:	4299      	cmp	r1, r3
 800b318:	bfde      	ittt	le
 800b31a:	2330      	movle	r3, #48	@ 0x30
 800b31c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b320:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b324:	1b92      	subs	r2, r2, r6
 800b326:	6122      	str	r2, [r4, #16]
 800b328:	f8cd a000 	str.w	sl, [sp]
 800b32c:	464b      	mov	r3, r9
 800b32e:	aa03      	add	r2, sp, #12
 800b330:	4621      	mov	r1, r4
 800b332:	4640      	mov	r0, r8
 800b334:	f7ff fee6 	bl	800b104 <_printf_common>
 800b338:	3001      	adds	r0, #1
 800b33a:	d14a      	bne.n	800b3d2 <_printf_i+0x1f2>
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b340:	b004      	add	sp, #16
 800b342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	f043 0320 	orr.w	r3, r3, #32
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	4833      	ldr	r0, [pc, #204]	@ (800b41c <_printf_i+0x23c>)
 800b350:	2778      	movs	r7, #120	@ 0x78
 800b352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	6831      	ldr	r1, [r6, #0]
 800b35a:	061f      	lsls	r7, r3, #24
 800b35c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b360:	d402      	bmi.n	800b368 <_printf_i+0x188>
 800b362:	065f      	lsls	r7, r3, #25
 800b364:	bf48      	it	mi
 800b366:	b2ad      	uxthmi	r5, r5
 800b368:	6031      	str	r1, [r6, #0]
 800b36a:	07d9      	lsls	r1, r3, #31
 800b36c:	bf44      	itt	mi
 800b36e:	f043 0320 	orrmi.w	r3, r3, #32
 800b372:	6023      	strmi	r3, [r4, #0]
 800b374:	b11d      	cbz	r5, 800b37e <_printf_i+0x19e>
 800b376:	2310      	movs	r3, #16
 800b378:	e7ac      	b.n	800b2d4 <_printf_i+0xf4>
 800b37a:	4827      	ldr	r0, [pc, #156]	@ (800b418 <_printf_i+0x238>)
 800b37c:	e7e9      	b.n	800b352 <_printf_i+0x172>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	f023 0320 	bic.w	r3, r3, #32
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	e7f6      	b.n	800b376 <_printf_i+0x196>
 800b388:	4616      	mov	r6, r2
 800b38a:	e7bd      	b.n	800b308 <_printf_i+0x128>
 800b38c:	6833      	ldr	r3, [r6, #0]
 800b38e:	6825      	ldr	r5, [r4, #0]
 800b390:	6961      	ldr	r1, [r4, #20]
 800b392:	1d18      	adds	r0, r3, #4
 800b394:	6030      	str	r0, [r6, #0]
 800b396:	062e      	lsls	r6, r5, #24
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	d501      	bpl.n	800b3a0 <_printf_i+0x1c0>
 800b39c:	6019      	str	r1, [r3, #0]
 800b39e:	e002      	b.n	800b3a6 <_printf_i+0x1c6>
 800b3a0:	0668      	lsls	r0, r5, #25
 800b3a2:	d5fb      	bpl.n	800b39c <_printf_i+0x1bc>
 800b3a4:	8019      	strh	r1, [r3, #0]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	4616      	mov	r6, r2
 800b3ac:	e7bc      	b.n	800b328 <_printf_i+0x148>
 800b3ae:	6833      	ldr	r3, [r6, #0]
 800b3b0:	1d1a      	adds	r2, r3, #4
 800b3b2:	6032      	str	r2, [r6, #0]
 800b3b4:	681e      	ldr	r6, [r3, #0]
 800b3b6:	6862      	ldr	r2, [r4, #4]
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7f4 ff08 	bl	80001d0 <memchr>
 800b3c0:	b108      	cbz	r0, 800b3c6 <_printf_i+0x1e6>
 800b3c2:	1b80      	subs	r0, r0, r6
 800b3c4:	6060      	str	r0, [r4, #4]
 800b3c6:	6863      	ldr	r3, [r4, #4]
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3d0:	e7aa      	b.n	800b328 <_printf_i+0x148>
 800b3d2:	6923      	ldr	r3, [r4, #16]
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	47d0      	blx	sl
 800b3dc:	3001      	adds	r0, #1
 800b3de:	d0ad      	beq.n	800b33c <_printf_i+0x15c>
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	079b      	lsls	r3, r3, #30
 800b3e4:	d413      	bmi.n	800b40e <_printf_i+0x22e>
 800b3e6:	68e0      	ldr	r0, [r4, #12]
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	4298      	cmp	r0, r3
 800b3ec:	bfb8      	it	lt
 800b3ee:	4618      	movlt	r0, r3
 800b3f0:	e7a6      	b.n	800b340 <_printf_i+0x160>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	47d0      	blx	sl
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d09d      	beq.n	800b33c <_printf_i+0x15c>
 800b400:	3501      	adds	r5, #1
 800b402:	68e3      	ldr	r3, [r4, #12]
 800b404:	9903      	ldr	r1, [sp, #12]
 800b406:	1a5b      	subs	r3, r3, r1
 800b408:	42ab      	cmp	r3, r5
 800b40a:	dcf2      	bgt.n	800b3f2 <_printf_i+0x212>
 800b40c:	e7eb      	b.n	800b3e6 <_printf_i+0x206>
 800b40e:	2500      	movs	r5, #0
 800b410:	f104 0619 	add.w	r6, r4, #25
 800b414:	e7f5      	b.n	800b402 <_printf_i+0x222>
 800b416:	bf00      	nop
 800b418:	0800eb06 	.word	0x0800eb06
 800b41c:	0800eb17 	.word	0x0800eb17

0800b420 <std>:
 800b420:	2300      	movs	r3, #0
 800b422:	b510      	push	{r4, lr}
 800b424:	4604      	mov	r4, r0
 800b426:	e9c0 3300 	strd	r3, r3, [r0]
 800b42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b42e:	6083      	str	r3, [r0, #8]
 800b430:	8181      	strh	r1, [r0, #12]
 800b432:	6643      	str	r3, [r0, #100]	@ 0x64
 800b434:	81c2      	strh	r2, [r0, #14]
 800b436:	6183      	str	r3, [r0, #24]
 800b438:	4619      	mov	r1, r3
 800b43a:	2208      	movs	r2, #8
 800b43c:	305c      	adds	r0, #92	@ 0x5c
 800b43e:	f000 f8f4 	bl	800b62a <memset>
 800b442:	4b0d      	ldr	r3, [pc, #52]	@ (800b478 <std+0x58>)
 800b444:	6263      	str	r3, [r4, #36]	@ 0x24
 800b446:	4b0d      	ldr	r3, [pc, #52]	@ (800b47c <std+0x5c>)
 800b448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b44a:	4b0d      	ldr	r3, [pc, #52]	@ (800b480 <std+0x60>)
 800b44c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b44e:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <std+0x64>)
 800b450:	6323      	str	r3, [r4, #48]	@ 0x30
 800b452:	4b0d      	ldr	r3, [pc, #52]	@ (800b488 <std+0x68>)
 800b454:	6224      	str	r4, [r4, #32]
 800b456:	429c      	cmp	r4, r3
 800b458:	d006      	beq.n	800b468 <std+0x48>
 800b45a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b45e:	4294      	cmp	r4, r2
 800b460:	d002      	beq.n	800b468 <std+0x48>
 800b462:	33d0      	adds	r3, #208	@ 0xd0
 800b464:	429c      	cmp	r4, r3
 800b466:	d105      	bne.n	800b474 <std+0x54>
 800b468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f000 b958 	b.w	800b724 <__retarget_lock_init_recursive>
 800b474:	bd10      	pop	{r4, pc}
 800b476:	bf00      	nop
 800b478:	0800b5a5 	.word	0x0800b5a5
 800b47c:	0800b5c7 	.word	0x0800b5c7
 800b480:	0800b5ff 	.word	0x0800b5ff
 800b484:	0800b623 	.word	0x0800b623
 800b488:	20000d84 	.word	0x20000d84

0800b48c <stdio_exit_handler>:
 800b48c:	4a02      	ldr	r2, [pc, #8]	@ (800b498 <stdio_exit_handler+0xc>)
 800b48e:	4903      	ldr	r1, [pc, #12]	@ (800b49c <stdio_exit_handler+0x10>)
 800b490:	4803      	ldr	r0, [pc, #12]	@ (800b4a0 <stdio_exit_handler+0x14>)
 800b492:	f000 b869 	b.w	800b568 <_fwalk_sglue>
 800b496:	bf00      	nop
 800b498:	2000000c 	.word	0x2000000c
 800b49c:	0800d081 	.word	0x0800d081
 800b4a0:	2000001c 	.word	0x2000001c

0800b4a4 <cleanup_stdio>:
 800b4a4:	6841      	ldr	r1, [r0, #4]
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <cleanup_stdio+0x34>)
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	b510      	push	{r4, lr}
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	d001      	beq.n	800b4b4 <cleanup_stdio+0x10>
 800b4b0:	f001 fde6 	bl	800d080 <_fflush_r>
 800b4b4:	68a1      	ldr	r1, [r4, #8]
 800b4b6:	4b09      	ldr	r3, [pc, #36]	@ (800b4dc <cleanup_stdio+0x38>)
 800b4b8:	4299      	cmp	r1, r3
 800b4ba:	d002      	beq.n	800b4c2 <cleanup_stdio+0x1e>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f001 fddf 	bl	800d080 <_fflush_r>
 800b4c2:	68e1      	ldr	r1, [r4, #12]
 800b4c4:	4b06      	ldr	r3, [pc, #24]	@ (800b4e0 <cleanup_stdio+0x3c>)
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	d004      	beq.n	800b4d4 <cleanup_stdio+0x30>
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d0:	f001 bdd6 	b.w	800d080 <_fflush_r>
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000d84 	.word	0x20000d84
 800b4dc:	20000dec 	.word	0x20000dec
 800b4e0:	20000e54 	.word	0x20000e54

0800b4e4 <global_stdio_init.part.0>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b514 <global_stdio_init.part.0+0x30>)
 800b4e8:	4c0b      	ldr	r4, [pc, #44]	@ (800b518 <global_stdio_init.part.0+0x34>)
 800b4ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b51c <global_stdio_init.part.0+0x38>)
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2104      	movs	r1, #4
 800b4f4:	f7ff ff94 	bl	800b420 <std>
 800b4f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	2109      	movs	r1, #9
 800b500:	f7ff ff8e 	bl	800b420 <std>
 800b504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b508:	2202      	movs	r2, #2
 800b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50e:	2112      	movs	r1, #18
 800b510:	f7ff bf86 	b.w	800b420 <std>
 800b514:	20000ebc 	.word	0x20000ebc
 800b518:	20000d84 	.word	0x20000d84
 800b51c:	0800b48d 	.word	0x0800b48d

0800b520 <__sfp_lock_acquire>:
 800b520:	4801      	ldr	r0, [pc, #4]	@ (800b528 <__sfp_lock_acquire+0x8>)
 800b522:	f000 b900 	b.w	800b726 <__retarget_lock_acquire_recursive>
 800b526:	bf00      	nop
 800b528:	20000ec5 	.word	0x20000ec5

0800b52c <__sfp_lock_release>:
 800b52c:	4801      	ldr	r0, [pc, #4]	@ (800b534 <__sfp_lock_release+0x8>)
 800b52e:	f000 b8fb 	b.w	800b728 <__retarget_lock_release_recursive>
 800b532:	bf00      	nop
 800b534:	20000ec5 	.word	0x20000ec5

0800b538 <__sinit>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	4604      	mov	r4, r0
 800b53c:	f7ff fff0 	bl	800b520 <__sfp_lock_acquire>
 800b540:	6a23      	ldr	r3, [r4, #32]
 800b542:	b11b      	cbz	r3, 800b54c <__sinit+0x14>
 800b544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b548:	f7ff bff0 	b.w	800b52c <__sfp_lock_release>
 800b54c:	4b04      	ldr	r3, [pc, #16]	@ (800b560 <__sinit+0x28>)
 800b54e:	6223      	str	r3, [r4, #32]
 800b550:	4b04      	ldr	r3, [pc, #16]	@ (800b564 <__sinit+0x2c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1f5      	bne.n	800b544 <__sinit+0xc>
 800b558:	f7ff ffc4 	bl	800b4e4 <global_stdio_init.part.0>
 800b55c:	e7f2      	b.n	800b544 <__sinit+0xc>
 800b55e:	bf00      	nop
 800b560:	0800b4a5 	.word	0x0800b4a5
 800b564:	20000ebc 	.word	0x20000ebc

0800b568 <_fwalk_sglue>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	4607      	mov	r7, r0
 800b56e:	4688      	mov	r8, r1
 800b570:	4614      	mov	r4, r2
 800b572:	2600      	movs	r6, #0
 800b574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b578:	f1b9 0901 	subs.w	r9, r9, #1
 800b57c:	d505      	bpl.n	800b58a <_fwalk_sglue+0x22>
 800b57e:	6824      	ldr	r4, [r4, #0]
 800b580:	2c00      	cmp	r4, #0
 800b582:	d1f7      	bne.n	800b574 <_fwalk_sglue+0xc>
 800b584:	4630      	mov	r0, r6
 800b586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d907      	bls.n	800b5a0 <_fwalk_sglue+0x38>
 800b590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b594:	3301      	adds	r3, #1
 800b596:	d003      	beq.n	800b5a0 <_fwalk_sglue+0x38>
 800b598:	4629      	mov	r1, r5
 800b59a:	4638      	mov	r0, r7
 800b59c:	47c0      	blx	r8
 800b59e:	4306      	orrs	r6, r0
 800b5a0:	3568      	adds	r5, #104	@ 0x68
 800b5a2:	e7e9      	b.n	800b578 <_fwalk_sglue+0x10>

0800b5a4 <__sread>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f000 f86c 	bl	800b688 <_read_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b8:	181b      	addge	r3, r3, r0
 800b5ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5be:	bfac      	ite	ge
 800b5c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5c2:	81a3      	strhlt	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__swrite>:
 800b5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	898b      	ldrh	r3, [r1, #12]
 800b5ce:	05db      	lsls	r3, r3, #23
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	d505      	bpl.n	800b5e4 <__swrite+0x1e>
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	2302      	movs	r3, #2
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f000 f840 	bl	800b664 <_lseek_r>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	f000 b857 	b.w	800b6ac <_write_r>

0800b5fe <__sseek>:
 800b5fe:	b510      	push	{r4, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 f82d 	bl	800b664 <_lseek_r>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	bf15      	itete	ne
 800b610:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b61a:	81a3      	strheq	r3, [r4, #12]
 800b61c:	bf18      	it	ne
 800b61e:	81a3      	strhne	r3, [r4, #12]
 800b620:	bd10      	pop	{r4, pc}

0800b622 <__sclose>:
 800b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b626:	f000 b80d 	b.w	800b644 <_close_r>

0800b62a <memset>:
 800b62a:	4402      	add	r2, r0
 800b62c:	4603      	mov	r3, r0
 800b62e:	4293      	cmp	r3, r2
 800b630:	d100      	bne.n	800b634 <memset+0xa>
 800b632:	4770      	bx	lr
 800b634:	f803 1b01 	strb.w	r1, [r3], #1
 800b638:	e7f9      	b.n	800b62e <memset+0x4>
	...

0800b63c <_localeconv_r>:
 800b63c:	4800      	ldr	r0, [pc, #0]	@ (800b640 <_localeconv_r+0x4>)
 800b63e:	4770      	bx	lr
 800b640:	20000158 	.word	0x20000158

0800b644 <_close_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d06      	ldr	r5, [pc, #24]	@ (800b660 <_close_r+0x1c>)
 800b648:	2300      	movs	r3, #0
 800b64a:	4604      	mov	r4, r0
 800b64c:	4608      	mov	r0, r1
 800b64e:	602b      	str	r3, [r5, #0]
 800b650:	f7f8 fda8 	bl	80041a4 <_close>
 800b654:	1c43      	adds	r3, r0, #1
 800b656:	d102      	bne.n	800b65e <_close_r+0x1a>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	b103      	cbz	r3, 800b65e <_close_r+0x1a>
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
 800b660:	20000ec0 	.word	0x20000ec0

0800b664 <_lseek_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d07      	ldr	r5, [pc, #28]	@ (800b684 <_lseek_r+0x20>)
 800b668:	4604      	mov	r4, r0
 800b66a:	4608      	mov	r0, r1
 800b66c:	4611      	mov	r1, r2
 800b66e:	2200      	movs	r2, #0
 800b670:	602a      	str	r2, [r5, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	f7f8 fdbd 	bl	80041f2 <_lseek>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d102      	bne.n	800b682 <_lseek_r+0x1e>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	b103      	cbz	r3, 800b682 <_lseek_r+0x1e>
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	20000ec0 	.word	0x20000ec0

0800b688 <_read_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4d07      	ldr	r5, [pc, #28]	@ (800b6a8 <_read_r+0x20>)
 800b68c:	4604      	mov	r4, r0
 800b68e:	4608      	mov	r0, r1
 800b690:	4611      	mov	r1, r2
 800b692:	2200      	movs	r2, #0
 800b694:	602a      	str	r2, [r5, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	f7f8 fd4b 	bl	8004132 <_read>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d102      	bne.n	800b6a6 <_read_r+0x1e>
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	b103      	cbz	r3, 800b6a6 <_read_r+0x1e>
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	20000ec0 	.word	0x20000ec0

0800b6ac <_write_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d07      	ldr	r5, [pc, #28]	@ (800b6cc <_write_r+0x20>)
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	4608      	mov	r0, r1
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	602a      	str	r2, [r5, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f7f8 fd56 	bl	800416c <_write>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d102      	bne.n	800b6ca <_write_r+0x1e>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b103      	cbz	r3, 800b6ca <_write_r+0x1e>
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	20000ec0 	.word	0x20000ec0

0800b6d0 <__errno>:
 800b6d0:	4b01      	ldr	r3, [pc, #4]	@ (800b6d8 <__errno+0x8>)
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	20000018 	.word	0x20000018

0800b6dc <__libc_init_array>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	4d0d      	ldr	r5, [pc, #52]	@ (800b714 <__libc_init_array+0x38>)
 800b6e0:	4c0d      	ldr	r4, [pc, #52]	@ (800b718 <__libc_init_array+0x3c>)
 800b6e2:	1b64      	subs	r4, r4, r5
 800b6e4:	10a4      	asrs	r4, r4, #2
 800b6e6:	2600      	movs	r6, #0
 800b6e8:	42a6      	cmp	r6, r4
 800b6ea:	d109      	bne.n	800b700 <__libc_init_array+0x24>
 800b6ec:	4d0b      	ldr	r5, [pc, #44]	@ (800b71c <__libc_init_array+0x40>)
 800b6ee:	4c0c      	ldr	r4, [pc, #48]	@ (800b720 <__libc_init_array+0x44>)
 800b6f0:	f001 fec6 	bl	800d480 <_init>
 800b6f4:	1b64      	subs	r4, r4, r5
 800b6f6:	10a4      	asrs	r4, r4, #2
 800b6f8:	2600      	movs	r6, #0
 800b6fa:	42a6      	cmp	r6, r4
 800b6fc:	d105      	bne.n	800b70a <__libc_init_array+0x2e>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	f855 3b04 	ldr.w	r3, [r5], #4
 800b704:	4798      	blx	r3
 800b706:	3601      	adds	r6, #1
 800b708:	e7ee      	b.n	800b6e8 <__libc_init_array+0xc>
 800b70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70e:	4798      	blx	r3
 800b710:	3601      	adds	r6, #1
 800b712:	e7f2      	b.n	800b6fa <__libc_init_array+0x1e>
 800b714:	0800ee70 	.word	0x0800ee70
 800b718:	0800ee70 	.word	0x0800ee70
 800b71c:	0800ee70 	.word	0x0800ee70
 800b720:	0800ee78 	.word	0x0800ee78

0800b724 <__retarget_lock_init_recursive>:
 800b724:	4770      	bx	lr

0800b726 <__retarget_lock_acquire_recursive>:
 800b726:	4770      	bx	lr

0800b728 <__retarget_lock_release_recursive>:
 800b728:	4770      	bx	lr

0800b72a <memcpy>:
 800b72a:	440a      	add	r2, r1
 800b72c:	4291      	cmp	r1, r2
 800b72e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b732:	d100      	bne.n	800b736 <memcpy+0xc>
 800b734:	4770      	bx	lr
 800b736:	b510      	push	{r4, lr}
 800b738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b73c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b740:	4291      	cmp	r1, r2
 800b742:	d1f9      	bne.n	800b738 <memcpy+0xe>
 800b744:	bd10      	pop	{r4, pc}

0800b746 <quorem>:
 800b746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74a:	6903      	ldr	r3, [r0, #16]
 800b74c:	690c      	ldr	r4, [r1, #16]
 800b74e:	42a3      	cmp	r3, r4
 800b750:	4607      	mov	r7, r0
 800b752:	db7e      	blt.n	800b852 <quorem+0x10c>
 800b754:	3c01      	subs	r4, #1
 800b756:	f101 0814 	add.w	r8, r1, #20
 800b75a:	00a3      	lsls	r3, r4, #2
 800b75c:	f100 0514 	add.w	r5, r0, #20
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b76c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b770:	3301      	adds	r3, #1
 800b772:	429a      	cmp	r2, r3
 800b774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b778:	fbb2 f6f3 	udiv	r6, r2, r3
 800b77c:	d32e      	bcc.n	800b7dc <quorem+0x96>
 800b77e:	f04f 0a00 	mov.w	sl, #0
 800b782:	46c4      	mov	ip, r8
 800b784:	46ae      	mov	lr, r5
 800b786:	46d3      	mov	fp, sl
 800b788:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b78c:	b298      	uxth	r0, r3
 800b78e:	fb06 a000 	mla	r0, r6, r0, sl
 800b792:	0c02      	lsrs	r2, r0, #16
 800b794:	0c1b      	lsrs	r3, r3, #16
 800b796:	fb06 2303 	mla	r3, r6, r3, r2
 800b79a:	f8de 2000 	ldr.w	r2, [lr]
 800b79e:	b280      	uxth	r0, r0
 800b7a0:	b292      	uxth	r2, r2
 800b7a2:	1a12      	subs	r2, r2, r0
 800b7a4:	445a      	add	r2, fp
 800b7a6:	f8de 0000 	ldr.w	r0, [lr]
 800b7aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7b8:	b292      	uxth	r2, r2
 800b7ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7be:	45e1      	cmp	r9, ip
 800b7c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b7c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7c8:	d2de      	bcs.n	800b788 <quorem+0x42>
 800b7ca:	9b00      	ldr	r3, [sp, #0]
 800b7cc:	58eb      	ldr	r3, [r5, r3]
 800b7ce:	b92b      	cbnz	r3, 800b7dc <quorem+0x96>
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	3b04      	subs	r3, #4
 800b7d4:	429d      	cmp	r5, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	d32f      	bcc.n	800b83a <quorem+0xf4>
 800b7da:	613c      	str	r4, [r7, #16]
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f001 f979 	bl	800cad4 <__mcmp>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	db25      	blt.n	800b832 <quorem+0xec>
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7ee:	f8d1 c000 	ldr.w	ip, [r1]
 800b7f2:	fa1f fe82 	uxth.w	lr, r2
 800b7f6:	fa1f f38c 	uxth.w	r3, ip
 800b7fa:	eba3 030e 	sub.w	r3, r3, lr
 800b7fe:	4403      	add	r3, r0
 800b800:	0c12      	lsrs	r2, r2, #16
 800b802:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b806:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b810:	45c1      	cmp	r9, r8
 800b812:	f841 3b04 	str.w	r3, [r1], #4
 800b816:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b81a:	d2e6      	bcs.n	800b7ea <quorem+0xa4>
 800b81c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b820:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b824:	b922      	cbnz	r2, 800b830 <quorem+0xea>
 800b826:	3b04      	subs	r3, #4
 800b828:	429d      	cmp	r5, r3
 800b82a:	461a      	mov	r2, r3
 800b82c:	d30b      	bcc.n	800b846 <quorem+0x100>
 800b82e:	613c      	str	r4, [r7, #16]
 800b830:	3601      	adds	r6, #1
 800b832:	4630      	mov	r0, r6
 800b834:	b003      	add	sp, #12
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	6812      	ldr	r2, [r2, #0]
 800b83c:	3b04      	subs	r3, #4
 800b83e:	2a00      	cmp	r2, #0
 800b840:	d1cb      	bne.n	800b7da <quorem+0x94>
 800b842:	3c01      	subs	r4, #1
 800b844:	e7c6      	b.n	800b7d4 <quorem+0x8e>
 800b846:	6812      	ldr	r2, [r2, #0]
 800b848:	3b04      	subs	r3, #4
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d1ef      	bne.n	800b82e <quorem+0xe8>
 800b84e:	3c01      	subs	r4, #1
 800b850:	e7ea      	b.n	800b828 <quorem+0xe2>
 800b852:	2000      	movs	r0, #0
 800b854:	e7ee      	b.n	800b834 <quorem+0xee>
	...

0800b858 <_dtoa_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	69c7      	ldr	r7, [r0, #28]
 800b85e:	b099      	sub	sp, #100	@ 0x64
 800b860:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b864:	ec55 4b10 	vmov	r4, r5, d0
 800b868:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b86a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b86c:	4683      	mov	fp, r0
 800b86e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b870:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b872:	b97f      	cbnz	r7, 800b894 <_dtoa_r+0x3c>
 800b874:	2010      	movs	r0, #16
 800b876:	f000 fdfd 	bl	800c474 <malloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b880:	b920      	cbnz	r0, 800b88c <_dtoa_r+0x34>
 800b882:	4ba7      	ldr	r3, [pc, #668]	@ (800bb20 <_dtoa_r+0x2c8>)
 800b884:	21ef      	movs	r1, #239	@ 0xef
 800b886:	48a7      	ldr	r0, [pc, #668]	@ (800bb24 <_dtoa_r+0x2cc>)
 800b888:	f001 fcc6 	bl	800d218 <__assert_func>
 800b88c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b890:	6007      	str	r7, [r0, #0]
 800b892:	60c7      	str	r7, [r0, #12]
 800b894:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b898:	6819      	ldr	r1, [r3, #0]
 800b89a:	b159      	cbz	r1, 800b8b4 <_dtoa_r+0x5c>
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	604a      	str	r2, [r1, #4]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	4093      	lsls	r3, r2
 800b8a4:	608b      	str	r3, [r1, #8]
 800b8a6:	4658      	mov	r0, fp
 800b8a8:	f000 feda 	bl	800c660 <_Bfree>
 800b8ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	1e2b      	subs	r3, r5, #0
 800b8b6:	bfb9      	ittee	lt
 800b8b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8bc:	9303      	strlt	r3, [sp, #12]
 800b8be:	2300      	movge	r3, #0
 800b8c0:	6033      	strge	r3, [r6, #0]
 800b8c2:	9f03      	ldr	r7, [sp, #12]
 800b8c4:	4b98      	ldr	r3, [pc, #608]	@ (800bb28 <_dtoa_r+0x2d0>)
 800b8c6:	bfbc      	itt	lt
 800b8c8:	2201      	movlt	r2, #1
 800b8ca:	6032      	strlt	r2, [r6, #0]
 800b8cc:	43bb      	bics	r3, r7
 800b8ce:	d112      	bne.n	800b8f6 <_dtoa_r+0x9e>
 800b8d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8dc:	4323      	orrs	r3, r4
 800b8de:	f000 854d 	beq.w	800c37c <_dtoa_r+0xb24>
 800b8e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb3c <_dtoa_r+0x2e4>
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 854f 	beq.w	800c38c <_dtoa_r+0xb34>
 800b8ee:	f10a 0303 	add.w	r3, sl, #3
 800b8f2:	f000 bd49 	b.w	800c388 <_dtoa_r+0xb30>
 800b8f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	ec51 0b17 	vmov	r0, r1, d7
 800b900:	2300      	movs	r3, #0
 800b902:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b906:	f7f5 f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800b90a:	4680      	mov	r8, r0
 800b90c:	b158      	cbz	r0, 800b926 <_dtoa_r+0xce>
 800b90e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b910:	2301      	movs	r3, #1
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b916:	b113      	cbz	r3, 800b91e <_dtoa_r+0xc6>
 800b918:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b91a:	4b84      	ldr	r3, [pc, #528]	@ (800bb2c <_dtoa_r+0x2d4>)
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb40 <_dtoa_r+0x2e8>
 800b922:	f000 bd33 	b.w	800c38c <_dtoa_r+0xb34>
 800b926:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b92a:	aa16      	add	r2, sp, #88	@ 0x58
 800b92c:	a917      	add	r1, sp, #92	@ 0x5c
 800b92e:	4658      	mov	r0, fp
 800b930:	f001 f980 	bl	800cc34 <__d2b>
 800b934:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b938:	4681      	mov	r9, r0
 800b93a:	2e00      	cmp	r6, #0
 800b93c:	d077      	beq.n	800ba2e <_dtoa_r+0x1d6>
 800b93e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b940:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b94c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b950:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b954:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b958:	4619      	mov	r1, r3
 800b95a:	2200      	movs	r2, #0
 800b95c:	4b74      	ldr	r3, [pc, #464]	@ (800bb30 <_dtoa_r+0x2d8>)
 800b95e:	f7f4 fc93 	bl	8000288 <__aeabi_dsub>
 800b962:	a369      	add	r3, pc, #420	@ (adr r3, 800bb08 <_dtoa_r+0x2b0>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	a368      	add	r3, pc, #416	@ (adr r3, 800bb10 <_dtoa_r+0x2b8>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fc8b 	bl	800028c <__adddf3>
 800b976:	4604      	mov	r4, r0
 800b978:	4630      	mov	r0, r6
 800b97a:	460d      	mov	r5, r1
 800b97c:	f7f4 fdd2 	bl	8000524 <__aeabi_i2d>
 800b980:	a365      	add	r3, pc, #404	@ (adr r3, 800bb18 <_dtoa_r+0x2c0>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fe37 	bl	80005f8 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	f7f4 fc7b 	bl	800028c <__adddf3>
 800b996:	4604      	mov	r4, r0
 800b998:	460d      	mov	r5, r1
 800b99a:	f7f5 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	f7f5 f898 	bl	8000adc <__aeabi_dcmplt>
 800b9ac:	b140      	cbz	r0, 800b9c0 <_dtoa_r+0x168>
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	f7f4 fdb8 	bl	8000524 <__aeabi_i2d>
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	462b      	mov	r3, r5
 800b9b8:	f7f5 f886 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9bc:	b900      	cbnz	r0, 800b9c0 <_dtoa_r+0x168>
 800b9be:	3f01      	subs	r7, #1
 800b9c0:	2f16      	cmp	r7, #22
 800b9c2:	d851      	bhi.n	800ba68 <_dtoa_r+0x210>
 800b9c4:	4b5b      	ldr	r3, [pc, #364]	@ (800bb34 <_dtoa_r+0x2dc>)
 800b9c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9d2:	f7f5 f883 	bl	8000adc <__aeabi_dcmplt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d048      	beq.n	800ba6c <_dtoa_r+0x214>
 800b9da:	3f01      	subs	r7, #1
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9e2:	1b9b      	subs	r3, r3, r6
 800b9e4:	1e5a      	subs	r2, r3, #1
 800b9e6:	bf44      	itt	mi
 800b9e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9ec:	2300      	movmi	r3, #0
 800b9ee:	9208      	str	r2, [sp, #32]
 800b9f0:	bf54      	ite	pl
 800b9f2:	f04f 0800 	movpl.w	r8, #0
 800b9f6:	9308      	strmi	r3, [sp, #32]
 800b9f8:	2f00      	cmp	r7, #0
 800b9fa:	db39      	blt.n	800ba70 <_dtoa_r+0x218>
 800b9fc:	9b08      	ldr	r3, [sp, #32]
 800b9fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba00:	443b      	add	r3, r7
 800ba02:	9308      	str	r3, [sp, #32]
 800ba04:	2300      	movs	r3, #0
 800ba06:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0a:	2b09      	cmp	r3, #9
 800ba0c:	d864      	bhi.n	800bad8 <_dtoa_r+0x280>
 800ba0e:	2b05      	cmp	r3, #5
 800ba10:	bfc4      	itt	gt
 800ba12:	3b04      	subgt	r3, #4
 800ba14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba18:	f1a3 0302 	sub.w	r3, r3, #2
 800ba1c:	bfcc      	ite	gt
 800ba1e:	2400      	movgt	r4, #0
 800ba20:	2401      	movle	r4, #1
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d863      	bhi.n	800baee <_dtoa_r+0x296>
 800ba26:	e8df f003 	tbb	[pc, r3]
 800ba2a:	372a      	.short	0x372a
 800ba2c:	5535      	.short	0x5535
 800ba2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba32:	441e      	add	r6, r3
 800ba34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba38:	2b20      	cmp	r3, #32
 800ba3a:	bfc1      	itttt	gt
 800ba3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba40:	409f      	lslgt	r7, r3
 800ba42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba4a:	bfd6      	itet	le
 800ba4c:	f1c3 0320 	rsble	r3, r3, #32
 800ba50:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba54:	fa04 f003 	lslle.w	r0, r4, r3
 800ba58:	f7f4 fd54 	bl	8000504 <__aeabi_ui2d>
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba62:	3e01      	subs	r6, #1
 800ba64:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba66:	e777      	b.n	800b958 <_dtoa_r+0x100>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e7b8      	b.n	800b9de <_dtoa_r+0x186>
 800ba6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba6e:	e7b7      	b.n	800b9e0 <_dtoa_r+0x188>
 800ba70:	427b      	negs	r3, r7
 800ba72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba74:	2300      	movs	r3, #0
 800ba76:	eba8 0807 	sub.w	r8, r8, r7
 800ba7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba7c:	e7c4      	b.n	800ba08 <_dtoa_r+0x1b0>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dc35      	bgt.n	800baf4 <_dtoa_r+0x29c>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	9307      	str	r3, [sp, #28]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba92:	e00b      	b.n	800baac <_dtoa_r+0x254>
 800ba94:	2301      	movs	r3, #1
 800ba96:	e7f3      	b.n	800ba80 <_dtoa_r+0x228>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba9e:	18fb      	adds	r3, r7, r3
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	9307      	str	r3, [sp, #28]
 800baa8:	bfb8      	it	lt
 800baaa:	2301      	movlt	r3, #1
 800baac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bab0:	2100      	movs	r1, #0
 800bab2:	2204      	movs	r2, #4
 800bab4:	f102 0514 	add.w	r5, r2, #20
 800bab8:	429d      	cmp	r5, r3
 800baba:	d91f      	bls.n	800bafc <_dtoa_r+0x2a4>
 800babc:	6041      	str	r1, [r0, #4]
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 fd8e 	bl	800c5e0 <_Balloc>
 800bac4:	4682      	mov	sl, r0
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d13c      	bne.n	800bb44 <_dtoa_r+0x2ec>
 800baca:	4b1b      	ldr	r3, [pc, #108]	@ (800bb38 <_dtoa_r+0x2e0>)
 800bacc:	4602      	mov	r2, r0
 800bace:	f240 11af 	movw	r1, #431	@ 0x1af
 800bad2:	e6d8      	b.n	800b886 <_dtoa_r+0x2e>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e7e0      	b.n	800ba9a <_dtoa_r+0x242>
 800bad8:	2401      	movs	r4, #1
 800bada:	2300      	movs	r3, #0
 800badc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bade:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	9307      	str	r3, [sp, #28]
 800bae8:	2200      	movs	r2, #0
 800baea:	2312      	movs	r3, #18
 800baec:	e7d0      	b.n	800ba90 <_dtoa_r+0x238>
 800baee:	2301      	movs	r3, #1
 800baf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf2:	e7f5      	b.n	800bae0 <_dtoa_r+0x288>
 800baf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	9307      	str	r3, [sp, #28]
 800bafa:	e7d7      	b.n	800baac <_dtoa_r+0x254>
 800bafc:	3101      	adds	r1, #1
 800bafe:	0052      	lsls	r2, r2, #1
 800bb00:	e7d8      	b.n	800bab4 <_dtoa_r+0x25c>
 800bb02:	bf00      	nop
 800bb04:	f3af 8000 	nop.w
 800bb08:	636f4361 	.word	0x636f4361
 800bb0c:	3fd287a7 	.word	0x3fd287a7
 800bb10:	8b60c8b3 	.word	0x8b60c8b3
 800bb14:	3fc68a28 	.word	0x3fc68a28
 800bb18:	509f79fb 	.word	0x509f79fb
 800bb1c:	3fd34413 	.word	0x3fd34413
 800bb20:	0800eb35 	.word	0x0800eb35
 800bb24:	0800eb4c 	.word	0x0800eb4c
 800bb28:	7ff00000 	.word	0x7ff00000
 800bb2c:	0800eb05 	.word	0x0800eb05
 800bb30:	3ff80000 	.word	0x3ff80000
 800bb34:	0800ec48 	.word	0x0800ec48
 800bb38:	0800eba4 	.word	0x0800eba4
 800bb3c:	0800eb31 	.word	0x0800eb31
 800bb40:	0800eb04 	.word	0x0800eb04
 800bb44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb48:	6018      	str	r0, [r3, #0]
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	2b0e      	cmp	r3, #14
 800bb4e:	f200 80a4 	bhi.w	800bc9a <_dtoa_r+0x442>
 800bb52:	2c00      	cmp	r4, #0
 800bb54:	f000 80a1 	beq.w	800bc9a <_dtoa_r+0x442>
 800bb58:	2f00      	cmp	r7, #0
 800bb5a:	dd33      	ble.n	800bbc4 <_dtoa_r+0x36c>
 800bb5c:	4bad      	ldr	r3, [pc, #692]	@ (800be14 <_dtoa_r+0x5bc>)
 800bb5e:	f007 020f 	and.w	r2, r7, #15
 800bb62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb66:	ed93 7b00 	vldr	d7, [r3]
 800bb6a:	05f8      	lsls	r0, r7, #23
 800bb6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb74:	d516      	bpl.n	800bba4 <_dtoa_r+0x34c>
 800bb76:	4ba8      	ldr	r3, [pc, #672]	@ (800be18 <_dtoa_r+0x5c0>)
 800bb78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb80:	f7f4 fe64 	bl	800084c <__aeabi_ddiv>
 800bb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb88:	f004 040f 	and.w	r4, r4, #15
 800bb8c:	2603      	movs	r6, #3
 800bb8e:	4da2      	ldr	r5, [pc, #648]	@ (800be18 <_dtoa_r+0x5c0>)
 800bb90:	b954      	cbnz	r4, 800bba8 <_dtoa_r+0x350>
 800bb92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9a:	f7f4 fe57 	bl	800084c <__aeabi_ddiv>
 800bb9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bba2:	e028      	b.n	800bbf6 <_dtoa_r+0x39e>
 800bba4:	2602      	movs	r6, #2
 800bba6:	e7f2      	b.n	800bb8e <_dtoa_r+0x336>
 800bba8:	07e1      	lsls	r1, r4, #31
 800bbaa:	d508      	bpl.n	800bbbe <_dtoa_r+0x366>
 800bbac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbbc:	3601      	adds	r6, #1
 800bbbe:	1064      	asrs	r4, r4, #1
 800bbc0:	3508      	adds	r5, #8
 800bbc2:	e7e5      	b.n	800bb90 <_dtoa_r+0x338>
 800bbc4:	f000 80d2 	beq.w	800bd6c <_dtoa_r+0x514>
 800bbc8:	427c      	negs	r4, r7
 800bbca:	4b92      	ldr	r3, [pc, #584]	@ (800be14 <_dtoa_r+0x5bc>)
 800bbcc:	4d92      	ldr	r5, [pc, #584]	@ (800be18 <_dtoa_r+0x5c0>)
 800bbce:	f004 020f 	and.w	r2, r4, #15
 800bbd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbde:	f7f4 fd0b 	bl	80005f8 <__aeabi_dmul>
 800bbe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbe6:	1124      	asrs	r4, r4, #4
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2602      	movs	r6, #2
 800bbec:	2c00      	cmp	r4, #0
 800bbee:	f040 80b2 	bne.w	800bd56 <_dtoa_r+0x4fe>
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1d3      	bne.n	800bb9e <_dtoa_r+0x346>
 800bbf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 80b7 	beq.w	800bd70 <_dtoa_r+0x518>
 800bc02:	4b86      	ldr	r3, [pc, #536]	@ (800be1c <_dtoa_r+0x5c4>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	4620      	mov	r0, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7f4 ff67 	bl	8000adc <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f000 80ae 	beq.w	800bd70 <_dtoa_r+0x518>
 800bc14:	9b07      	ldr	r3, [sp, #28]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 80aa 	beq.w	800bd70 <_dtoa_r+0x518>
 800bc1c:	9b00      	ldr	r3, [sp, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	dd37      	ble.n	800bc92 <_dtoa_r+0x43a>
 800bc22:	1e7b      	subs	r3, r7, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	4620      	mov	r0, r4
 800bc28:	4b7d      	ldr	r3, [pc, #500]	@ (800be20 <_dtoa_r+0x5c8>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 fce3 	bl	80005f8 <__aeabi_dmul>
 800bc32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc36:	9c00      	ldr	r4, [sp, #0]
 800bc38:	3601      	adds	r6, #1
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7f4 fc72 	bl	8000524 <__aeabi_i2d>
 800bc40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	4b76      	ldr	r3, [pc, #472]	@ (800be24 <_dtoa_r+0x5cc>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f7f4 fb1e 	bl	800028c <__adddf3>
 800bc50:	4605      	mov	r5, r0
 800bc52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	f040 808d 	bne.w	800bd76 <_dtoa_r+0x51e>
 800bc5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc60:	4b71      	ldr	r3, [pc, #452]	@ (800be28 <_dtoa_r+0x5d0>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	f7f4 fb10 	bl	8000288 <__aeabi_dsub>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc70:	462a      	mov	r2, r5
 800bc72:	4633      	mov	r3, r6
 800bc74:	f7f4 ff50 	bl	8000b18 <__aeabi_dcmpgt>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f040 828b 	bne.w	800c194 <_dtoa_r+0x93c>
 800bc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc82:	462a      	mov	r2, r5
 800bc84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc88:	f7f4 ff28 	bl	8000adc <__aeabi_dcmplt>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f040 8128 	bne.w	800bee2 <_dtoa_r+0x68a>
 800bc92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f2c0 815a 	blt.w	800bf56 <_dtoa_r+0x6fe>
 800bca2:	2f0e      	cmp	r7, #14
 800bca4:	f300 8157 	bgt.w	800bf56 <_dtoa_r+0x6fe>
 800bca8:	4b5a      	ldr	r3, [pc, #360]	@ (800be14 <_dtoa_r+0x5bc>)
 800bcaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcae:	ed93 7b00 	vldr	d7, [r3]
 800bcb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	ed8d 7b00 	vstr	d7, [sp]
 800bcba:	da03      	bge.n	800bcc4 <_dtoa_r+0x46c>
 800bcbc:	9b07      	ldr	r3, [sp, #28]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f340 8101 	ble.w	800bec6 <_dtoa_r+0x66e>
 800bcc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcc8:	4656      	mov	r6, sl
 800bcca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f7f4 fdbb 	bl	800084c <__aeabi_ddiv>
 800bcd6:	f7f4 ff3f 	bl	8000b58 <__aeabi_d2iz>
 800bcda:	4680      	mov	r8, r0
 800bcdc:	f7f4 fc22 	bl	8000524 <__aeabi_i2d>
 800bce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bce4:	f7f4 fc88 	bl	80005f8 <__aeabi_dmul>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4620      	mov	r0, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcf4:	f7f4 fac8 	bl	8000288 <__aeabi_dsub>
 800bcf8:	f806 4b01 	strb.w	r4, [r6], #1
 800bcfc:	9d07      	ldr	r5, [sp, #28]
 800bcfe:	eba6 040a 	sub.w	r4, r6, sl
 800bd02:	42a5      	cmp	r5, r4
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	f040 8117 	bne.w	800bf3a <_dtoa_r+0x6e2>
 800bd0c:	f7f4 fabe 	bl	800028c <__adddf3>
 800bd10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd14:	4604      	mov	r4, r0
 800bd16:	460d      	mov	r5, r1
 800bd18:	f7f4 fefe 	bl	8000b18 <__aeabi_dcmpgt>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f040 80f9 	bne.w	800bf14 <_dtoa_r+0x6bc>
 800bd22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd2e:	b118      	cbz	r0, 800bd38 <_dtoa_r+0x4e0>
 800bd30:	f018 0f01 	tst.w	r8, #1
 800bd34:	f040 80ee 	bne.w	800bf14 <_dtoa_r+0x6bc>
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4658      	mov	r0, fp
 800bd3c:	f000 fc90 	bl	800c660 <_Bfree>
 800bd40:	2300      	movs	r3, #0
 800bd42:	7033      	strb	r3, [r6, #0]
 800bd44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd46:	3701      	adds	r7, #1
 800bd48:	601f      	str	r7, [r3, #0]
 800bd4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 831d 	beq.w	800c38c <_dtoa_r+0xb34>
 800bd52:	601e      	str	r6, [r3, #0]
 800bd54:	e31a      	b.n	800c38c <_dtoa_r+0xb34>
 800bd56:	07e2      	lsls	r2, r4, #31
 800bd58:	d505      	bpl.n	800bd66 <_dtoa_r+0x50e>
 800bd5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd5e:	f7f4 fc4b 	bl	80005f8 <__aeabi_dmul>
 800bd62:	3601      	adds	r6, #1
 800bd64:	2301      	movs	r3, #1
 800bd66:	1064      	asrs	r4, r4, #1
 800bd68:	3508      	adds	r5, #8
 800bd6a:	e73f      	b.n	800bbec <_dtoa_r+0x394>
 800bd6c:	2602      	movs	r6, #2
 800bd6e:	e742      	b.n	800bbf6 <_dtoa_r+0x39e>
 800bd70:	9c07      	ldr	r4, [sp, #28]
 800bd72:	9704      	str	r7, [sp, #16]
 800bd74:	e761      	b.n	800bc3a <_dtoa_r+0x3e2>
 800bd76:	4b27      	ldr	r3, [pc, #156]	@ (800be14 <_dtoa_r+0x5bc>)
 800bd78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd82:	4454      	add	r4, sl
 800bd84:	2900      	cmp	r1, #0
 800bd86:	d053      	beq.n	800be30 <_dtoa_r+0x5d8>
 800bd88:	4928      	ldr	r1, [pc, #160]	@ (800be2c <_dtoa_r+0x5d4>)
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	f7f4 fd5e 	bl	800084c <__aeabi_ddiv>
 800bd90:	4633      	mov	r3, r6
 800bd92:	462a      	mov	r2, r5
 800bd94:	f7f4 fa78 	bl	8000288 <__aeabi_dsub>
 800bd98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd9c:	4656      	mov	r6, sl
 800bd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda2:	f7f4 fed9 	bl	8000b58 <__aeabi_d2iz>
 800bda6:	4605      	mov	r5, r0
 800bda8:	f7f4 fbbc 	bl	8000524 <__aeabi_i2d>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb4:	f7f4 fa68 	bl	8000288 <__aeabi_dsub>
 800bdb8:	3530      	adds	r5, #48	@ 0x30
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdc2:	f806 5b01 	strb.w	r5, [r6], #1
 800bdc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdca:	f7f4 fe87 	bl	8000adc <__aeabi_dcmplt>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d171      	bne.n	800beb6 <_dtoa_r+0x65e>
 800bdd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdd6:	4911      	ldr	r1, [pc, #68]	@ (800be1c <_dtoa_r+0x5c4>)
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f7f4 fa55 	bl	8000288 <__aeabi_dsub>
 800bdde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bde2:	f7f4 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f040 8095 	bne.w	800bf16 <_dtoa_r+0x6be>
 800bdec:	42a6      	cmp	r6, r4
 800bdee:	f43f af50 	beq.w	800bc92 <_dtoa_r+0x43a>
 800bdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdf6:	4b0a      	ldr	r3, [pc, #40]	@ (800be20 <_dtoa_r+0x5c8>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f7f4 fbfd 	bl	80005f8 <__aeabi_dmul>
 800bdfe:	4b08      	ldr	r3, [pc, #32]	@ (800be20 <_dtoa_r+0x5c8>)
 800be00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be04:	2200      	movs	r2, #0
 800be06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0a:	f7f4 fbf5 	bl	80005f8 <__aeabi_dmul>
 800be0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be12:	e7c4      	b.n	800bd9e <_dtoa_r+0x546>
 800be14:	0800ec48 	.word	0x0800ec48
 800be18:	0800ec20 	.word	0x0800ec20
 800be1c:	3ff00000 	.word	0x3ff00000
 800be20:	40240000 	.word	0x40240000
 800be24:	401c0000 	.word	0x401c0000
 800be28:	40140000 	.word	0x40140000
 800be2c:	3fe00000 	.word	0x3fe00000
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	f7f4 fbe0 	bl	80005f8 <__aeabi_dmul>
 800be38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800be3e:	4656      	mov	r6, sl
 800be40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be44:	f7f4 fe88 	bl	8000b58 <__aeabi_d2iz>
 800be48:	4605      	mov	r5, r0
 800be4a:	f7f4 fb6b 	bl	8000524 <__aeabi_i2d>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be56:	f7f4 fa17 	bl	8000288 <__aeabi_dsub>
 800be5a:	3530      	adds	r5, #48	@ 0x30
 800be5c:	f806 5b01 	strb.w	r5, [r6], #1
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	42a6      	cmp	r6, r4
 800be66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be6a:	f04f 0200 	mov.w	r2, #0
 800be6e:	d124      	bne.n	800beba <_dtoa_r+0x662>
 800be70:	4bac      	ldr	r3, [pc, #688]	@ (800c124 <_dtoa_r+0x8cc>)
 800be72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be76:	f7f4 fa09 	bl	800028c <__adddf3>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be82:	f7f4 fe49 	bl	8000b18 <__aeabi_dcmpgt>
 800be86:	2800      	cmp	r0, #0
 800be88:	d145      	bne.n	800bf16 <_dtoa_r+0x6be>
 800be8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be8e:	49a5      	ldr	r1, [pc, #660]	@ (800c124 <_dtoa_r+0x8cc>)
 800be90:	2000      	movs	r0, #0
 800be92:	f7f4 f9f9 	bl	8000288 <__aeabi_dsub>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9e:	f7f4 fe1d 	bl	8000adc <__aeabi_dcmplt>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	f43f aef5 	beq.w	800bc92 <_dtoa_r+0x43a>
 800bea8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800beaa:	1e73      	subs	r3, r6, #1
 800beac:	9315      	str	r3, [sp, #84]	@ 0x54
 800beae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800beb2:	2b30      	cmp	r3, #48	@ 0x30
 800beb4:	d0f8      	beq.n	800bea8 <_dtoa_r+0x650>
 800beb6:	9f04      	ldr	r7, [sp, #16]
 800beb8:	e73e      	b.n	800bd38 <_dtoa_r+0x4e0>
 800beba:	4b9b      	ldr	r3, [pc, #620]	@ (800c128 <_dtoa_r+0x8d0>)
 800bebc:	f7f4 fb9c 	bl	80005f8 <__aeabi_dmul>
 800bec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bec4:	e7bc      	b.n	800be40 <_dtoa_r+0x5e8>
 800bec6:	d10c      	bne.n	800bee2 <_dtoa_r+0x68a>
 800bec8:	4b98      	ldr	r3, [pc, #608]	@ (800c12c <_dtoa_r+0x8d4>)
 800beca:	2200      	movs	r2, #0
 800becc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bed0:	f7f4 fb92 	bl	80005f8 <__aeabi_dmul>
 800bed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bed8:	f7f4 fe14 	bl	8000b04 <__aeabi_dcmpge>
 800bedc:	2800      	cmp	r0, #0
 800bede:	f000 8157 	beq.w	800c190 <_dtoa_r+0x938>
 800bee2:	2400      	movs	r4, #0
 800bee4:	4625      	mov	r5, r4
 800bee6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee8:	43db      	mvns	r3, r3
 800beea:	9304      	str	r3, [sp, #16]
 800beec:	4656      	mov	r6, sl
 800beee:	2700      	movs	r7, #0
 800bef0:	4621      	mov	r1, r4
 800bef2:	4658      	mov	r0, fp
 800bef4:	f000 fbb4 	bl	800c660 <_Bfree>
 800bef8:	2d00      	cmp	r5, #0
 800befa:	d0dc      	beq.n	800beb6 <_dtoa_r+0x65e>
 800befc:	b12f      	cbz	r7, 800bf0a <_dtoa_r+0x6b2>
 800befe:	42af      	cmp	r7, r5
 800bf00:	d003      	beq.n	800bf0a <_dtoa_r+0x6b2>
 800bf02:	4639      	mov	r1, r7
 800bf04:	4658      	mov	r0, fp
 800bf06:	f000 fbab 	bl	800c660 <_Bfree>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4658      	mov	r0, fp
 800bf0e:	f000 fba7 	bl	800c660 <_Bfree>
 800bf12:	e7d0      	b.n	800beb6 <_dtoa_r+0x65e>
 800bf14:	9704      	str	r7, [sp, #16]
 800bf16:	4633      	mov	r3, r6
 800bf18:	461e      	mov	r6, r3
 800bf1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf1e:	2a39      	cmp	r2, #57	@ 0x39
 800bf20:	d107      	bne.n	800bf32 <_dtoa_r+0x6da>
 800bf22:	459a      	cmp	sl, r3
 800bf24:	d1f8      	bne.n	800bf18 <_dtoa_r+0x6c0>
 800bf26:	9a04      	ldr	r2, [sp, #16]
 800bf28:	3201      	adds	r2, #1
 800bf2a:	9204      	str	r2, [sp, #16]
 800bf2c:	2230      	movs	r2, #48	@ 0x30
 800bf2e:	f88a 2000 	strb.w	r2, [sl]
 800bf32:	781a      	ldrb	r2, [r3, #0]
 800bf34:	3201      	adds	r2, #1
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	e7bd      	b.n	800beb6 <_dtoa_r+0x65e>
 800bf3a:	4b7b      	ldr	r3, [pc, #492]	@ (800c128 <_dtoa_r+0x8d0>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f7f4 fb5b 	bl	80005f8 <__aeabi_dmul>
 800bf42:	2200      	movs	r2, #0
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	460d      	mov	r5, r1
 800bf4a:	f7f4 fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f43f aebb 	beq.w	800bcca <_dtoa_r+0x472>
 800bf54:	e6f0      	b.n	800bd38 <_dtoa_r+0x4e0>
 800bf56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	f000 80db 	beq.w	800c114 <_dtoa_r+0x8bc>
 800bf5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf60:	2a01      	cmp	r2, #1
 800bf62:	f300 80bf 	bgt.w	800c0e4 <_dtoa_r+0x88c>
 800bf66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	f000 80b7 	beq.w	800c0dc <_dtoa_r+0x884>
 800bf6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf74:	4646      	mov	r6, r8
 800bf76:	9a08      	ldr	r2, [sp, #32]
 800bf78:	2101      	movs	r1, #1
 800bf7a:	441a      	add	r2, r3
 800bf7c:	4658      	mov	r0, fp
 800bf7e:	4498      	add	r8, r3
 800bf80:	9208      	str	r2, [sp, #32]
 800bf82:	f000 fc21 	bl	800c7c8 <__i2b>
 800bf86:	4605      	mov	r5, r0
 800bf88:	b15e      	cbz	r6, 800bfa2 <_dtoa_r+0x74a>
 800bf8a:	9b08      	ldr	r3, [sp, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dd08      	ble.n	800bfa2 <_dtoa_r+0x74a>
 800bf90:	42b3      	cmp	r3, r6
 800bf92:	9a08      	ldr	r2, [sp, #32]
 800bf94:	bfa8      	it	ge
 800bf96:	4633      	movge	r3, r6
 800bf98:	eba8 0803 	sub.w	r8, r8, r3
 800bf9c:	1af6      	subs	r6, r6, r3
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfa4:	b1f3      	cbz	r3, 800bfe4 <_dtoa_r+0x78c>
 800bfa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 80b7 	beq.w	800c11c <_dtoa_r+0x8c4>
 800bfae:	b18c      	cbz	r4, 800bfd4 <_dtoa_r+0x77c>
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	4658      	mov	r0, fp
 800bfb6:	f000 fcc7 	bl	800c948 <__pow5mult>
 800bfba:	464a      	mov	r2, r9
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	4658      	mov	r0, fp
 800bfc2:	f000 fc17 	bl	800c7f4 <__multiply>
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	9004      	str	r0, [sp, #16]
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f000 fb48 	bl	800c660 <_Bfree>
 800bfd0:	9b04      	ldr	r3, [sp, #16]
 800bfd2:	4699      	mov	r9, r3
 800bfd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfd6:	1b1a      	subs	r2, r3, r4
 800bfd8:	d004      	beq.n	800bfe4 <_dtoa_r+0x78c>
 800bfda:	4649      	mov	r1, r9
 800bfdc:	4658      	mov	r0, fp
 800bfde:	f000 fcb3 	bl	800c948 <__pow5mult>
 800bfe2:	4681      	mov	r9, r0
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	4658      	mov	r0, fp
 800bfe8:	f000 fbee 	bl	800c7c8 <__i2b>
 800bfec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfee:	4604      	mov	r4, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 81cf 	beq.w	800c394 <_dtoa_r+0xb3c>
 800bff6:	461a      	mov	r2, r3
 800bff8:	4601      	mov	r1, r0
 800bffa:	4658      	mov	r0, fp
 800bffc:	f000 fca4 	bl	800c948 <__pow5mult>
 800c000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c002:	2b01      	cmp	r3, #1
 800c004:	4604      	mov	r4, r0
 800c006:	f300 8095 	bgt.w	800c134 <_dtoa_r+0x8dc>
 800c00a:	9b02      	ldr	r3, [sp, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f040 8087 	bne.w	800c120 <_dtoa_r+0x8c8>
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f040 8089 	bne.w	800c130 <_dtoa_r+0x8d8>
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c024:	0d1b      	lsrs	r3, r3, #20
 800c026:	051b      	lsls	r3, r3, #20
 800c028:	b12b      	cbz	r3, 800c036 <_dtoa_r+0x7de>
 800c02a:	9b08      	ldr	r3, [sp, #32]
 800c02c:	3301      	adds	r3, #1
 800c02e:	9308      	str	r3, [sp, #32]
 800c030:	f108 0801 	add.w	r8, r8, #1
 800c034:	2301      	movs	r3, #1
 800c036:	930a      	str	r3, [sp, #40]	@ 0x28
 800c038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 81b0 	beq.w	800c3a0 <_dtoa_r+0xb48>
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c046:	6918      	ldr	r0, [r3, #16]
 800c048:	f000 fb72 	bl	800c730 <__hi0bits>
 800c04c:	f1c0 0020 	rsb	r0, r0, #32
 800c050:	9b08      	ldr	r3, [sp, #32]
 800c052:	4418      	add	r0, r3
 800c054:	f010 001f 	ands.w	r0, r0, #31
 800c058:	d077      	beq.n	800c14a <_dtoa_r+0x8f2>
 800c05a:	f1c0 0320 	rsb	r3, r0, #32
 800c05e:	2b04      	cmp	r3, #4
 800c060:	dd6b      	ble.n	800c13a <_dtoa_r+0x8e2>
 800c062:	9b08      	ldr	r3, [sp, #32]
 800c064:	f1c0 001c 	rsb	r0, r0, #28
 800c068:	4403      	add	r3, r0
 800c06a:	4480      	add	r8, r0
 800c06c:	4406      	add	r6, r0
 800c06e:	9308      	str	r3, [sp, #32]
 800c070:	f1b8 0f00 	cmp.w	r8, #0
 800c074:	dd05      	ble.n	800c082 <_dtoa_r+0x82a>
 800c076:	4649      	mov	r1, r9
 800c078:	4642      	mov	r2, r8
 800c07a:	4658      	mov	r0, fp
 800c07c:	f000 fcbe 	bl	800c9fc <__lshift>
 800c080:	4681      	mov	r9, r0
 800c082:	9b08      	ldr	r3, [sp, #32]
 800c084:	2b00      	cmp	r3, #0
 800c086:	dd05      	ble.n	800c094 <_dtoa_r+0x83c>
 800c088:	4621      	mov	r1, r4
 800c08a:	461a      	mov	r2, r3
 800c08c:	4658      	mov	r0, fp
 800c08e:	f000 fcb5 	bl	800c9fc <__lshift>
 800c092:	4604      	mov	r4, r0
 800c094:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c096:	2b00      	cmp	r3, #0
 800c098:	d059      	beq.n	800c14e <_dtoa_r+0x8f6>
 800c09a:	4621      	mov	r1, r4
 800c09c:	4648      	mov	r0, r9
 800c09e:	f000 fd19 	bl	800cad4 <__mcmp>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	da53      	bge.n	800c14e <_dtoa_r+0x8f6>
 800c0a6:	1e7b      	subs	r3, r7, #1
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	220a      	movs	r2, #10
 800c0b0:	4658      	mov	r0, fp
 800c0b2:	f000 faf7 	bl	800c6a4 <__multadd>
 800c0b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b8:	4681      	mov	r9, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 8172 	beq.w	800c3a4 <_dtoa_r+0xb4c>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	220a      	movs	r2, #10
 800c0c6:	4658      	mov	r0, fp
 800c0c8:	f000 faec 	bl	800c6a4 <__multadd>
 800c0cc:	9b00      	ldr	r3, [sp, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	dc67      	bgt.n	800c1a4 <_dtoa_r+0x94c>
 800c0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	dc41      	bgt.n	800c15e <_dtoa_r+0x906>
 800c0da:	e063      	b.n	800c1a4 <_dtoa_r+0x94c>
 800c0dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0e2:	e746      	b.n	800bf72 <_dtoa_r+0x71a>
 800c0e4:	9b07      	ldr	r3, [sp, #28]
 800c0e6:	1e5c      	subs	r4, r3, #1
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0ea:	42a3      	cmp	r3, r4
 800c0ec:	bfbf      	itttt	lt
 800c0ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0f4:	1ae3      	sublt	r3, r4, r3
 800c0f6:	bfb4      	ite	lt
 800c0f8:	18d2      	addlt	r2, r2, r3
 800c0fa:	1b1c      	subge	r4, r3, r4
 800c0fc:	9b07      	ldr	r3, [sp, #28]
 800c0fe:	bfbc      	itt	lt
 800c100:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c102:	2400      	movlt	r4, #0
 800c104:	2b00      	cmp	r3, #0
 800c106:	bfb5      	itete	lt
 800c108:	eba8 0603 	sublt.w	r6, r8, r3
 800c10c:	9b07      	ldrge	r3, [sp, #28]
 800c10e:	2300      	movlt	r3, #0
 800c110:	4646      	movge	r6, r8
 800c112:	e730      	b.n	800bf76 <_dtoa_r+0x71e>
 800c114:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c116:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c118:	4646      	mov	r6, r8
 800c11a:	e735      	b.n	800bf88 <_dtoa_r+0x730>
 800c11c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c11e:	e75c      	b.n	800bfda <_dtoa_r+0x782>
 800c120:	2300      	movs	r3, #0
 800c122:	e788      	b.n	800c036 <_dtoa_r+0x7de>
 800c124:	3fe00000 	.word	0x3fe00000
 800c128:	40240000 	.word	0x40240000
 800c12c:	40140000 	.word	0x40140000
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	e780      	b.n	800c036 <_dtoa_r+0x7de>
 800c134:	2300      	movs	r3, #0
 800c136:	930a      	str	r3, [sp, #40]	@ 0x28
 800c138:	e782      	b.n	800c040 <_dtoa_r+0x7e8>
 800c13a:	d099      	beq.n	800c070 <_dtoa_r+0x818>
 800c13c:	9a08      	ldr	r2, [sp, #32]
 800c13e:	331c      	adds	r3, #28
 800c140:	441a      	add	r2, r3
 800c142:	4498      	add	r8, r3
 800c144:	441e      	add	r6, r3
 800c146:	9208      	str	r2, [sp, #32]
 800c148:	e792      	b.n	800c070 <_dtoa_r+0x818>
 800c14a:	4603      	mov	r3, r0
 800c14c:	e7f6      	b.n	800c13c <_dtoa_r+0x8e4>
 800c14e:	9b07      	ldr	r3, [sp, #28]
 800c150:	9704      	str	r7, [sp, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	dc20      	bgt.n	800c198 <_dtoa_r+0x940>
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	dd1e      	ble.n	800c19c <_dtoa_r+0x944>
 800c15e:	9b00      	ldr	r3, [sp, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	f47f aec0 	bne.w	800bee6 <_dtoa_r+0x68e>
 800c166:	4621      	mov	r1, r4
 800c168:	2205      	movs	r2, #5
 800c16a:	4658      	mov	r0, fp
 800c16c:	f000 fa9a 	bl	800c6a4 <__multadd>
 800c170:	4601      	mov	r1, r0
 800c172:	4604      	mov	r4, r0
 800c174:	4648      	mov	r0, r9
 800c176:	f000 fcad 	bl	800cad4 <__mcmp>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f77f aeb3 	ble.w	800bee6 <_dtoa_r+0x68e>
 800c180:	4656      	mov	r6, sl
 800c182:	2331      	movs	r3, #49	@ 0x31
 800c184:	f806 3b01 	strb.w	r3, [r6], #1
 800c188:	9b04      	ldr	r3, [sp, #16]
 800c18a:	3301      	adds	r3, #1
 800c18c:	9304      	str	r3, [sp, #16]
 800c18e:	e6ae      	b.n	800beee <_dtoa_r+0x696>
 800c190:	9c07      	ldr	r4, [sp, #28]
 800c192:	9704      	str	r7, [sp, #16]
 800c194:	4625      	mov	r5, r4
 800c196:	e7f3      	b.n	800c180 <_dtoa_r+0x928>
 800c198:	9b07      	ldr	r3, [sp, #28]
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 8104 	beq.w	800c3ac <_dtoa_r+0xb54>
 800c1a4:	2e00      	cmp	r6, #0
 800c1a6:	dd05      	ble.n	800c1b4 <_dtoa_r+0x95c>
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4632      	mov	r2, r6
 800c1ac:	4658      	mov	r0, fp
 800c1ae:	f000 fc25 	bl	800c9fc <__lshift>
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d05a      	beq.n	800c270 <_dtoa_r+0xa18>
 800c1ba:	6869      	ldr	r1, [r5, #4]
 800c1bc:	4658      	mov	r0, fp
 800c1be:	f000 fa0f 	bl	800c5e0 <_Balloc>
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	b928      	cbnz	r0, 800c1d2 <_dtoa_r+0x97a>
 800c1c6:	4b84      	ldr	r3, [pc, #528]	@ (800c3d8 <_dtoa_r+0xb80>)
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1ce:	f7ff bb5a 	b.w	800b886 <_dtoa_r+0x2e>
 800c1d2:	692a      	ldr	r2, [r5, #16]
 800c1d4:	3202      	adds	r2, #2
 800c1d6:	0092      	lsls	r2, r2, #2
 800c1d8:	f105 010c 	add.w	r1, r5, #12
 800c1dc:	300c      	adds	r0, #12
 800c1de:	f7ff faa4 	bl	800b72a <memcpy>
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4658      	mov	r0, fp
 800c1e8:	f000 fc08 	bl	800c9fc <__lshift>
 800c1ec:	f10a 0301 	add.w	r3, sl, #1
 800c1f0:	9307      	str	r3, [sp, #28]
 800c1f2:	9b00      	ldr	r3, [sp, #0]
 800c1f4:	4453      	add	r3, sl
 800c1f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1f8:	9b02      	ldr	r3, [sp, #8]
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	462f      	mov	r7, r5
 800c200:	930a      	str	r3, [sp, #40]	@ 0x28
 800c202:	4605      	mov	r5, r0
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	4621      	mov	r1, r4
 800c208:	3b01      	subs	r3, #1
 800c20a:	4648      	mov	r0, r9
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	f7ff fa9a 	bl	800b746 <quorem>
 800c212:	4639      	mov	r1, r7
 800c214:	9002      	str	r0, [sp, #8]
 800c216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c21a:	4648      	mov	r0, r9
 800c21c:	f000 fc5a 	bl	800cad4 <__mcmp>
 800c220:	462a      	mov	r2, r5
 800c222:	9008      	str	r0, [sp, #32]
 800c224:	4621      	mov	r1, r4
 800c226:	4658      	mov	r0, fp
 800c228:	f000 fc70 	bl	800cb0c <__mdiff>
 800c22c:	68c2      	ldr	r2, [r0, #12]
 800c22e:	4606      	mov	r6, r0
 800c230:	bb02      	cbnz	r2, 800c274 <_dtoa_r+0xa1c>
 800c232:	4601      	mov	r1, r0
 800c234:	4648      	mov	r0, r9
 800c236:	f000 fc4d 	bl	800cad4 <__mcmp>
 800c23a:	4602      	mov	r2, r0
 800c23c:	4631      	mov	r1, r6
 800c23e:	4658      	mov	r0, fp
 800c240:	920e      	str	r2, [sp, #56]	@ 0x38
 800c242:	f000 fa0d 	bl	800c660 <_Bfree>
 800c246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c24a:	9e07      	ldr	r6, [sp, #28]
 800c24c:	ea43 0102 	orr.w	r1, r3, r2
 800c250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c252:	4319      	orrs	r1, r3
 800c254:	d110      	bne.n	800c278 <_dtoa_r+0xa20>
 800c256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c25a:	d029      	beq.n	800c2b0 <_dtoa_r+0xa58>
 800c25c:	9b08      	ldr	r3, [sp, #32]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dd02      	ble.n	800c268 <_dtoa_r+0xa10>
 800c262:	9b02      	ldr	r3, [sp, #8]
 800c264:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c268:	9b00      	ldr	r3, [sp, #0]
 800c26a:	f883 8000 	strb.w	r8, [r3]
 800c26e:	e63f      	b.n	800bef0 <_dtoa_r+0x698>
 800c270:	4628      	mov	r0, r5
 800c272:	e7bb      	b.n	800c1ec <_dtoa_r+0x994>
 800c274:	2201      	movs	r2, #1
 800c276:	e7e1      	b.n	800c23c <_dtoa_r+0x9e4>
 800c278:	9b08      	ldr	r3, [sp, #32]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	db04      	blt.n	800c288 <_dtoa_r+0xa30>
 800c27e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c280:	430b      	orrs	r3, r1
 800c282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c284:	430b      	orrs	r3, r1
 800c286:	d120      	bne.n	800c2ca <_dtoa_r+0xa72>
 800c288:	2a00      	cmp	r2, #0
 800c28a:	dded      	ble.n	800c268 <_dtoa_r+0xa10>
 800c28c:	4649      	mov	r1, r9
 800c28e:	2201      	movs	r2, #1
 800c290:	4658      	mov	r0, fp
 800c292:	f000 fbb3 	bl	800c9fc <__lshift>
 800c296:	4621      	mov	r1, r4
 800c298:	4681      	mov	r9, r0
 800c29a:	f000 fc1b 	bl	800cad4 <__mcmp>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	dc03      	bgt.n	800c2aa <_dtoa_r+0xa52>
 800c2a2:	d1e1      	bne.n	800c268 <_dtoa_r+0xa10>
 800c2a4:	f018 0f01 	tst.w	r8, #1
 800c2a8:	d0de      	beq.n	800c268 <_dtoa_r+0xa10>
 800c2aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2ae:	d1d8      	bne.n	800c262 <_dtoa_r+0xa0a>
 800c2b0:	9a00      	ldr	r2, [sp, #0]
 800c2b2:	2339      	movs	r3, #57	@ 0x39
 800c2b4:	7013      	strb	r3, [r2, #0]
 800c2b6:	4633      	mov	r3, r6
 800c2b8:	461e      	mov	r6, r3
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2c0:	2a39      	cmp	r2, #57	@ 0x39
 800c2c2:	d052      	beq.n	800c36a <_dtoa_r+0xb12>
 800c2c4:	3201      	adds	r2, #1
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	e612      	b.n	800bef0 <_dtoa_r+0x698>
 800c2ca:	2a00      	cmp	r2, #0
 800c2cc:	dd07      	ble.n	800c2de <_dtoa_r+0xa86>
 800c2ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2d2:	d0ed      	beq.n	800c2b0 <_dtoa_r+0xa58>
 800c2d4:	9a00      	ldr	r2, [sp, #0]
 800c2d6:	f108 0301 	add.w	r3, r8, #1
 800c2da:	7013      	strb	r3, [r2, #0]
 800c2dc:	e608      	b.n	800bef0 <_dtoa_r+0x698>
 800c2de:	9b07      	ldr	r3, [sp, #28]
 800c2e0:	9a07      	ldr	r2, [sp, #28]
 800c2e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d028      	beq.n	800c33e <_dtoa_r+0xae6>
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	220a      	movs	r2, #10
 800c2f2:	4658      	mov	r0, fp
 800c2f4:	f000 f9d6 	bl	800c6a4 <__multadd>
 800c2f8:	42af      	cmp	r7, r5
 800c2fa:	4681      	mov	r9, r0
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	f04f 020a 	mov.w	r2, #10
 800c304:	4639      	mov	r1, r7
 800c306:	4658      	mov	r0, fp
 800c308:	d107      	bne.n	800c31a <_dtoa_r+0xac2>
 800c30a:	f000 f9cb 	bl	800c6a4 <__multadd>
 800c30e:	4607      	mov	r7, r0
 800c310:	4605      	mov	r5, r0
 800c312:	9b07      	ldr	r3, [sp, #28]
 800c314:	3301      	adds	r3, #1
 800c316:	9307      	str	r3, [sp, #28]
 800c318:	e774      	b.n	800c204 <_dtoa_r+0x9ac>
 800c31a:	f000 f9c3 	bl	800c6a4 <__multadd>
 800c31e:	4629      	mov	r1, r5
 800c320:	4607      	mov	r7, r0
 800c322:	2300      	movs	r3, #0
 800c324:	220a      	movs	r2, #10
 800c326:	4658      	mov	r0, fp
 800c328:	f000 f9bc 	bl	800c6a4 <__multadd>
 800c32c:	4605      	mov	r5, r0
 800c32e:	e7f0      	b.n	800c312 <_dtoa_r+0xaba>
 800c330:	9b00      	ldr	r3, [sp, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfcc      	ite	gt
 800c336:	461e      	movgt	r6, r3
 800c338:	2601      	movle	r6, #1
 800c33a:	4456      	add	r6, sl
 800c33c:	2700      	movs	r7, #0
 800c33e:	4649      	mov	r1, r9
 800c340:	2201      	movs	r2, #1
 800c342:	4658      	mov	r0, fp
 800c344:	f000 fb5a 	bl	800c9fc <__lshift>
 800c348:	4621      	mov	r1, r4
 800c34a:	4681      	mov	r9, r0
 800c34c:	f000 fbc2 	bl	800cad4 <__mcmp>
 800c350:	2800      	cmp	r0, #0
 800c352:	dcb0      	bgt.n	800c2b6 <_dtoa_r+0xa5e>
 800c354:	d102      	bne.n	800c35c <_dtoa_r+0xb04>
 800c356:	f018 0f01 	tst.w	r8, #1
 800c35a:	d1ac      	bne.n	800c2b6 <_dtoa_r+0xa5e>
 800c35c:	4633      	mov	r3, r6
 800c35e:	461e      	mov	r6, r3
 800c360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c364:	2a30      	cmp	r2, #48	@ 0x30
 800c366:	d0fa      	beq.n	800c35e <_dtoa_r+0xb06>
 800c368:	e5c2      	b.n	800bef0 <_dtoa_r+0x698>
 800c36a:	459a      	cmp	sl, r3
 800c36c:	d1a4      	bne.n	800c2b8 <_dtoa_r+0xa60>
 800c36e:	9b04      	ldr	r3, [sp, #16]
 800c370:	3301      	adds	r3, #1
 800c372:	9304      	str	r3, [sp, #16]
 800c374:	2331      	movs	r3, #49	@ 0x31
 800c376:	f88a 3000 	strb.w	r3, [sl]
 800c37a:	e5b9      	b.n	800bef0 <_dtoa_r+0x698>
 800c37c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c37e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3dc <_dtoa_r+0xb84>
 800c382:	b11b      	cbz	r3, 800c38c <_dtoa_r+0xb34>
 800c384:	f10a 0308 	add.w	r3, sl, #8
 800c388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	4650      	mov	r0, sl
 800c38e:	b019      	add	sp, #100	@ 0x64
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c396:	2b01      	cmp	r3, #1
 800c398:	f77f ae37 	ble.w	800c00a <_dtoa_r+0x7b2>
 800c39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c39e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	e655      	b.n	800c050 <_dtoa_r+0x7f8>
 800c3a4:	9b00      	ldr	r3, [sp, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f77f aed6 	ble.w	800c158 <_dtoa_r+0x900>
 800c3ac:	4656      	mov	r6, sl
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4648      	mov	r0, r9
 800c3b2:	f7ff f9c8 	bl	800b746 <quorem>
 800c3b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3ba:	f806 8b01 	strb.w	r8, [r6], #1
 800c3be:	9b00      	ldr	r3, [sp, #0]
 800c3c0:	eba6 020a 	sub.w	r2, r6, sl
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	ddb3      	ble.n	800c330 <_dtoa_r+0xad8>
 800c3c8:	4649      	mov	r1, r9
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	220a      	movs	r2, #10
 800c3ce:	4658      	mov	r0, fp
 800c3d0:	f000 f968 	bl	800c6a4 <__multadd>
 800c3d4:	4681      	mov	r9, r0
 800c3d6:	e7ea      	b.n	800c3ae <_dtoa_r+0xb56>
 800c3d8:	0800eba4 	.word	0x0800eba4
 800c3dc:	0800eb28 	.word	0x0800eb28

0800c3e0 <_free_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	d041      	beq.n	800c46c <_free_r+0x8c>
 800c3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ec:	1f0c      	subs	r4, r1, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bfb8      	it	lt
 800c3f2:	18e4      	addlt	r4, r4, r3
 800c3f4:	f000 f8e8 	bl	800c5c8 <__malloc_lock>
 800c3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c470 <_free_r+0x90>)
 800c3fa:	6813      	ldr	r3, [r2, #0]
 800c3fc:	b933      	cbnz	r3, 800c40c <_free_r+0x2c>
 800c3fe:	6063      	str	r3, [r4, #4]
 800c400:	6014      	str	r4, [r2, #0]
 800c402:	4628      	mov	r0, r5
 800c404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c408:	f000 b8e4 	b.w	800c5d4 <__malloc_unlock>
 800c40c:	42a3      	cmp	r3, r4
 800c40e:	d908      	bls.n	800c422 <_free_r+0x42>
 800c410:	6820      	ldr	r0, [r4, #0]
 800c412:	1821      	adds	r1, r4, r0
 800c414:	428b      	cmp	r3, r1
 800c416:	bf01      	itttt	eq
 800c418:	6819      	ldreq	r1, [r3, #0]
 800c41a:	685b      	ldreq	r3, [r3, #4]
 800c41c:	1809      	addeq	r1, r1, r0
 800c41e:	6021      	streq	r1, [r4, #0]
 800c420:	e7ed      	b.n	800c3fe <_free_r+0x1e>
 800c422:	461a      	mov	r2, r3
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	b10b      	cbz	r3, 800c42c <_free_r+0x4c>
 800c428:	42a3      	cmp	r3, r4
 800c42a:	d9fa      	bls.n	800c422 <_free_r+0x42>
 800c42c:	6811      	ldr	r1, [r2, #0]
 800c42e:	1850      	adds	r0, r2, r1
 800c430:	42a0      	cmp	r0, r4
 800c432:	d10b      	bne.n	800c44c <_free_r+0x6c>
 800c434:	6820      	ldr	r0, [r4, #0]
 800c436:	4401      	add	r1, r0
 800c438:	1850      	adds	r0, r2, r1
 800c43a:	4283      	cmp	r3, r0
 800c43c:	6011      	str	r1, [r2, #0]
 800c43e:	d1e0      	bne.n	800c402 <_free_r+0x22>
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	6053      	str	r3, [r2, #4]
 800c446:	4408      	add	r0, r1
 800c448:	6010      	str	r0, [r2, #0]
 800c44a:	e7da      	b.n	800c402 <_free_r+0x22>
 800c44c:	d902      	bls.n	800c454 <_free_r+0x74>
 800c44e:	230c      	movs	r3, #12
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	e7d6      	b.n	800c402 <_free_r+0x22>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	1821      	adds	r1, r4, r0
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf04      	itt	eq
 800c45c:	6819      	ldreq	r1, [r3, #0]
 800c45e:	685b      	ldreq	r3, [r3, #4]
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	bf04      	itt	eq
 800c464:	1809      	addeq	r1, r1, r0
 800c466:	6021      	streq	r1, [r4, #0]
 800c468:	6054      	str	r4, [r2, #4]
 800c46a:	e7ca      	b.n	800c402 <_free_r+0x22>
 800c46c:	bd38      	pop	{r3, r4, r5, pc}
 800c46e:	bf00      	nop
 800c470:	20000ecc 	.word	0x20000ecc

0800c474 <malloc>:
 800c474:	4b02      	ldr	r3, [pc, #8]	@ (800c480 <malloc+0xc>)
 800c476:	4601      	mov	r1, r0
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	f000 b825 	b.w	800c4c8 <_malloc_r>
 800c47e:	bf00      	nop
 800c480:	20000018 	.word	0x20000018

0800c484 <sbrk_aligned>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4e0f      	ldr	r6, [pc, #60]	@ (800c4c4 <sbrk_aligned+0x40>)
 800c488:	460c      	mov	r4, r1
 800c48a:	6831      	ldr	r1, [r6, #0]
 800c48c:	4605      	mov	r5, r0
 800c48e:	b911      	cbnz	r1, 800c496 <sbrk_aligned+0x12>
 800c490:	f000 feb2 	bl	800d1f8 <_sbrk_r>
 800c494:	6030      	str	r0, [r6, #0]
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f000 fead 	bl	800d1f8 <_sbrk_r>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d103      	bne.n	800c4aa <sbrk_aligned+0x26>
 800c4a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	1cc4      	adds	r4, r0, #3
 800c4ac:	f024 0403 	bic.w	r4, r4, #3
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d0f8      	beq.n	800c4a6 <sbrk_aligned+0x22>
 800c4b4:	1a21      	subs	r1, r4, r0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 fe9e 	bl	800d1f8 <_sbrk_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d1f2      	bne.n	800c4a6 <sbrk_aligned+0x22>
 800c4c0:	e7ef      	b.n	800c4a2 <sbrk_aligned+0x1e>
 800c4c2:	bf00      	nop
 800c4c4:	20000ec8 	.word	0x20000ec8

0800c4c8 <_malloc_r>:
 800c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	1ccd      	adds	r5, r1, #3
 800c4ce:	f025 0503 	bic.w	r5, r5, #3
 800c4d2:	3508      	adds	r5, #8
 800c4d4:	2d0c      	cmp	r5, #12
 800c4d6:	bf38      	it	cc
 800c4d8:	250c      	movcc	r5, #12
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	4606      	mov	r6, r0
 800c4de:	db01      	blt.n	800c4e4 <_malloc_r+0x1c>
 800c4e0:	42a9      	cmp	r1, r5
 800c4e2:	d904      	bls.n	800c4ee <_malloc_r+0x26>
 800c4e4:	230c      	movs	r3, #12
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5c4 <_malloc_r+0xfc>
 800c4f2:	f000 f869 	bl	800c5c8 <__malloc_lock>
 800c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	bb44      	cbnz	r4, 800c550 <_malloc_r+0x88>
 800c4fe:	4629      	mov	r1, r5
 800c500:	4630      	mov	r0, r6
 800c502:	f7ff ffbf 	bl	800c484 <sbrk_aligned>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	4604      	mov	r4, r0
 800c50a:	d158      	bne.n	800c5be <_malloc_r+0xf6>
 800c50c:	f8d8 4000 	ldr.w	r4, [r8]
 800c510:	4627      	mov	r7, r4
 800c512:	2f00      	cmp	r7, #0
 800c514:	d143      	bne.n	800c59e <_malloc_r+0xd6>
 800c516:	2c00      	cmp	r4, #0
 800c518:	d04b      	beq.n	800c5b2 <_malloc_r+0xea>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	4639      	mov	r1, r7
 800c51e:	4630      	mov	r0, r6
 800c520:	eb04 0903 	add.w	r9, r4, r3
 800c524:	f000 fe68 	bl	800d1f8 <_sbrk_r>
 800c528:	4581      	cmp	r9, r0
 800c52a:	d142      	bne.n	800c5b2 <_malloc_r+0xea>
 800c52c:	6821      	ldr	r1, [r4, #0]
 800c52e:	1a6d      	subs	r5, r5, r1
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ffa6 	bl	800c484 <sbrk_aligned>
 800c538:	3001      	adds	r0, #1
 800c53a:	d03a      	beq.n	800c5b2 <_malloc_r+0xea>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	442b      	add	r3, r5
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	f8d8 3000 	ldr.w	r3, [r8]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	bb62      	cbnz	r2, 800c5a4 <_malloc_r+0xdc>
 800c54a:	f8c8 7000 	str.w	r7, [r8]
 800c54e:	e00f      	b.n	800c570 <_malloc_r+0xa8>
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	1b52      	subs	r2, r2, r5
 800c554:	d420      	bmi.n	800c598 <_malloc_r+0xd0>
 800c556:	2a0b      	cmp	r2, #11
 800c558:	d917      	bls.n	800c58a <_malloc_r+0xc2>
 800c55a:	1961      	adds	r1, r4, r5
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	6025      	str	r5, [r4, #0]
 800c560:	bf18      	it	ne
 800c562:	6059      	strne	r1, [r3, #4]
 800c564:	6863      	ldr	r3, [r4, #4]
 800c566:	bf08      	it	eq
 800c568:	f8c8 1000 	streq.w	r1, [r8]
 800c56c:	5162      	str	r2, [r4, r5]
 800c56e:	604b      	str	r3, [r1, #4]
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f82f 	bl	800c5d4 <__malloc_unlock>
 800c576:	f104 000b 	add.w	r0, r4, #11
 800c57a:	1d23      	adds	r3, r4, #4
 800c57c:	f020 0007 	bic.w	r0, r0, #7
 800c580:	1ac2      	subs	r2, r0, r3
 800c582:	bf1c      	itt	ne
 800c584:	1a1b      	subne	r3, r3, r0
 800c586:	50a3      	strne	r3, [r4, r2]
 800c588:	e7af      	b.n	800c4ea <_malloc_r+0x22>
 800c58a:	6862      	ldr	r2, [r4, #4]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	bf0c      	ite	eq
 800c590:	f8c8 2000 	streq.w	r2, [r8]
 800c594:	605a      	strne	r2, [r3, #4]
 800c596:	e7eb      	b.n	800c570 <_malloc_r+0xa8>
 800c598:	4623      	mov	r3, r4
 800c59a:	6864      	ldr	r4, [r4, #4]
 800c59c:	e7ae      	b.n	800c4fc <_malloc_r+0x34>
 800c59e:	463c      	mov	r4, r7
 800c5a0:	687f      	ldr	r7, [r7, #4]
 800c5a2:	e7b6      	b.n	800c512 <_malloc_r+0x4a>
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d1fb      	bne.n	800c5a4 <_malloc_r+0xdc>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6053      	str	r3, [r2, #4]
 800c5b0:	e7de      	b.n	800c570 <_malloc_r+0xa8>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	6033      	str	r3, [r6, #0]
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f000 f80c 	bl	800c5d4 <__malloc_unlock>
 800c5bc:	e794      	b.n	800c4e8 <_malloc_r+0x20>
 800c5be:	6005      	str	r5, [r0, #0]
 800c5c0:	e7d6      	b.n	800c570 <_malloc_r+0xa8>
 800c5c2:	bf00      	nop
 800c5c4:	20000ecc 	.word	0x20000ecc

0800c5c8 <__malloc_lock>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	@ (800c5d0 <__malloc_lock+0x8>)
 800c5ca:	f7ff b8ac 	b.w	800b726 <__retarget_lock_acquire_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	20000ec4 	.word	0x20000ec4

0800c5d4 <__malloc_unlock>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	@ (800c5dc <__malloc_unlock+0x8>)
 800c5d6:	f7ff b8a7 	b.w	800b728 <__retarget_lock_release_recursive>
 800c5da:	bf00      	nop
 800c5dc:	20000ec4 	.word	0x20000ec4

0800c5e0 <_Balloc>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	69c6      	ldr	r6, [r0, #28]
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	b976      	cbnz	r6, 800c608 <_Balloc+0x28>
 800c5ea:	2010      	movs	r0, #16
 800c5ec:	f7ff ff42 	bl	800c474 <malloc>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	61e0      	str	r0, [r4, #28]
 800c5f4:	b920      	cbnz	r0, 800c600 <_Balloc+0x20>
 800c5f6:	4b18      	ldr	r3, [pc, #96]	@ (800c658 <_Balloc+0x78>)
 800c5f8:	4818      	ldr	r0, [pc, #96]	@ (800c65c <_Balloc+0x7c>)
 800c5fa:	216b      	movs	r1, #107	@ 0x6b
 800c5fc:	f000 fe0c 	bl	800d218 <__assert_func>
 800c600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c604:	6006      	str	r6, [r0, #0]
 800c606:	60c6      	str	r6, [r0, #12]
 800c608:	69e6      	ldr	r6, [r4, #28]
 800c60a:	68f3      	ldr	r3, [r6, #12]
 800c60c:	b183      	cbz	r3, 800c630 <_Balloc+0x50>
 800c60e:	69e3      	ldr	r3, [r4, #28]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c616:	b9b8      	cbnz	r0, 800c648 <_Balloc+0x68>
 800c618:	2101      	movs	r1, #1
 800c61a:	fa01 f605 	lsl.w	r6, r1, r5
 800c61e:	1d72      	adds	r2, r6, #5
 800c620:	0092      	lsls	r2, r2, #2
 800c622:	4620      	mov	r0, r4
 800c624:	f000 fe16 	bl	800d254 <_calloc_r>
 800c628:	b160      	cbz	r0, 800c644 <_Balloc+0x64>
 800c62a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c62e:	e00e      	b.n	800c64e <_Balloc+0x6e>
 800c630:	2221      	movs	r2, #33	@ 0x21
 800c632:	2104      	movs	r1, #4
 800c634:	4620      	mov	r0, r4
 800c636:	f000 fe0d 	bl	800d254 <_calloc_r>
 800c63a:	69e3      	ldr	r3, [r4, #28]
 800c63c:	60f0      	str	r0, [r6, #12]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1e4      	bne.n	800c60e <_Balloc+0x2e>
 800c644:	2000      	movs	r0, #0
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	6802      	ldr	r2, [r0, #0]
 800c64a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c64e:	2300      	movs	r3, #0
 800c650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c654:	e7f7      	b.n	800c646 <_Balloc+0x66>
 800c656:	bf00      	nop
 800c658:	0800eb35 	.word	0x0800eb35
 800c65c:	0800ebb5 	.word	0x0800ebb5

0800c660 <_Bfree>:
 800c660:	b570      	push	{r4, r5, r6, lr}
 800c662:	69c6      	ldr	r6, [r0, #28]
 800c664:	4605      	mov	r5, r0
 800c666:	460c      	mov	r4, r1
 800c668:	b976      	cbnz	r6, 800c688 <_Bfree+0x28>
 800c66a:	2010      	movs	r0, #16
 800c66c:	f7ff ff02 	bl	800c474 <malloc>
 800c670:	4602      	mov	r2, r0
 800c672:	61e8      	str	r0, [r5, #28]
 800c674:	b920      	cbnz	r0, 800c680 <_Bfree+0x20>
 800c676:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <_Bfree+0x3c>)
 800c678:	4809      	ldr	r0, [pc, #36]	@ (800c6a0 <_Bfree+0x40>)
 800c67a:	218f      	movs	r1, #143	@ 0x8f
 800c67c:	f000 fdcc 	bl	800d218 <__assert_func>
 800c680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c684:	6006      	str	r6, [r0, #0]
 800c686:	60c6      	str	r6, [r0, #12]
 800c688:	b13c      	cbz	r4, 800c69a <_Bfree+0x3a>
 800c68a:	69eb      	ldr	r3, [r5, #28]
 800c68c:	6862      	ldr	r2, [r4, #4]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c694:	6021      	str	r1, [r4, #0]
 800c696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c69a:	bd70      	pop	{r4, r5, r6, pc}
 800c69c:	0800eb35 	.word	0x0800eb35
 800c6a0:	0800ebb5 	.word	0x0800ebb5

0800c6a4 <__multadd>:
 800c6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a8:	690d      	ldr	r5, [r1, #16]
 800c6aa:	4607      	mov	r7, r0
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	461e      	mov	r6, r3
 800c6b0:	f101 0c14 	add.w	ip, r1, #20
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6ba:	b299      	uxth	r1, r3
 800c6bc:	fb02 6101 	mla	r1, r2, r1, r6
 800c6c0:	0c1e      	lsrs	r6, r3, #16
 800c6c2:	0c0b      	lsrs	r3, r1, #16
 800c6c4:	fb02 3306 	mla	r3, r2, r6, r3
 800c6c8:	b289      	uxth	r1, r1
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6d0:	4285      	cmp	r5, r0
 800c6d2:	f84c 1b04 	str.w	r1, [ip], #4
 800c6d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6da:	dcec      	bgt.n	800c6b6 <__multadd+0x12>
 800c6dc:	b30e      	cbz	r6, 800c722 <__multadd+0x7e>
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	42ab      	cmp	r3, r5
 800c6e2:	dc19      	bgt.n	800c718 <__multadd+0x74>
 800c6e4:	6861      	ldr	r1, [r4, #4]
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	3101      	adds	r1, #1
 800c6ea:	f7ff ff79 	bl	800c5e0 <_Balloc>
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	b928      	cbnz	r0, 800c6fe <__multadd+0x5a>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c728 <__multadd+0x84>)
 800c6f6:	480d      	ldr	r0, [pc, #52]	@ (800c72c <__multadd+0x88>)
 800c6f8:	21ba      	movs	r1, #186	@ 0xba
 800c6fa:	f000 fd8d 	bl	800d218 <__assert_func>
 800c6fe:	6922      	ldr	r2, [r4, #16]
 800c700:	3202      	adds	r2, #2
 800c702:	f104 010c 	add.w	r1, r4, #12
 800c706:	0092      	lsls	r2, r2, #2
 800c708:	300c      	adds	r0, #12
 800c70a:	f7ff f80e 	bl	800b72a <memcpy>
 800c70e:	4621      	mov	r1, r4
 800c710:	4638      	mov	r0, r7
 800c712:	f7ff ffa5 	bl	800c660 <_Bfree>
 800c716:	4644      	mov	r4, r8
 800c718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c71c:	3501      	adds	r5, #1
 800c71e:	615e      	str	r6, [r3, #20]
 800c720:	6125      	str	r5, [r4, #16]
 800c722:	4620      	mov	r0, r4
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	0800eba4 	.word	0x0800eba4
 800c72c:	0800ebb5 	.word	0x0800ebb5

0800c730 <__hi0bits>:
 800c730:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c734:	4603      	mov	r3, r0
 800c736:	bf36      	itet	cc
 800c738:	0403      	lslcc	r3, r0, #16
 800c73a:	2000      	movcs	r0, #0
 800c73c:	2010      	movcc	r0, #16
 800c73e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c742:	bf3c      	itt	cc
 800c744:	021b      	lslcc	r3, r3, #8
 800c746:	3008      	addcc	r0, #8
 800c748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c74c:	bf3c      	itt	cc
 800c74e:	011b      	lslcc	r3, r3, #4
 800c750:	3004      	addcc	r0, #4
 800c752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c756:	bf3c      	itt	cc
 800c758:	009b      	lslcc	r3, r3, #2
 800c75a:	3002      	addcc	r0, #2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	db05      	blt.n	800c76c <__hi0bits+0x3c>
 800c760:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c764:	f100 0001 	add.w	r0, r0, #1
 800c768:	bf08      	it	eq
 800c76a:	2020      	moveq	r0, #32
 800c76c:	4770      	bx	lr

0800c76e <__lo0bits>:
 800c76e:	6803      	ldr	r3, [r0, #0]
 800c770:	4602      	mov	r2, r0
 800c772:	f013 0007 	ands.w	r0, r3, #7
 800c776:	d00b      	beq.n	800c790 <__lo0bits+0x22>
 800c778:	07d9      	lsls	r1, r3, #31
 800c77a:	d421      	bmi.n	800c7c0 <__lo0bits+0x52>
 800c77c:	0798      	lsls	r0, r3, #30
 800c77e:	bf49      	itett	mi
 800c780:	085b      	lsrmi	r3, r3, #1
 800c782:	089b      	lsrpl	r3, r3, #2
 800c784:	2001      	movmi	r0, #1
 800c786:	6013      	strmi	r3, [r2, #0]
 800c788:	bf5c      	itt	pl
 800c78a:	6013      	strpl	r3, [r2, #0]
 800c78c:	2002      	movpl	r0, #2
 800c78e:	4770      	bx	lr
 800c790:	b299      	uxth	r1, r3
 800c792:	b909      	cbnz	r1, 800c798 <__lo0bits+0x2a>
 800c794:	0c1b      	lsrs	r3, r3, #16
 800c796:	2010      	movs	r0, #16
 800c798:	b2d9      	uxtb	r1, r3
 800c79a:	b909      	cbnz	r1, 800c7a0 <__lo0bits+0x32>
 800c79c:	3008      	adds	r0, #8
 800c79e:	0a1b      	lsrs	r3, r3, #8
 800c7a0:	0719      	lsls	r1, r3, #28
 800c7a2:	bf04      	itt	eq
 800c7a4:	091b      	lsreq	r3, r3, #4
 800c7a6:	3004      	addeq	r0, #4
 800c7a8:	0799      	lsls	r1, r3, #30
 800c7aa:	bf04      	itt	eq
 800c7ac:	089b      	lsreq	r3, r3, #2
 800c7ae:	3002      	addeq	r0, #2
 800c7b0:	07d9      	lsls	r1, r3, #31
 800c7b2:	d403      	bmi.n	800c7bc <__lo0bits+0x4e>
 800c7b4:	085b      	lsrs	r3, r3, #1
 800c7b6:	f100 0001 	add.w	r0, r0, #1
 800c7ba:	d003      	beq.n	800c7c4 <__lo0bits+0x56>
 800c7bc:	6013      	str	r3, [r2, #0]
 800c7be:	4770      	bx	lr
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	4770      	bx	lr
 800c7c4:	2020      	movs	r0, #32
 800c7c6:	4770      	bx	lr

0800c7c8 <__i2b>:
 800c7c8:	b510      	push	{r4, lr}
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	2101      	movs	r1, #1
 800c7ce:	f7ff ff07 	bl	800c5e0 <_Balloc>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	b928      	cbnz	r0, 800c7e2 <__i2b+0x1a>
 800c7d6:	4b05      	ldr	r3, [pc, #20]	@ (800c7ec <__i2b+0x24>)
 800c7d8:	4805      	ldr	r0, [pc, #20]	@ (800c7f0 <__i2b+0x28>)
 800c7da:	f240 1145 	movw	r1, #325	@ 0x145
 800c7de:	f000 fd1b 	bl	800d218 <__assert_func>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	6144      	str	r4, [r0, #20]
 800c7e6:	6103      	str	r3, [r0, #16]
 800c7e8:	bd10      	pop	{r4, pc}
 800c7ea:	bf00      	nop
 800c7ec:	0800eba4 	.word	0x0800eba4
 800c7f0:	0800ebb5 	.word	0x0800ebb5

0800c7f4 <__multiply>:
 800c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	690a      	ldr	r2, [r1, #16]
 800c7fc:	6923      	ldr	r3, [r4, #16]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	bfa8      	it	ge
 800c802:	4623      	movge	r3, r4
 800c804:	460f      	mov	r7, r1
 800c806:	bfa4      	itt	ge
 800c808:	460c      	movge	r4, r1
 800c80a:	461f      	movge	r7, r3
 800c80c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c810:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c814:	68a3      	ldr	r3, [r4, #8]
 800c816:	6861      	ldr	r1, [r4, #4]
 800c818:	eb0a 0609 	add.w	r6, sl, r9
 800c81c:	42b3      	cmp	r3, r6
 800c81e:	b085      	sub	sp, #20
 800c820:	bfb8      	it	lt
 800c822:	3101      	addlt	r1, #1
 800c824:	f7ff fedc 	bl	800c5e0 <_Balloc>
 800c828:	b930      	cbnz	r0, 800c838 <__multiply+0x44>
 800c82a:	4602      	mov	r2, r0
 800c82c:	4b44      	ldr	r3, [pc, #272]	@ (800c940 <__multiply+0x14c>)
 800c82e:	4845      	ldr	r0, [pc, #276]	@ (800c944 <__multiply+0x150>)
 800c830:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c834:	f000 fcf0 	bl	800d218 <__assert_func>
 800c838:	f100 0514 	add.w	r5, r0, #20
 800c83c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c840:	462b      	mov	r3, r5
 800c842:	2200      	movs	r2, #0
 800c844:	4543      	cmp	r3, r8
 800c846:	d321      	bcc.n	800c88c <__multiply+0x98>
 800c848:	f107 0114 	add.w	r1, r7, #20
 800c84c:	f104 0214 	add.w	r2, r4, #20
 800c850:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c854:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c858:	9302      	str	r3, [sp, #8]
 800c85a:	1b13      	subs	r3, r2, r4
 800c85c:	3b15      	subs	r3, #21
 800c85e:	f023 0303 	bic.w	r3, r3, #3
 800c862:	3304      	adds	r3, #4
 800c864:	f104 0715 	add.w	r7, r4, #21
 800c868:	42ba      	cmp	r2, r7
 800c86a:	bf38      	it	cc
 800c86c:	2304      	movcc	r3, #4
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	9103      	str	r1, [sp, #12]
 800c874:	428b      	cmp	r3, r1
 800c876:	d80c      	bhi.n	800c892 <__multiply+0x9e>
 800c878:	2e00      	cmp	r6, #0
 800c87a:	dd03      	ble.n	800c884 <__multiply+0x90>
 800c87c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c880:	2b00      	cmp	r3, #0
 800c882:	d05b      	beq.n	800c93c <__multiply+0x148>
 800c884:	6106      	str	r6, [r0, #16]
 800c886:	b005      	add	sp, #20
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	f843 2b04 	str.w	r2, [r3], #4
 800c890:	e7d8      	b.n	800c844 <__multiply+0x50>
 800c892:	f8b1 a000 	ldrh.w	sl, [r1]
 800c896:	f1ba 0f00 	cmp.w	sl, #0
 800c89a:	d024      	beq.n	800c8e6 <__multiply+0xf2>
 800c89c:	f104 0e14 	add.w	lr, r4, #20
 800c8a0:	46a9      	mov	r9, r5
 800c8a2:	f04f 0c00 	mov.w	ip, #0
 800c8a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8aa:	f8d9 3000 	ldr.w	r3, [r9]
 800c8ae:	fa1f fb87 	uxth.w	fp, r7
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8bc:	f8d9 7000 	ldr.w	r7, [r9]
 800c8c0:	4463      	add	r3, ip
 800c8c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8d4:	4572      	cmp	r2, lr
 800c8d6:	f849 3b04 	str.w	r3, [r9], #4
 800c8da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8de:	d8e2      	bhi.n	800c8a6 <__multiply+0xb2>
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	f845 c003 	str.w	ip, [r5, r3]
 800c8e6:	9b03      	ldr	r3, [sp, #12]
 800c8e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8ec:	3104      	adds	r1, #4
 800c8ee:	f1b9 0f00 	cmp.w	r9, #0
 800c8f2:	d021      	beq.n	800c938 <__multiply+0x144>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	f104 0c14 	add.w	ip, r4, #20
 800c8fa:	46ae      	mov	lr, r5
 800c8fc:	f04f 0a00 	mov.w	sl, #0
 800c900:	f8bc b000 	ldrh.w	fp, [ip]
 800c904:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c908:	fb09 770b 	mla	r7, r9, fp, r7
 800c90c:	4457      	add	r7, sl
 800c90e:	b29b      	uxth	r3, r3
 800c910:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c914:	f84e 3b04 	str.w	r3, [lr], #4
 800c918:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c91c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c920:	f8be 3000 	ldrh.w	r3, [lr]
 800c924:	fb09 330a 	mla	r3, r9, sl, r3
 800c928:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c92c:	4562      	cmp	r2, ip
 800c92e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c932:	d8e5      	bhi.n	800c900 <__multiply+0x10c>
 800c934:	9f01      	ldr	r7, [sp, #4]
 800c936:	51eb      	str	r3, [r5, r7]
 800c938:	3504      	adds	r5, #4
 800c93a:	e799      	b.n	800c870 <__multiply+0x7c>
 800c93c:	3e01      	subs	r6, #1
 800c93e:	e79b      	b.n	800c878 <__multiply+0x84>
 800c940:	0800eba4 	.word	0x0800eba4
 800c944:	0800ebb5 	.word	0x0800ebb5

0800c948 <__pow5mult>:
 800c948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c94c:	4615      	mov	r5, r2
 800c94e:	f012 0203 	ands.w	r2, r2, #3
 800c952:	4607      	mov	r7, r0
 800c954:	460e      	mov	r6, r1
 800c956:	d007      	beq.n	800c968 <__pow5mult+0x20>
 800c958:	4c25      	ldr	r4, [pc, #148]	@ (800c9f0 <__pow5mult+0xa8>)
 800c95a:	3a01      	subs	r2, #1
 800c95c:	2300      	movs	r3, #0
 800c95e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c962:	f7ff fe9f 	bl	800c6a4 <__multadd>
 800c966:	4606      	mov	r6, r0
 800c968:	10ad      	asrs	r5, r5, #2
 800c96a:	d03d      	beq.n	800c9e8 <__pow5mult+0xa0>
 800c96c:	69fc      	ldr	r4, [r7, #28]
 800c96e:	b97c      	cbnz	r4, 800c990 <__pow5mult+0x48>
 800c970:	2010      	movs	r0, #16
 800c972:	f7ff fd7f 	bl	800c474 <malloc>
 800c976:	4602      	mov	r2, r0
 800c978:	61f8      	str	r0, [r7, #28]
 800c97a:	b928      	cbnz	r0, 800c988 <__pow5mult+0x40>
 800c97c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9f4 <__pow5mult+0xac>)
 800c97e:	481e      	ldr	r0, [pc, #120]	@ (800c9f8 <__pow5mult+0xb0>)
 800c980:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c984:	f000 fc48 	bl	800d218 <__assert_func>
 800c988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c98c:	6004      	str	r4, [r0, #0]
 800c98e:	60c4      	str	r4, [r0, #12]
 800c990:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c998:	b94c      	cbnz	r4, 800c9ae <__pow5mult+0x66>
 800c99a:	f240 2171 	movw	r1, #625	@ 0x271
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f7ff ff12 	bl	800c7c8 <__i2b>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	6003      	str	r3, [r0, #0]
 800c9ae:	f04f 0900 	mov.w	r9, #0
 800c9b2:	07eb      	lsls	r3, r5, #31
 800c9b4:	d50a      	bpl.n	800c9cc <__pow5mult+0x84>
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	f7ff ff1a 	bl	800c7f4 <__multiply>
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	4680      	mov	r8, r0
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	f7ff fe4b 	bl	800c660 <_Bfree>
 800c9ca:	4646      	mov	r6, r8
 800c9cc:	106d      	asrs	r5, r5, #1
 800c9ce:	d00b      	beq.n	800c9e8 <__pow5mult+0xa0>
 800c9d0:	6820      	ldr	r0, [r4, #0]
 800c9d2:	b938      	cbnz	r0, 800c9e4 <__pow5mult+0x9c>
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7ff ff0b 	bl	800c7f4 <__multiply>
 800c9de:	6020      	str	r0, [r4, #0]
 800c9e0:	f8c0 9000 	str.w	r9, [r0]
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	e7e4      	b.n	800c9b2 <__pow5mult+0x6a>
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0800ec10 	.word	0x0800ec10
 800c9f4:	0800eb35 	.word	0x0800eb35
 800c9f8:	0800ebb5 	.word	0x0800ebb5

0800c9fc <__lshift>:
 800c9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca00:	460c      	mov	r4, r1
 800ca02:	6849      	ldr	r1, [r1, #4]
 800ca04:	6923      	ldr	r3, [r4, #16]
 800ca06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	4691      	mov	r9, r2
 800ca10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca14:	f108 0601 	add.w	r6, r8, #1
 800ca18:	42b3      	cmp	r3, r6
 800ca1a:	db0b      	blt.n	800ca34 <__lshift+0x38>
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f7ff fddf 	bl	800c5e0 <_Balloc>
 800ca22:	4605      	mov	r5, r0
 800ca24:	b948      	cbnz	r0, 800ca3a <__lshift+0x3e>
 800ca26:	4602      	mov	r2, r0
 800ca28:	4b28      	ldr	r3, [pc, #160]	@ (800cacc <__lshift+0xd0>)
 800ca2a:	4829      	ldr	r0, [pc, #164]	@ (800cad0 <__lshift+0xd4>)
 800ca2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca30:	f000 fbf2 	bl	800d218 <__assert_func>
 800ca34:	3101      	adds	r1, #1
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	e7ee      	b.n	800ca18 <__lshift+0x1c>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f100 0114 	add.w	r1, r0, #20
 800ca40:	f100 0210 	add.w	r2, r0, #16
 800ca44:	4618      	mov	r0, r3
 800ca46:	4553      	cmp	r3, sl
 800ca48:	db33      	blt.n	800cab2 <__lshift+0xb6>
 800ca4a:	6920      	ldr	r0, [r4, #16]
 800ca4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca50:	f104 0314 	add.w	r3, r4, #20
 800ca54:	f019 091f 	ands.w	r9, r9, #31
 800ca58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca60:	d02b      	beq.n	800caba <__lshift+0xbe>
 800ca62:	f1c9 0e20 	rsb	lr, r9, #32
 800ca66:	468a      	mov	sl, r1
 800ca68:	2200      	movs	r2, #0
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ca70:	4310      	orrs	r0, r2
 800ca72:	f84a 0b04 	str.w	r0, [sl], #4
 800ca76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca7a:	459c      	cmp	ip, r3
 800ca7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca80:	d8f3      	bhi.n	800ca6a <__lshift+0x6e>
 800ca82:	ebac 0304 	sub.w	r3, ip, r4
 800ca86:	3b15      	subs	r3, #21
 800ca88:	f023 0303 	bic.w	r3, r3, #3
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	f104 0015 	add.w	r0, r4, #21
 800ca92:	4584      	cmp	ip, r0
 800ca94:	bf38      	it	cc
 800ca96:	2304      	movcc	r3, #4
 800ca98:	50ca      	str	r2, [r1, r3]
 800ca9a:	b10a      	cbz	r2, 800caa0 <__lshift+0xa4>
 800ca9c:	f108 0602 	add.w	r6, r8, #2
 800caa0:	3e01      	subs	r6, #1
 800caa2:	4638      	mov	r0, r7
 800caa4:	612e      	str	r6, [r5, #16]
 800caa6:	4621      	mov	r1, r4
 800caa8:	f7ff fdda 	bl	800c660 <_Bfree>
 800caac:	4628      	mov	r0, r5
 800caae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cab6:	3301      	adds	r3, #1
 800cab8:	e7c5      	b.n	800ca46 <__lshift+0x4a>
 800caba:	3904      	subs	r1, #4
 800cabc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cac4:	459c      	cmp	ip, r3
 800cac6:	d8f9      	bhi.n	800cabc <__lshift+0xc0>
 800cac8:	e7ea      	b.n	800caa0 <__lshift+0xa4>
 800caca:	bf00      	nop
 800cacc:	0800eba4 	.word	0x0800eba4
 800cad0:	0800ebb5 	.word	0x0800ebb5

0800cad4 <__mcmp>:
 800cad4:	690a      	ldr	r2, [r1, #16]
 800cad6:	4603      	mov	r3, r0
 800cad8:	6900      	ldr	r0, [r0, #16]
 800cada:	1a80      	subs	r0, r0, r2
 800cadc:	b530      	push	{r4, r5, lr}
 800cade:	d10e      	bne.n	800cafe <__mcmp+0x2a>
 800cae0:	3314      	adds	r3, #20
 800cae2:	3114      	adds	r1, #20
 800cae4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800caec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800caf4:	4295      	cmp	r5, r2
 800caf6:	d003      	beq.n	800cb00 <__mcmp+0x2c>
 800caf8:	d205      	bcs.n	800cb06 <__mcmp+0x32>
 800cafa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cafe:	bd30      	pop	{r4, r5, pc}
 800cb00:	42a3      	cmp	r3, r4
 800cb02:	d3f3      	bcc.n	800caec <__mcmp+0x18>
 800cb04:	e7fb      	b.n	800cafe <__mcmp+0x2a>
 800cb06:	2001      	movs	r0, #1
 800cb08:	e7f9      	b.n	800cafe <__mcmp+0x2a>
	...

0800cb0c <__mdiff>:
 800cb0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb10:	4689      	mov	r9, r1
 800cb12:	4606      	mov	r6, r0
 800cb14:	4611      	mov	r1, r2
 800cb16:	4648      	mov	r0, r9
 800cb18:	4614      	mov	r4, r2
 800cb1a:	f7ff ffdb 	bl	800cad4 <__mcmp>
 800cb1e:	1e05      	subs	r5, r0, #0
 800cb20:	d112      	bne.n	800cb48 <__mdiff+0x3c>
 800cb22:	4629      	mov	r1, r5
 800cb24:	4630      	mov	r0, r6
 800cb26:	f7ff fd5b 	bl	800c5e0 <_Balloc>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	b928      	cbnz	r0, 800cb3a <__mdiff+0x2e>
 800cb2e:	4b3f      	ldr	r3, [pc, #252]	@ (800cc2c <__mdiff+0x120>)
 800cb30:	f240 2137 	movw	r1, #567	@ 0x237
 800cb34:	483e      	ldr	r0, [pc, #248]	@ (800cc30 <__mdiff+0x124>)
 800cb36:	f000 fb6f 	bl	800d218 <__assert_func>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb40:	4610      	mov	r0, r2
 800cb42:	b003      	add	sp, #12
 800cb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb48:	bfbc      	itt	lt
 800cb4a:	464b      	movlt	r3, r9
 800cb4c:	46a1      	movlt	r9, r4
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb54:	bfba      	itte	lt
 800cb56:	461c      	movlt	r4, r3
 800cb58:	2501      	movlt	r5, #1
 800cb5a:	2500      	movge	r5, #0
 800cb5c:	f7ff fd40 	bl	800c5e0 <_Balloc>
 800cb60:	4602      	mov	r2, r0
 800cb62:	b918      	cbnz	r0, 800cb6c <__mdiff+0x60>
 800cb64:	4b31      	ldr	r3, [pc, #196]	@ (800cc2c <__mdiff+0x120>)
 800cb66:	f240 2145 	movw	r1, #581	@ 0x245
 800cb6a:	e7e3      	b.n	800cb34 <__mdiff+0x28>
 800cb6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb70:	6926      	ldr	r6, [r4, #16]
 800cb72:	60c5      	str	r5, [r0, #12]
 800cb74:	f109 0310 	add.w	r3, r9, #16
 800cb78:	f109 0514 	add.w	r5, r9, #20
 800cb7c:	f104 0e14 	add.w	lr, r4, #20
 800cb80:	f100 0b14 	add.w	fp, r0, #20
 800cb84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	46d9      	mov	r9, fp
 800cb90:	f04f 0c00 	mov.w	ip, #0
 800cb94:	9b01      	ldr	r3, [sp, #4]
 800cb96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	fa1f f38a 	uxth.w	r3, sl
 800cba4:	4619      	mov	r1, r3
 800cba6:	b283      	uxth	r3, r0
 800cba8:	1acb      	subs	r3, r1, r3
 800cbaa:	0c00      	lsrs	r0, r0, #16
 800cbac:	4463      	add	r3, ip
 800cbae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbbc:	4576      	cmp	r6, lr
 800cbbe:	f849 3b04 	str.w	r3, [r9], #4
 800cbc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbc6:	d8e5      	bhi.n	800cb94 <__mdiff+0x88>
 800cbc8:	1b33      	subs	r3, r6, r4
 800cbca:	3b15      	subs	r3, #21
 800cbcc:	f023 0303 	bic.w	r3, r3, #3
 800cbd0:	3415      	adds	r4, #21
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	42a6      	cmp	r6, r4
 800cbd6:	bf38      	it	cc
 800cbd8:	2304      	movcc	r3, #4
 800cbda:	441d      	add	r5, r3
 800cbdc:	445b      	add	r3, fp
 800cbde:	461e      	mov	r6, r3
 800cbe0:	462c      	mov	r4, r5
 800cbe2:	4544      	cmp	r4, r8
 800cbe4:	d30e      	bcc.n	800cc04 <__mdiff+0xf8>
 800cbe6:	f108 0103 	add.w	r1, r8, #3
 800cbea:	1b49      	subs	r1, r1, r5
 800cbec:	f021 0103 	bic.w	r1, r1, #3
 800cbf0:	3d03      	subs	r5, #3
 800cbf2:	45a8      	cmp	r8, r5
 800cbf4:	bf38      	it	cc
 800cbf6:	2100      	movcc	r1, #0
 800cbf8:	440b      	add	r3, r1
 800cbfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbfe:	b191      	cbz	r1, 800cc26 <__mdiff+0x11a>
 800cc00:	6117      	str	r7, [r2, #16]
 800cc02:	e79d      	b.n	800cb40 <__mdiff+0x34>
 800cc04:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc08:	46e6      	mov	lr, ip
 800cc0a:	0c08      	lsrs	r0, r1, #16
 800cc0c:	fa1c fc81 	uxtah	ip, ip, r1
 800cc10:	4471      	add	r1, lr
 800cc12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc16:	b289      	uxth	r1, r1
 800cc18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc1c:	f846 1b04 	str.w	r1, [r6], #4
 800cc20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc24:	e7dd      	b.n	800cbe2 <__mdiff+0xd6>
 800cc26:	3f01      	subs	r7, #1
 800cc28:	e7e7      	b.n	800cbfa <__mdiff+0xee>
 800cc2a:	bf00      	nop
 800cc2c:	0800eba4 	.word	0x0800eba4
 800cc30:	0800ebb5 	.word	0x0800ebb5

0800cc34 <__d2b>:
 800cc34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc38:	460f      	mov	r7, r1
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	ec59 8b10 	vmov	r8, r9, d0
 800cc40:	4616      	mov	r6, r2
 800cc42:	f7ff fccd 	bl	800c5e0 <_Balloc>
 800cc46:	4604      	mov	r4, r0
 800cc48:	b930      	cbnz	r0, 800cc58 <__d2b+0x24>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b23      	ldr	r3, [pc, #140]	@ (800ccdc <__d2b+0xa8>)
 800cc4e:	4824      	ldr	r0, [pc, #144]	@ (800cce0 <__d2b+0xac>)
 800cc50:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc54:	f000 fae0 	bl	800d218 <__assert_func>
 800cc58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc60:	b10d      	cbz	r5, 800cc66 <__d2b+0x32>
 800cc62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	f1b8 0300 	subs.w	r3, r8, #0
 800cc6c:	d023      	beq.n	800ccb6 <__d2b+0x82>
 800cc6e:	4668      	mov	r0, sp
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	f7ff fd7c 	bl	800c76e <__lo0bits>
 800cc76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc7a:	b1d0      	cbz	r0, 800ccb2 <__d2b+0x7e>
 800cc7c:	f1c0 0320 	rsb	r3, r0, #32
 800cc80:	fa02 f303 	lsl.w	r3, r2, r3
 800cc84:	430b      	orrs	r3, r1
 800cc86:	40c2      	lsrs	r2, r0
 800cc88:	6163      	str	r3, [r4, #20]
 800cc8a:	9201      	str	r2, [sp, #4]
 800cc8c:	9b01      	ldr	r3, [sp, #4]
 800cc8e:	61a3      	str	r3, [r4, #24]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	bf0c      	ite	eq
 800cc94:	2201      	moveq	r2, #1
 800cc96:	2202      	movne	r2, #2
 800cc98:	6122      	str	r2, [r4, #16]
 800cc9a:	b1a5      	cbz	r5, 800ccc6 <__d2b+0x92>
 800cc9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cca0:	4405      	add	r5, r0
 800cca2:	603d      	str	r5, [r7, #0]
 800cca4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cca8:	6030      	str	r0, [r6, #0]
 800ccaa:	4620      	mov	r0, r4
 800ccac:	b003      	add	sp, #12
 800ccae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccb2:	6161      	str	r1, [r4, #20]
 800ccb4:	e7ea      	b.n	800cc8c <__d2b+0x58>
 800ccb6:	a801      	add	r0, sp, #4
 800ccb8:	f7ff fd59 	bl	800c76e <__lo0bits>
 800ccbc:	9b01      	ldr	r3, [sp, #4]
 800ccbe:	6163      	str	r3, [r4, #20]
 800ccc0:	3020      	adds	r0, #32
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	e7e8      	b.n	800cc98 <__d2b+0x64>
 800ccc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ccce:	6038      	str	r0, [r7, #0]
 800ccd0:	6918      	ldr	r0, [r3, #16]
 800ccd2:	f7ff fd2d 	bl	800c730 <__hi0bits>
 800ccd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccda:	e7e5      	b.n	800cca8 <__d2b+0x74>
 800ccdc:	0800eba4 	.word	0x0800eba4
 800cce0:	0800ebb5 	.word	0x0800ebb5

0800cce4 <_malloc_usable_size_r>:
 800cce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce8:	1f18      	subs	r0, r3, #4
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	bfbc      	itt	lt
 800ccee:	580b      	ldrlt	r3, [r1, r0]
 800ccf0:	18c0      	addlt	r0, r0, r3
 800ccf2:	4770      	bx	lr

0800ccf4 <__sfputc_r>:
 800ccf4:	6893      	ldr	r3, [r2, #8]
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	b410      	push	{r4}
 800ccfc:	6093      	str	r3, [r2, #8]
 800ccfe:	da08      	bge.n	800cd12 <__sfputc_r+0x1e>
 800cd00:	6994      	ldr	r4, [r2, #24]
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	db01      	blt.n	800cd0a <__sfputc_r+0x16>
 800cd06:	290a      	cmp	r1, #10
 800cd08:	d103      	bne.n	800cd12 <__sfputc_r+0x1e>
 800cd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd0e:	f000 b9df 	b.w	800d0d0 <__swbuf_r>
 800cd12:	6813      	ldr	r3, [r2, #0]
 800cd14:	1c58      	adds	r0, r3, #1
 800cd16:	6010      	str	r0, [r2, #0]
 800cd18:	7019      	strb	r1, [r3, #0]
 800cd1a:	4608      	mov	r0, r1
 800cd1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <__sfputs_r>:
 800cd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd24:	4606      	mov	r6, r0
 800cd26:	460f      	mov	r7, r1
 800cd28:	4614      	mov	r4, r2
 800cd2a:	18d5      	adds	r5, r2, r3
 800cd2c:	42ac      	cmp	r4, r5
 800cd2e:	d101      	bne.n	800cd34 <__sfputs_r+0x12>
 800cd30:	2000      	movs	r0, #0
 800cd32:	e007      	b.n	800cd44 <__sfputs_r+0x22>
 800cd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd38:	463a      	mov	r2, r7
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f7ff ffda 	bl	800ccf4 <__sfputc_r>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	d1f3      	bne.n	800cd2c <__sfputs_r+0xa>
 800cd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd48 <_vfiprintf_r>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	b09d      	sub	sp, #116	@ 0x74
 800cd50:	4614      	mov	r4, r2
 800cd52:	4698      	mov	r8, r3
 800cd54:	4606      	mov	r6, r0
 800cd56:	b118      	cbz	r0, 800cd60 <_vfiprintf_r+0x18>
 800cd58:	6a03      	ldr	r3, [r0, #32]
 800cd5a:	b90b      	cbnz	r3, 800cd60 <_vfiprintf_r+0x18>
 800cd5c:	f7fe fbec 	bl	800b538 <__sinit>
 800cd60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd62:	07d9      	lsls	r1, r3, #31
 800cd64:	d405      	bmi.n	800cd72 <_vfiprintf_r+0x2a>
 800cd66:	89ab      	ldrh	r3, [r5, #12]
 800cd68:	059a      	lsls	r2, r3, #22
 800cd6a:	d402      	bmi.n	800cd72 <_vfiprintf_r+0x2a>
 800cd6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd6e:	f7fe fcda 	bl	800b726 <__retarget_lock_acquire_recursive>
 800cd72:	89ab      	ldrh	r3, [r5, #12]
 800cd74:	071b      	lsls	r3, r3, #28
 800cd76:	d501      	bpl.n	800cd7c <_vfiprintf_r+0x34>
 800cd78:	692b      	ldr	r3, [r5, #16]
 800cd7a:	b99b      	cbnz	r3, 800cda4 <_vfiprintf_r+0x5c>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f000 f9e4 	bl	800d14c <__swsetup_r>
 800cd84:	b170      	cbz	r0, 800cda4 <_vfiprintf_r+0x5c>
 800cd86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd88:	07dc      	lsls	r4, r3, #31
 800cd8a:	d504      	bpl.n	800cd96 <_vfiprintf_r+0x4e>
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd90:	b01d      	add	sp, #116	@ 0x74
 800cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd96:	89ab      	ldrh	r3, [r5, #12]
 800cd98:	0598      	lsls	r0, r3, #22
 800cd9a:	d4f7      	bmi.n	800cd8c <_vfiprintf_r+0x44>
 800cd9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd9e:	f7fe fcc3 	bl	800b728 <__retarget_lock_release_recursive>
 800cda2:	e7f3      	b.n	800cd8c <_vfiprintf_r+0x44>
 800cda4:	2300      	movs	r3, #0
 800cda6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda8:	2320      	movs	r3, #32
 800cdaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdae:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdb2:	2330      	movs	r3, #48	@ 0x30
 800cdb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf64 <_vfiprintf_r+0x21c>
 800cdb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdbc:	f04f 0901 	mov.w	r9, #1
 800cdc0:	4623      	mov	r3, r4
 800cdc2:	469a      	mov	sl, r3
 800cdc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc8:	b10a      	cbz	r2, 800cdce <_vfiprintf_r+0x86>
 800cdca:	2a25      	cmp	r2, #37	@ 0x25
 800cdcc:	d1f9      	bne.n	800cdc2 <_vfiprintf_r+0x7a>
 800cdce:	ebba 0b04 	subs.w	fp, sl, r4
 800cdd2:	d00b      	beq.n	800cdec <_vfiprintf_r+0xa4>
 800cdd4:	465b      	mov	r3, fp
 800cdd6:	4622      	mov	r2, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7ff ffa1 	bl	800cd22 <__sfputs_r>
 800cde0:	3001      	adds	r0, #1
 800cde2:	f000 80a7 	beq.w	800cf34 <_vfiprintf_r+0x1ec>
 800cde6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cde8:	445a      	add	r2, fp
 800cdea:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdec:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 809f 	beq.w	800cf34 <_vfiprintf_r+0x1ec>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce00:	f10a 0a01 	add.w	sl, sl, #1
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	9307      	str	r3, [sp, #28]
 800ce08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce0e:	4654      	mov	r4, sl
 800ce10:	2205      	movs	r2, #5
 800ce12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce16:	4853      	ldr	r0, [pc, #332]	@ (800cf64 <_vfiprintf_r+0x21c>)
 800ce18:	f7f3 f9da 	bl	80001d0 <memchr>
 800ce1c:	9a04      	ldr	r2, [sp, #16]
 800ce1e:	b9d8      	cbnz	r0, 800ce58 <_vfiprintf_r+0x110>
 800ce20:	06d1      	lsls	r1, r2, #27
 800ce22:	bf44      	itt	mi
 800ce24:	2320      	movmi	r3, #32
 800ce26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce2a:	0713      	lsls	r3, r2, #28
 800ce2c:	bf44      	itt	mi
 800ce2e:	232b      	movmi	r3, #43	@ 0x2b
 800ce30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce34:	f89a 3000 	ldrb.w	r3, [sl]
 800ce38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce3a:	d015      	beq.n	800ce68 <_vfiprintf_r+0x120>
 800ce3c:	9a07      	ldr	r2, [sp, #28]
 800ce3e:	4654      	mov	r4, sl
 800ce40:	2000      	movs	r0, #0
 800ce42:	f04f 0c0a 	mov.w	ip, #10
 800ce46:	4621      	mov	r1, r4
 800ce48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce4c:	3b30      	subs	r3, #48	@ 0x30
 800ce4e:	2b09      	cmp	r3, #9
 800ce50:	d94b      	bls.n	800ceea <_vfiprintf_r+0x1a2>
 800ce52:	b1b0      	cbz	r0, 800ce82 <_vfiprintf_r+0x13a>
 800ce54:	9207      	str	r2, [sp, #28]
 800ce56:	e014      	b.n	800ce82 <_vfiprintf_r+0x13a>
 800ce58:	eba0 0308 	sub.w	r3, r0, r8
 800ce5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce60:	4313      	orrs	r3, r2
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	46a2      	mov	sl, r4
 800ce66:	e7d2      	b.n	800ce0e <_vfiprintf_r+0xc6>
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	1d19      	adds	r1, r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	9103      	str	r1, [sp, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bfbb      	ittet	lt
 800ce74:	425b      	neglt	r3, r3
 800ce76:	f042 0202 	orrlt.w	r2, r2, #2
 800ce7a:	9307      	strge	r3, [sp, #28]
 800ce7c:	9307      	strlt	r3, [sp, #28]
 800ce7e:	bfb8      	it	lt
 800ce80:	9204      	strlt	r2, [sp, #16]
 800ce82:	7823      	ldrb	r3, [r4, #0]
 800ce84:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce86:	d10a      	bne.n	800ce9e <_vfiprintf_r+0x156>
 800ce88:	7863      	ldrb	r3, [r4, #1]
 800ce8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce8c:	d132      	bne.n	800cef4 <_vfiprintf_r+0x1ac>
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	1d1a      	adds	r2, r3, #4
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	9203      	str	r2, [sp, #12]
 800ce96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce9a:	3402      	adds	r4, #2
 800ce9c:	9305      	str	r3, [sp, #20]
 800ce9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf74 <_vfiprintf_r+0x22c>
 800cea2:	7821      	ldrb	r1, [r4, #0]
 800cea4:	2203      	movs	r2, #3
 800cea6:	4650      	mov	r0, sl
 800cea8:	f7f3 f992 	bl	80001d0 <memchr>
 800ceac:	b138      	cbz	r0, 800cebe <_vfiprintf_r+0x176>
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	eba0 000a 	sub.w	r0, r0, sl
 800ceb4:	2240      	movs	r2, #64	@ 0x40
 800ceb6:	4082      	lsls	r2, r0
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	3401      	adds	r4, #1
 800cebc:	9304      	str	r3, [sp, #16]
 800cebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec2:	4829      	ldr	r0, [pc, #164]	@ (800cf68 <_vfiprintf_r+0x220>)
 800cec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cec8:	2206      	movs	r2, #6
 800ceca:	f7f3 f981 	bl	80001d0 <memchr>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d03f      	beq.n	800cf52 <_vfiprintf_r+0x20a>
 800ced2:	4b26      	ldr	r3, [pc, #152]	@ (800cf6c <_vfiprintf_r+0x224>)
 800ced4:	bb1b      	cbnz	r3, 800cf1e <_vfiprintf_r+0x1d6>
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	3307      	adds	r3, #7
 800ceda:	f023 0307 	bic.w	r3, r3, #7
 800cede:	3308      	adds	r3, #8
 800cee0:	9303      	str	r3, [sp, #12]
 800cee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee4:	443b      	add	r3, r7
 800cee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cee8:	e76a      	b.n	800cdc0 <_vfiprintf_r+0x78>
 800ceea:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceee:	460c      	mov	r4, r1
 800cef0:	2001      	movs	r0, #1
 800cef2:	e7a8      	b.n	800ce46 <_vfiprintf_r+0xfe>
 800cef4:	2300      	movs	r3, #0
 800cef6:	3401      	adds	r4, #1
 800cef8:	9305      	str	r3, [sp, #20]
 800cefa:	4619      	mov	r1, r3
 800cefc:	f04f 0c0a 	mov.w	ip, #10
 800cf00:	4620      	mov	r0, r4
 800cf02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf06:	3a30      	subs	r2, #48	@ 0x30
 800cf08:	2a09      	cmp	r2, #9
 800cf0a:	d903      	bls.n	800cf14 <_vfiprintf_r+0x1cc>
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0c6      	beq.n	800ce9e <_vfiprintf_r+0x156>
 800cf10:	9105      	str	r1, [sp, #20]
 800cf12:	e7c4      	b.n	800ce9e <_vfiprintf_r+0x156>
 800cf14:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf18:	4604      	mov	r4, r0
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e7f0      	b.n	800cf00 <_vfiprintf_r+0x1b8>
 800cf1e:	ab03      	add	r3, sp, #12
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	462a      	mov	r2, r5
 800cf24:	4b12      	ldr	r3, [pc, #72]	@ (800cf70 <_vfiprintf_r+0x228>)
 800cf26:	a904      	add	r1, sp, #16
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7fd fec1 	bl	800acb0 <_printf_float>
 800cf2e:	4607      	mov	r7, r0
 800cf30:	1c78      	adds	r0, r7, #1
 800cf32:	d1d6      	bne.n	800cee2 <_vfiprintf_r+0x19a>
 800cf34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf36:	07d9      	lsls	r1, r3, #31
 800cf38:	d405      	bmi.n	800cf46 <_vfiprintf_r+0x1fe>
 800cf3a:	89ab      	ldrh	r3, [r5, #12]
 800cf3c:	059a      	lsls	r2, r3, #22
 800cf3e:	d402      	bmi.n	800cf46 <_vfiprintf_r+0x1fe>
 800cf40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf42:	f7fe fbf1 	bl	800b728 <__retarget_lock_release_recursive>
 800cf46:	89ab      	ldrh	r3, [r5, #12]
 800cf48:	065b      	lsls	r3, r3, #25
 800cf4a:	f53f af1f 	bmi.w	800cd8c <_vfiprintf_r+0x44>
 800cf4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf50:	e71e      	b.n	800cd90 <_vfiprintf_r+0x48>
 800cf52:	ab03      	add	r3, sp, #12
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	462a      	mov	r2, r5
 800cf58:	4b05      	ldr	r3, [pc, #20]	@ (800cf70 <_vfiprintf_r+0x228>)
 800cf5a:	a904      	add	r1, sp, #16
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7fe f93f 	bl	800b1e0 <_printf_i>
 800cf62:	e7e4      	b.n	800cf2e <_vfiprintf_r+0x1e6>
 800cf64:	0800ed10 	.word	0x0800ed10
 800cf68:	0800ed1a 	.word	0x0800ed1a
 800cf6c:	0800acb1 	.word	0x0800acb1
 800cf70:	0800cd23 	.word	0x0800cd23
 800cf74:	0800ed16 	.word	0x0800ed16

0800cf78 <__sflush_r>:
 800cf78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf80:	0716      	lsls	r6, r2, #28
 800cf82:	4605      	mov	r5, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	d454      	bmi.n	800d032 <__sflush_r+0xba>
 800cf88:	684b      	ldr	r3, [r1, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	dc02      	bgt.n	800cf94 <__sflush_r+0x1c>
 800cf8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	dd48      	ble.n	800d026 <__sflush_r+0xae>
 800cf94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf96:	2e00      	cmp	r6, #0
 800cf98:	d045      	beq.n	800d026 <__sflush_r+0xae>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfa0:	682f      	ldr	r7, [r5, #0]
 800cfa2:	6a21      	ldr	r1, [r4, #32]
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	d030      	beq.n	800d00a <__sflush_r+0x92>
 800cfa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	0759      	lsls	r1, r3, #29
 800cfae:	d505      	bpl.n	800cfbc <__sflush_r+0x44>
 800cfb0:	6863      	ldr	r3, [r4, #4]
 800cfb2:	1ad2      	subs	r2, r2, r3
 800cfb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfb6:	b10b      	cbz	r3, 800cfbc <__sflush_r+0x44>
 800cfb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfba:	1ad2      	subs	r2, r2, r3
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfc0:	6a21      	ldr	r1, [r4, #32]
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	47b0      	blx	r6
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	d106      	bne.n	800cfda <__sflush_r+0x62>
 800cfcc:	6829      	ldr	r1, [r5, #0]
 800cfce:	291d      	cmp	r1, #29
 800cfd0:	d82b      	bhi.n	800d02a <__sflush_r+0xb2>
 800cfd2:	4a2a      	ldr	r2, [pc, #168]	@ (800d07c <__sflush_r+0x104>)
 800cfd4:	410a      	asrs	r2, r1
 800cfd6:	07d6      	lsls	r6, r2, #31
 800cfd8:	d427      	bmi.n	800d02a <__sflush_r+0xb2>
 800cfda:	2200      	movs	r2, #0
 800cfdc:	6062      	str	r2, [r4, #4]
 800cfde:	04d9      	lsls	r1, r3, #19
 800cfe0:	6922      	ldr	r2, [r4, #16]
 800cfe2:	6022      	str	r2, [r4, #0]
 800cfe4:	d504      	bpl.n	800cff0 <__sflush_r+0x78>
 800cfe6:	1c42      	adds	r2, r0, #1
 800cfe8:	d101      	bne.n	800cfee <__sflush_r+0x76>
 800cfea:	682b      	ldr	r3, [r5, #0]
 800cfec:	b903      	cbnz	r3, 800cff0 <__sflush_r+0x78>
 800cfee:	6560      	str	r0, [r4, #84]	@ 0x54
 800cff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cff2:	602f      	str	r7, [r5, #0]
 800cff4:	b1b9      	cbz	r1, 800d026 <__sflush_r+0xae>
 800cff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cffa:	4299      	cmp	r1, r3
 800cffc:	d002      	beq.n	800d004 <__sflush_r+0x8c>
 800cffe:	4628      	mov	r0, r5
 800d000:	f7ff f9ee 	bl	800c3e0 <_free_r>
 800d004:	2300      	movs	r3, #0
 800d006:	6363      	str	r3, [r4, #52]	@ 0x34
 800d008:	e00d      	b.n	800d026 <__sflush_r+0xae>
 800d00a:	2301      	movs	r3, #1
 800d00c:	4628      	mov	r0, r5
 800d00e:	47b0      	blx	r6
 800d010:	4602      	mov	r2, r0
 800d012:	1c50      	adds	r0, r2, #1
 800d014:	d1c9      	bne.n	800cfaa <__sflush_r+0x32>
 800d016:	682b      	ldr	r3, [r5, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0c6      	beq.n	800cfaa <__sflush_r+0x32>
 800d01c:	2b1d      	cmp	r3, #29
 800d01e:	d001      	beq.n	800d024 <__sflush_r+0xac>
 800d020:	2b16      	cmp	r3, #22
 800d022:	d11e      	bne.n	800d062 <__sflush_r+0xea>
 800d024:	602f      	str	r7, [r5, #0]
 800d026:	2000      	movs	r0, #0
 800d028:	e022      	b.n	800d070 <__sflush_r+0xf8>
 800d02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d02e:	b21b      	sxth	r3, r3
 800d030:	e01b      	b.n	800d06a <__sflush_r+0xf2>
 800d032:	690f      	ldr	r7, [r1, #16]
 800d034:	2f00      	cmp	r7, #0
 800d036:	d0f6      	beq.n	800d026 <__sflush_r+0xae>
 800d038:	0793      	lsls	r3, r2, #30
 800d03a:	680e      	ldr	r6, [r1, #0]
 800d03c:	bf08      	it	eq
 800d03e:	694b      	ldreq	r3, [r1, #20]
 800d040:	600f      	str	r7, [r1, #0]
 800d042:	bf18      	it	ne
 800d044:	2300      	movne	r3, #0
 800d046:	eba6 0807 	sub.w	r8, r6, r7
 800d04a:	608b      	str	r3, [r1, #8]
 800d04c:	f1b8 0f00 	cmp.w	r8, #0
 800d050:	dde9      	ble.n	800d026 <__sflush_r+0xae>
 800d052:	6a21      	ldr	r1, [r4, #32]
 800d054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d056:	4643      	mov	r3, r8
 800d058:	463a      	mov	r2, r7
 800d05a:	4628      	mov	r0, r5
 800d05c:	47b0      	blx	r6
 800d05e:	2800      	cmp	r0, #0
 800d060:	dc08      	bgt.n	800d074 <__sflush_r+0xfc>
 800d062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d06a:	81a3      	strh	r3, [r4, #12]
 800d06c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d074:	4407      	add	r7, r0
 800d076:	eba8 0800 	sub.w	r8, r8, r0
 800d07a:	e7e7      	b.n	800d04c <__sflush_r+0xd4>
 800d07c:	dfbffffe 	.word	0xdfbffffe

0800d080 <_fflush_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	690b      	ldr	r3, [r1, #16]
 800d084:	4605      	mov	r5, r0
 800d086:	460c      	mov	r4, r1
 800d088:	b913      	cbnz	r3, 800d090 <_fflush_r+0x10>
 800d08a:	2500      	movs	r5, #0
 800d08c:	4628      	mov	r0, r5
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	b118      	cbz	r0, 800d09a <_fflush_r+0x1a>
 800d092:	6a03      	ldr	r3, [r0, #32]
 800d094:	b90b      	cbnz	r3, 800d09a <_fflush_r+0x1a>
 800d096:	f7fe fa4f 	bl	800b538 <__sinit>
 800d09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d0f3      	beq.n	800d08a <_fflush_r+0xa>
 800d0a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0a4:	07d0      	lsls	r0, r2, #31
 800d0a6:	d404      	bmi.n	800d0b2 <_fflush_r+0x32>
 800d0a8:	0599      	lsls	r1, r3, #22
 800d0aa:	d402      	bmi.n	800d0b2 <_fflush_r+0x32>
 800d0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ae:	f7fe fb3a 	bl	800b726 <__retarget_lock_acquire_recursive>
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	f7ff ff5f 	bl	800cf78 <__sflush_r>
 800d0ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0bc:	07da      	lsls	r2, r3, #31
 800d0be:	4605      	mov	r5, r0
 800d0c0:	d4e4      	bmi.n	800d08c <_fflush_r+0xc>
 800d0c2:	89a3      	ldrh	r3, [r4, #12]
 800d0c4:	059b      	lsls	r3, r3, #22
 800d0c6:	d4e1      	bmi.n	800d08c <_fflush_r+0xc>
 800d0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ca:	f7fe fb2d 	bl	800b728 <__retarget_lock_release_recursive>
 800d0ce:	e7dd      	b.n	800d08c <_fflush_r+0xc>

0800d0d0 <__swbuf_r>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	460e      	mov	r6, r1
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	b118      	cbz	r0, 800d0e2 <__swbuf_r+0x12>
 800d0da:	6a03      	ldr	r3, [r0, #32]
 800d0dc:	b90b      	cbnz	r3, 800d0e2 <__swbuf_r+0x12>
 800d0de:	f7fe fa2b 	bl	800b538 <__sinit>
 800d0e2:	69a3      	ldr	r3, [r4, #24]
 800d0e4:	60a3      	str	r3, [r4, #8]
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	071a      	lsls	r2, r3, #28
 800d0ea:	d501      	bpl.n	800d0f0 <__swbuf_r+0x20>
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	b943      	cbnz	r3, 800d102 <__swbuf_r+0x32>
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f000 f82a 	bl	800d14c <__swsetup_r>
 800d0f8:	b118      	cbz	r0, 800d102 <__swbuf_r+0x32>
 800d0fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d0fe:	4638      	mov	r0, r7
 800d100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	6922      	ldr	r2, [r4, #16]
 800d106:	1a98      	subs	r0, r3, r2
 800d108:	6963      	ldr	r3, [r4, #20]
 800d10a:	b2f6      	uxtb	r6, r6
 800d10c:	4283      	cmp	r3, r0
 800d10e:	4637      	mov	r7, r6
 800d110:	dc05      	bgt.n	800d11e <__swbuf_r+0x4e>
 800d112:	4621      	mov	r1, r4
 800d114:	4628      	mov	r0, r5
 800d116:	f7ff ffb3 	bl	800d080 <_fflush_r>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d1ed      	bne.n	800d0fa <__swbuf_r+0x2a>
 800d11e:	68a3      	ldr	r3, [r4, #8]
 800d120:	3b01      	subs	r3, #1
 800d122:	60a3      	str	r3, [r4, #8]
 800d124:	6823      	ldr	r3, [r4, #0]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	6022      	str	r2, [r4, #0]
 800d12a:	701e      	strb	r6, [r3, #0]
 800d12c:	6962      	ldr	r2, [r4, #20]
 800d12e:	1c43      	adds	r3, r0, #1
 800d130:	429a      	cmp	r2, r3
 800d132:	d004      	beq.n	800d13e <__swbuf_r+0x6e>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	07db      	lsls	r3, r3, #31
 800d138:	d5e1      	bpl.n	800d0fe <__swbuf_r+0x2e>
 800d13a:	2e0a      	cmp	r6, #10
 800d13c:	d1df      	bne.n	800d0fe <__swbuf_r+0x2e>
 800d13e:	4621      	mov	r1, r4
 800d140:	4628      	mov	r0, r5
 800d142:	f7ff ff9d 	bl	800d080 <_fflush_r>
 800d146:	2800      	cmp	r0, #0
 800d148:	d0d9      	beq.n	800d0fe <__swbuf_r+0x2e>
 800d14a:	e7d6      	b.n	800d0fa <__swbuf_r+0x2a>

0800d14c <__swsetup_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4b29      	ldr	r3, [pc, #164]	@ (800d1f4 <__swsetup_r+0xa8>)
 800d150:	4605      	mov	r5, r0
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	460c      	mov	r4, r1
 800d156:	b118      	cbz	r0, 800d160 <__swsetup_r+0x14>
 800d158:	6a03      	ldr	r3, [r0, #32]
 800d15a:	b90b      	cbnz	r3, 800d160 <__swsetup_r+0x14>
 800d15c:	f7fe f9ec 	bl	800b538 <__sinit>
 800d160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d164:	0719      	lsls	r1, r3, #28
 800d166:	d422      	bmi.n	800d1ae <__swsetup_r+0x62>
 800d168:	06da      	lsls	r2, r3, #27
 800d16a:	d407      	bmi.n	800d17c <__swsetup_r+0x30>
 800d16c:	2209      	movs	r2, #9
 800d16e:	602a      	str	r2, [r5, #0]
 800d170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d174:	81a3      	strh	r3, [r4, #12]
 800d176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d17a:	e033      	b.n	800d1e4 <__swsetup_r+0x98>
 800d17c:	0758      	lsls	r0, r3, #29
 800d17e:	d512      	bpl.n	800d1a6 <__swsetup_r+0x5a>
 800d180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d182:	b141      	cbz	r1, 800d196 <__swsetup_r+0x4a>
 800d184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d188:	4299      	cmp	r1, r3
 800d18a:	d002      	beq.n	800d192 <__swsetup_r+0x46>
 800d18c:	4628      	mov	r0, r5
 800d18e:	f7ff f927 	bl	800c3e0 <_free_r>
 800d192:	2300      	movs	r3, #0
 800d194:	6363      	str	r3, [r4, #52]	@ 0x34
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d19c:	81a3      	strh	r3, [r4, #12]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	6063      	str	r3, [r4, #4]
 800d1a2:	6923      	ldr	r3, [r4, #16]
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f043 0308 	orr.w	r3, r3, #8
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	b94b      	cbnz	r3, 800d1c6 <__swsetup_r+0x7a>
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1bc:	d003      	beq.n	800d1c6 <__swsetup_r+0x7a>
 800d1be:	4621      	mov	r1, r4
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f000 f8b3 	bl	800d32c <__smakebuf_r>
 800d1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ca:	f013 0201 	ands.w	r2, r3, #1
 800d1ce:	d00a      	beq.n	800d1e6 <__swsetup_r+0x9a>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	60a2      	str	r2, [r4, #8]
 800d1d4:	6962      	ldr	r2, [r4, #20]
 800d1d6:	4252      	negs	r2, r2
 800d1d8:	61a2      	str	r2, [r4, #24]
 800d1da:	6922      	ldr	r2, [r4, #16]
 800d1dc:	b942      	cbnz	r2, 800d1f0 <__swsetup_r+0xa4>
 800d1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1e2:	d1c5      	bne.n	800d170 <__swsetup_r+0x24>
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	0799      	lsls	r1, r3, #30
 800d1e8:	bf58      	it	pl
 800d1ea:	6962      	ldrpl	r2, [r4, #20]
 800d1ec:	60a2      	str	r2, [r4, #8]
 800d1ee:	e7f4      	b.n	800d1da <__swsetup_r+0x8e>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e7f7      	b.n	800d1e4 <__swsetup_r+0x98>
 800d1f4:	20000018 	.word	0x20000018

0800d1f8 <_sbrk_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d06      	ldr	r5, [pc, #24]	@ (800d214 <_sbrk_r+0x1c>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	f7f7 f802 	bl	800420c <_sbrk>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_sbrk_r+0x1a>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_sbrk_r+0x1a>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	20000ec0 	.word	0x20000ec0

0800d218 <__assert_func>:
 800d218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d21a:	4614      	mov	r4, r2
 800d21c:	461a      	mov	r2, r3
 800d21e:	4b09      	ldr	r3, [pc, #36]	@ (800d244 <__assert_func+0x2c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4605      	mov	r5, r0
 800d224:	68d8      	ldr	r0, [r3, #12]
 800d226:	b954      	cbnz	r4, 800d23e <__assert_func+0x26>
 800d228:	4b07      	ldr	r3, [pc, #28]	@ (800d248 <__assert_func+0x30>)
 800d22a:	461c      	mov	r4, r3
 800d22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d230:	9100      	str	r1, [sp, #0]
 800d232:	462b      	mov	r3, r5
 800d234:	4905      	ldr	r1, [pc, #20]	@ (800d24c <__assert_func+0x34>)
 800d236:	f000 f841 	bl	800d2bc <fiprintf>
 800d23a:	f000 f8d5 	bl	800d3e8 <abort>
 800d23e:	4b04      	ldr	r3, [pc, #16]	@ (800d250 <__assert_func+0x38>)
 800d240:	e7f4      	b.n	800d22c <__assert_func+0x14>
 800d242:	bf00      	nop
 800d244:	20000018 	.word	0x20000018
 800d248:	0800ed66 	.word	0x0800ed66
 800d24c:	0800ed38 	.word	0x0800ed38
 800d250:	0800ed2b 	.word	0x0800ed2b

0800d254 <_calloc_r>:
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	fba1 5402 	umull	r5, r4, r1, r2
 800d25a:	b93c      	cbnz	r4, 800d26c <_calloc_r+0x18>
 800d25c:	4629      	mov	r1, r5
 800d25e:	f7ff f933 	bl	800c4c8 <_malloc_r>
 800d262:	4606      	mov	r6, r0
 800d264:	b928      	cbnz	r0, 800d272 <_calloc_r+0x1e>
 800d266:	2600      	movs	r6, #0
 800d268:	4630      	mov	r0, r6
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
 800d26c:	220c      	movs	r2, #12
 800d26e:	6002      	str	r2, [r0, #0]
 800d270:	e7f9      	b.n	800d266 <_calloc_r+0x12>
 800d272:	462a      	mov	r2, r5
 800d274:	4621      	mov	r1, r4
 800d276:	f7fe f9d8 	bl	800b62a <memset>
 800d27a:	e7f5      	b.n	800d268 <_calloc_r+0x14>

0800d27c <__ascii_mbtowc>:
 800d27c:	b082      	sub	sp, #8
 800d27e:	b901      	cbnz	r1, 800d282 <__ascii_mbtowc+0x6>
 800d280:	a901      	add	r1, sp, #4
 800d282:	b142      	cbz	r2, 800d296 <__ascii_mbtowc+0x1a>
 800d284:	b14b      	cbz	r3, 800d29a <__ascii_mbtowc+0x1e>
 800d286:	7813      	ldrb	r3, [r2, #0]
 800d288:	600b      	str	r3, [r1, #0]
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	1e10      	subs	r0, r2, #0
 800d28e:	bf18      	it	ne
 800d290:	2001      	movne	r0, #1
 800d292:	b002      	add	sp, #8
 800d294:	4770      	bx	lr
 800d296:	4610      	mov	r0, r2
 800d298:	e7fb      	b.n	800d292 <__ascii_mbtowc+0x16>
 800d29a:	f06f 0001 	mvn.w	r0, #1
 800d29e:	e7f8      	b.n	800d292 <__ascii_mbtowc+0x16>

0800d2a0 <__ascii_wctomb>:
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	b141      	cbz	r1, 800d2b8 <__ascii_wctomb+0x18>
 800d2a6:	2aff      	cmp	r2, #255	@ 0xff
 800d2a8:	d904      	bls.n	800d2b4 <__ascii_wctomb+0x14>
 800d2aa:	228a      	movs	r2, #138	@ 0x8a
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2b2:	4770      	bx	lr
 800d2b4:	700a      	strb	r2, [r1, #0]
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	4770      	bx	lr
	...

0800d2bc <fiprintf>:
 800d2bc:	b40e      	push	{r1, r2, r3}
 800d2be:	b503      	push	{r0, r1, lr}
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	4805      	ldr	r0, [pc, #20]	@ (800d2dc <fiprintf+0x20>)
 800d2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ca:	6800      	ldr	r0, [r0, #0]
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	f7ff fd3b 	bl	800cd48 <_vfiprintf_r>
 800d2d2:	b002      	add	sp, #8
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	b003      	add	sp, #12
 800d2da:	4770      	bx	lr
 800d2dc:	20000018 	.word	0x20000018

0800d2e0 <__swhatbuf_r>:
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e8:	2900      	cmp	r1, #0
 800d2ea:	b096      	sub	sp, #88	@ 0x58
 800d2ec:	4615      	mov	r5, r2
 800d2ee:	461e      	mov	r6, r3
 800d2f0:	da0d      	bge.n	800d30e <__swhatbuf_r+0x2e>
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2f8:	f04f 0100 	mov.w	r1, #0
 800d2fc:	bf14      	ite	ne
 800d2fe:	2340      	movne	r3, #64	@ 0x40
 800d300:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d304:	2000      	movs	r0, #0
 800d306:	6031      	str	r1, [r6, #0]
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	b016      	add	sp, #88	@ 0x58
 800d30c:	bd70      	pop	{r4, r5, r6, pc}
 800d30e:	466a      	mov	r2, sp
 800d310:	f000 f848 	bl	800d3a4 <_fstat_r>
 800d314:	2800      	cmp	r0, #0
 800d316:	dbec      	blt.n	800d2f2 <__swhatbuf_r+0x12>
 800d318:	9901      	ldr	r1, [sp, #4]
 800d31a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d31e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d322:	4259      	negs	r1, r3
 800d324:	4159      	adcs	r1, r3
 800d326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d32a:	e7eb      	b.n	800d304 <__swhatbuf_r+0x24>

0800d32c <__smakebuf_r>:
 800d32c:	898b      	ldrh	r3, [r1, #12]
 800d32e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d330:	079d      	lsls	r5, r3, #30
 800d332:	4606      	mov	r6, r0
 800d334:	460c      	mov	r4, r1
 800d336:	d507      	bpl.n	800d348 <__smakebuf_r+0x1c>
 800d338:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	6123      	str	r3, [r4, #16]
 800d340:	2301      	movs	r3, #1
 800d342:	6163      	str	r3, [r4, #20]
 800d344:	b003      	add	sp, #12
 800d346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d348:	ab01      	add	r3, sp, #4
 800d34a:	466a      	mov	r2, sp
 800d34c:	f7ff ffc8 	bl	800d2e0 <__swhatbuf_r>
 800d350:	9f00      	ldr	r7, [sp, #0]
 800d352:	4605      	mov	r5, r0
 800d354:	4639      	mov	r1, r7
 800d356:	4630      	mov	r0, r6
 800d358:	f7ff f8b6 	bl	800c4c8 <_malloc_r>
 800d35c:	b948      	cbnz	r0, 800d372 <__smakebuf_r+0x46>
 800d35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d362:	059a      	lsls	r2, r3, #22
 800d364:	d4ee      	bmi.n	800d344 <__smakebuf_r+0x18>
 800d366:	f023 0303 	bic.w	r3, r3, #3
 800d36a:	f043 0302 	orr.w	r3, r3, #2
 800d36e:	81a3      	strh	r3, [r4, #12]
 800d370:	e7e2      	b.n	800d338 <__smakebuf_r+0xc>
 800d372:	89a3      	ldrh	r3, [r4, #12]
 800d374:	6020      	str	r0, [r4, #0]
 800d376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d382:	b15b      	cbz	r3, 800d39c <__smakebuf_r+0x70>
 800d384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d388:	4630      	mov	r0, r6
 800d38a:	f000 f81d 	bl	800d3c8 <_isatty_r>
 800d38e:	b128      	cbz	r0, 800d39c <__smakebuf_r+0x70>
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	f023 0303 	bic.w	r3, r3, #3
 800d396:	f043 0301 	orr.w	r3, r3, #1
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	431d      	orrs	r5, r3
 800d3a0:	81a5      	strh	r5, [r4, #12]
 800d3a2:	e7cf      	b.n	800d344 <__smakebuf_r+0x18>

0800d3a4 <_fstat_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4d07      	ldr	r5, [pc, #28]	@ (800d3c4 <_fstat_r+0x20>)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	602b      	str	r3, [r5, #0]
 800d3b2:	f7f6 ff03 	bl	80041bc <_fstat>
 800d3b6:	1c43      	adds	r3, r0, #1
 800d3b8:	d102      	bne.n	800d3c0 <_fstat_r+0x1c>
 800d3ba:	682b      	ldr	r3, [r5, #0]
 800d3bc:	b103      	cbz	r3, 800d3c0 <_fstat_r+0x1c>
 800d3be:	6023      	str	r3, [r4, #0]
 800d3c0:	bd38      	pop	{r3, r4, r5, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20000ec0 	.word	0x20000ec0

0800d3c8 <_isatty_r>:
 800d3c8:	b538      	push	{r3, r4, r5, lr}
 800d3ca:	4d06      	ldr	r5, [pc, #24]	@ (800d3e4 <_isatty_r+0x1c>)
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	4608      	mov	r0, r1
 800d3d2:	602b      	str	r3, [r5, #0]
 800d3d4:	f7f6 ff02 	bl	80041dc <_isatty>
 800d3d8:	1c43      	adds	r3, r0, #1
 800d3da:	d102      	bne.n	800d3e2 <_isatty_r+0x1a>
 800d3dc:	682b      	ldr	r3, [r5, #0]
 800d3de:	b103      	cbz	r3, 800d3e2 <_isatty_r+0x1a>
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}
 800d3e4:	20000ec0 	.word	0x20000ec0

0800d3e8 <abort>:
 800d3e8:	b508      	push	{r3, lr}
 800d3ea:	2006      	movs	r0, #6
 800d3ec:	f000 f82c 	bl	800d448 <raise>
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	f7f6 fe93 	bl	800411c <_exit>

0800d3f6 <_raise_r>:
 800d3f6:	291f      	cmp	r1, #31
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	d904      	bls.n	800d40a <_raise_r+0x14>
 800d400:	2316      	movs	r3, #22
 800d402:	6003      	str	r3, [r0, #0]
 800d404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d408:	bd38      	pop	{r3, r4, r5, pc}
 800d40a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d40c:	b112      	cbz	r2, 800d414 <_raise_r+0x1e>
 800d40e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d412:	b94b      	cbnz	r3, 800d428 <_raise_r+0x32>
 800d414:	4628      	mov	r0, r5
 800d416:	f000 f831 	bl	800d47c <_getpid_r>
 800d41a:	4622      	mov	r2, r4
 800d41c:	4601      	mov	r1, r0
 800d41e:	4628      	mov	r0, r5
 800d420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d424:	f000 b818 	b.w	800d458 <_kill_r>
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d00a      	beq.n	800d442 <_raise_r+0x4c>
 800d42c:	1c59      	adds	r1, r3, #1
 800d42e:	d103      	bne.n	800d438 <_raise_r+0x42>
 800d430:	2316      	movs	r3, #22
 800d432:	6003      	str	r3, [r0, #0]
 800d434:	2001      	movs	r0, #1
 800d436:	e7e7      	b.n	800d408 <_raise_r+0x12>
 800d438:	2100      	movs	r1, #0
 800d43a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d43e:	4620      	mov	r0, r4
 800d440:	4798      	blx	r3
 800d442:	2000      	movs	r0, #0
 800d444:	e7e0      	b.n	800d408 <_raise_r+0x12>
	...

0800d448 <raise>:
 800d448:	4b02      	ldr	r3, [pc, #8]	@ (800d454 <raise+0xc>)
 800d44a:	4601      	mov	r1, r0
 800d44c:	6818      	ldr	r0, [r3, #0]
 800d44e:	f7ff bfd2 	b.w	800d3f6 <_raise_r>
 800d452:	bf00      	nop
 800d454:	20000018 	.word	0x20000018

0800d458 <_kill_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d07      	ldr	r5, [pc, #28]	@ (800d478 <_kill_r+0x20>)
 800d45c:	2300      	movs	r3, #0
 800d45e:	4604      	mov	r4, r0
 800d460:	4608      	mov	r0, r1
 800d462:	4611      	mov	r1, r2
 800d464:	602b      	str	r3, [r5, #0]
 800d466:	f7f6 fe49 	bl	80040fc <_kill>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	d102      	bne.n	800d474 <_kill_r+0x1c>
 800d46e:	682b      	ldr	r3, [r5, #0]
 800d470:	b103      	cbz	r3, 800d474 <_kill_r+0x1c>
 800d472:	6023      	str	r3, [r4, #0]
 800d474:	bd38      	pop	{r3, r4, r5, pc}
 800d476:	bf00      	nop
 800d478:	20000ec0 	.word	0x20000ec0

0800d47c <_getpid_r>:
 800d47c:	f7f6 be36 	b.w	80040ec <_getpid>

0800d480 <_init>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	bf00      	nop
 800d484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d486:	bc08      	pop	{r3}
 800d488:	469e      	mov	lr, r3
 800d48a:	4770      	bx	lr

0800d48c <_fini>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	bf00      	nop
 800d490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d492:	bc08      	pop	{r3}
 800d494:	469e      	mov	lr, r3
 800d496:	4770      	bx	lr
