
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b00  0800d288  0800d288  0000e288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed88  0800ed88  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed88  0800ed88  0000fd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed90  0800ed90  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ed90  0800ed90  0000fd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed98  0800ed98  0000fd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ed9c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  200001d4  0800ef70  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  0800ef70  00011018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002383b  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425d  00000000  00000000  00033a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00037ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001193  00000000  00000000  000393d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fa1  00000000  00000000  0003a56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b429  00000000  00000000  0006150c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f063b  00000000  00000000  0007c935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000fb  00000000  00000000  0016cf70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007440  00000000  00000000  0016d06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001744ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000284c  00000000  00000000  0017451b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  00176d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d270 	.word	0x0800d270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d270 	.word	0x0800d270

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0a5a      	lsrs	r2, r3, #9
 8000ee8:	490f      	ldr	r1, [pc, #60]	@ (8000f28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000eea:	fba1 1202 	umull	r1, r2, r1, r2
 8000eee:	09d2      	lsrs	r2, r2, #7
 8000ef0:	490e      	ldr	r1, [pc, #56]	@ (8000f2c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ef2:	fb01 f202 	mul.w	r2, r1, r2
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	09db      	lsrs	r3, r3, #7
 8000f08:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	441a      	add	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	00044b83 	.word	0x00044b83
 8000f2c:	3b9aca00 	.word	0x3b9aca00

08000f30 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	0800d62c 	.word	0x0800d62c

08000f74 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
      data()
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffe8 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffce 	bl	8000f30 <_ZN3ros4TimeC1Ev>
    {
    }
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0800d614 	.word	0x0800d614

08000fa4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	0a19      	lsrs	r1, r3, #8
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	0c19      	lsrs	r1, r3, #16
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	0e19      	lsrs	r1, r3, #24
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3303      	adds	r3, #3
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6899      	ldr	r1, [r3, #8]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	0a19      	lsrs	r1, r3, #8
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	4413      	add	r3, r2
 8001018:	b2ca      	uxtb	r2, r1
 800101a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	0c19      	lsrs	r1, r3, #16
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3302      	adds	r3, #2
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	0e19      	lsrs	r1, r3, #24
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3303      	adds	r3, #3
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3304      	adds	r3, #4
 8001044:	60fb      	str	r3, [r7, #12]
      return offset;
 8001046:	68fb      	ldr	r3, [r7, #12]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	440b      	add	r3, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3302      	adds	r3, #2
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3303      	adds	r3, #3
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	440b      	add	r3, r1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3304      	adds	r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	440b      	add	r3, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3302      	adds	r3, #2
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	440b      	add	r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3303      	adds	r3, #3
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	440b      	add	r3, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	061b      	lsls	r3, r3, #24
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3304      	adds	r3, #4
 800110c:	60fb      	str	r3, [r7, #12]
     return offset;
 800110e:	68fb      	ldr	r3, [r7, #12]
    }
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	0800d288 	.word	0x0800d288

08001138 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	0800d298 	.word	0x0800d298

08001154 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fef8 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001174:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800117a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001180:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
    {
    }
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800d5fc 	.word	0x0800d5fc
 8001198:	0800d2bc 	.word	0x0800d2bc

0800119c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8899      	ldrh	r1, [r3, #4]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2ca      	uxtb	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b299      	uxth	r1, r3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3302      	adds	r3, #2
 80011d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f84a 	bl	8000270 <strlen>
 80011dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fa0a 	bl	8003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	3304      	adds	r3, #4
 80011f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	18d0      	adds	r0, r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4619      	mov	r1, r3
 8001200:	f00a f98b 	bl	800b51a <memcpy>
      offset += length_topic_name;
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4413      	add	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f82d 	bl	8000270 <strlen>
 8001216:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	4618      	mov	r0, r3
 8001222:	f002 f9ed 	bl	8003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	18d0      	adds	r0, r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4619      	mov	r1, r3
 800123a:	f00a f96e 	bl	800b51a <memcpy>
      offset += length_message_type;
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f810 	bl	8000270 <strlen>
 8001250:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	4618      	mov	r0, r3
 800125c:	f002 f9d0 	bl	8003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3304      	adds	r3, #4
 8001264:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	18d0      	adds	r0, r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4619      	mov	r1, r3
 8001274:	f00a f951 	bl	800b51a <memcpy>
      offset += length_md5sum;
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4413      	add	r3, r2
 800127e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	0a19      	lsrs	r1, r3, #8
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0c19      	lsrs	r1, r3, #16
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3302      	adds	r3, #2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	0e19      	lsrs	r1, r3, #24
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3303      	adds	r3, #3
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80012c8:	69fb      	ldr	r3, [r7, #28]
    }
 80012ca:	4618      	mov	r0, r3
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08a      	sub	sp, #40	@ 0x28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	889b      	ldrh	r3, [r3, #4]
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3301      	adds	r3, #1
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	440b      	add	r3, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3302      	adds	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	441a      	add	r2, r3
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f98d 	bl	800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3304      	adds	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
 800132e:	e00b      	b.n	8001348 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	441a      	add	r2, r3
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	3b01      	subs	r3, #1
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	440b      	add	r3, r1
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4413      	add	r3, r2
 800134e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001350:	429a      	cmp	r2, r3
 8001352:	d3ed      	bcc.n	8001330 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	3b01      	subs	r3, #1
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4413      	add	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b01      	subs	r3, #1
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	441a      	add	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	4413      	add	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	441a      	add	r2, r3
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f002 f95a 	bl	800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3304      	adds	r3, #4
 800138e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	623b      	str	r3, [r7, #32]
 8001394:	e00b      	b.n	80013ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	441a      	add	r2, r3
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	440b      	add	r3, r1
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	3301      	adds	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4413      	add	r3, r2
 80013b4:	6a3a      	ldr	r2, [r7, #32]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d3ed      	bcc.n	8001396 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	3b01      	subs	r3, #1
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	441a      	add	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	441a      	add	r2, r3
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 f927 	bl	800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3304      	adds	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e00b      	b.n	8001414 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	441a      	add	r2, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b01      	subs	r3, #1
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	440b      	add	r3, r1
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3ed      	bcc.n	80013fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	3b01      	subs	r3, #1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	3b01      	subs	r3, #1
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	441a      	add	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	440a      	add	r2, r1
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	3301      	adds	r3, #1
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	440b      	add	r3, r1
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	4313      	orrs	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	3302      	adds	r3, #2
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	440b      	add	r3, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	4313      	orrs	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	3303      	adds	r3, #3
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	061b      	lsls	r3, r3, #24
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3304      	adds	r3, #4
 8001496:	61bb      	str	r3, [r7, #24]
     return offset;
 8001498:	69bb      	ldr	r3, [r7, #24]
    }
 800149a:	4618      	mov	r0, r3
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	0800d2c0 	.word	0x0800d2c0

080014c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0800d2dc 	.word	0x0800d2dc

080014dc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fd34 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
      level(0),
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
      msg("")
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014fc:	609a      	str	r2, [r3, #8]
    {
    }
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800d5e4 	.word	0x0800d5e4
 800150c:	0800d2bc 	.word	0x0800d2bc

08001510 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	4413      	add	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	7912      	ldrb	r2, [r2, #4]
 8001528:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe9b 	bl	8000270 <strlen>
 800153a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 f85b 	bl	8003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3304      	adds	r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	18d0      	adds	r0, r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4619      	mov	r1, r3
 800155e:	f009 ffdc 	bl	800b51a <memcpy>
      offset += length_msg;
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
      return offset;
 800156a:	68fb      	ldr	r3, [r7, #12]
    }
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	441a      	add	r2, r3
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 f84c 	bl	800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3304      	adds	r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00b      	b.n	80015ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	441a      	add	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	440b      	add	r3, r1
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3ed      	bcc.n	80015b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	3b01      	subs	r3, #1
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	441a      	add	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
     return offset;
 80015fa:	693b      	ldr	r3, [r7, #16]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0800d300 	.word	0x0800d300

08001620 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	0800d314 	.word	0x0800d314

0800163c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc84 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 800164c:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	0800d5cc 	.word	0x0800d5cc

08001698 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6859      	ldr	r1, [r3, #4]
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	b2ca      	uxtb	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0a19      	lsrs	r1, r3, #8
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	3301      	adds	r3, #1
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0c19      	lsrs	r1, r3, #16
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	3302      	adds	r3, #2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	b2ca      	uxtb	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	0e19      	lsrs	r1, r3, #24
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	3303      	adds	r3, #3
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	3304      	adds	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	e02a      	b.n	800174c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	0a19      	lsrs	r1, r3, #8
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	3301      	adds	r3, #1
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4413      	add	r3, r2
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	0c19      	lsrs	r1, r3, #16
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	3302      	adds	r3, #2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	0e19      	lsrs	r1, r3, #24
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	3303      	adds	r3, #3
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	3304      	adds	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	3301      	adds	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	429a      	cmp	r2, r3
 8001754:	d3cf      	bcc.n	80016f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	0a19      	lsrs	r1, r3, #8
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	0c19      	lsrs	r1, r3, #16
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	3302      	adds	r3, #2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	0e19      	lsrs	r1, r3, #24
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	3303      	adds	r3, #3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	3304      	adds	r3, #4
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e02a      	b.n	80017fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	0a19      	lsrs	r1, r3, #8
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	b2ca      	uxtb	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0c19      	lsrs	r1, r3, #16
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	3302      	adds	r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0e19      	lsrs	r1, r3, #24
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	3303      	adds	r3, #3
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	b2ca      	uxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	3304      	adds	r3, #4
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3cf      	bcc.n	80017a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69d9      	ldr	r1, [r3, #28]
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	0a19      	lsrs	r1, r3, #8
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	0c19      	lsrs	r1, r3, #16
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	3302      	adds	r3, #2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	0e19      	lsrs	r1, r3, #24
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	3303      	adds	r3, #3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	3304      	adds	r3, #4
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e027      	b.n	80018a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fd04 	bl	8000270 <strlen>
 8001868:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fec4 	bl	8003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	3304      	adds	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	18d0      	adds	r0, r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4619      	mov	r1, r3
 8001894:	f009 fe41 	bl	800b51a <memcpy>
      offset += length_stringsi;
 8001898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4413      	add	r3, r2
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	3301      	adds	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3d2      	bcc.n	8001856 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80018b2:	4618      	mov	r0, r3
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b08e      	sub	sp, #56	@ 0x38
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d4:	3301      	adds	r3, #1
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	6a3a      	ldr	r2, [r7, #32]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e6:	3302      	adds	r3, #2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	6a3a      	ldr	r2, [r7, #32]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f8:	3303      	adds	r3, #3
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	4313      	orrs	r3, r2
 8001906:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190a:	3304      	adds	r3, #4
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	6a3a      	ldr	r2, [r7, #32]
 8001914:	429a      	cmp	r2, r3
 8001916:	d90a      	bls.n	800192e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f008 ffe6 	bl	800a8f4 <realloc>
 8001928:	4602      	mov	r2, r0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	@ 0x30
 8001938:	e035      	b.n	80019a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	440a      	add	r2, r1
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001950:	3301      	adds	r3, #1
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	440b      	add	r3, r1
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	3302      	adds	r3, #2
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	440b      	add	r3, r1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	3303      	adds	r3, #3
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440b      	add	r3, r1
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	3304      	adds	r3, #4
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80019a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a2:	3301      	adds	r3, #1
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3c4      	bcc.n	800193a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019bc:	3301      	adds	r3, #1
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	3302      	adds	r3, #2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	3303      	adds	r3, #3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80019f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f2:	3304      	adds	r3, #4
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d90a      	bls.n	8001a16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f008 ff72 	bl	800a8f4 <realloc>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a20:	e035      	b.n	8001a8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	440a      	add	r2, r1
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a38:	3301      	adds	r3, #1
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	440b      	add	r3, r1
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5c:	3303      	adds	r3, #3
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	440b      	add	r3, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	3304      	adds	r3, #4
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	3214      	adds	r2, #20
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3c4      	bcc.n	8001a22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac8:	3303      	adds	r3, #3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ada:	3304      	adds	r3, #4
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d90a      	bls.n	8001afe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f008 fefe 	bl	800a8f4 <realloc>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b08:	e03e      	b.n	8001b88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	441a      	add	r2, r3
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fd91 	bl	800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b1e:	3304      	adds	r3, #4
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b26:	e00b      	b.n	8001b40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	441a      	add	r2, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	3b01      	subs	r3, #1
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	440b      	add	r3, r1
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3ed      	bcc.n	8001b28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	3b01      	subs	r3, #1
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	441a      	add	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	3220      	adds	r2, #32
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b84:	3301      	adds	r3, #1
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3bb      	bcc.n	8001b0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001b94:	4618      	mov	r0, r3
 8001b96:	3738      	adds	r7, #56	@ 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	0800d520 	.word	0x0800d520

08001bb8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	0800d338 	.word	0x0800d338

08001bd4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68d8      	ldr	r0, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6891      	ldr	r1, [r2, #8]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4798      	blx	r3
 8001c20:	4603      	mov	r3, r0
  };
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
  }
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <_ZN13STM32HardwareC1Ev+0x34>)
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	200002ec 	.word	0x200002ec

08001ca0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f804 	bl	8001cb6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f006 fbd8 	bl	8008480 <HAL_UART_Receive_DMA>
    }
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffa8 	bl	8001c42 <_ZN13STM32Hardware10getRdmaIndEv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	429c      	cmp	r4, r3
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001d08:	1c59      	adds	r1, r3, #1
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8001d28:	68fb      	ldr	r3, [r7, #12]
    }
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
	...

08001d34 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d108      	bne.n	8001d58 <_ZN13STM32Hardware5flushEv+0x24>
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <_ZN13STM32Hardware5flushEv+0x24>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <_ZN13STM32Hardware5flushEv+0x26>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d055      	beq.n	8001e0a <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d047      	beq.n	8001e04 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d217      	bcs.n	8001db8 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001da6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	89fa      	ldrh	r2, [r7, #14]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f006 fae9 	bl	8008388 <HAL_UART_Transmit_DMA>
 8001db6:	e01f      	b.n	8001df8 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001dc4:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001dd0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	89fa      	ldrh	r2, [r7, #14]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f006 fad4 	bl	8008388 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 7102 	add.w	r1, r3, #520	@ 0x208
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	f006 fac8 	bl	8008388 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
      }
    }
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001f0 	.word	0x200001f0

08001e18 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
      int n = length;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e2e:	bfa8      	it	ge
 8001e30:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8001e34:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001e3c:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4293      	cmp	r3, r2
 8001e44:	bf28      	it	cs
 8001e46:	4613      	movcs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001e50:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f009 fb5c 	bl	800b51a <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d00b      	beq.n	8001e96 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	18d1      	adds	r1, r2, r3
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	f009 fb42 	bl	800b51a <memcpy>
      }

      flush();
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff ff4c 	bl	8001d34 <_ZN13STM32Hardware5flushEv>
    }
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	f002 fd4e 	bl	800494c <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <_ZN8auv_msgs20PingerTimeDifferenceC1Ev>:
      uint32_t times_length;
      typedef uint32_t _times_type;
      _times_type st_times;
      _times_type * times;

    PingerTimeDifference():
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
      frequency(0),
      times_length(0), st_times(), times(nullptr)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f844 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8001ecc:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <_ZN8auv_msgs20PingerTimeDifferenceC1Ev+0x38>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]
      frequency(0),
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
      times_length(0), st_times(), times(nullptr)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
    {
    }
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800d5a0 	.word	0x0800d5a0

08001ef8 <_ZNK8auv_msgs20PingerTimeDifference9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_frequency;
      u_frequency.real = this->frequency;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_frequency.base >> (8 * 0)) & 0xFF;
 8001f0c:	68f9      	ldr	r1, [r7, #12]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	b2ca      	uxtb	r2, r1
 8001f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_frequency.base >> (8 * 1)) & 0xFF;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0a19      	lsrs	r1, r3, #8
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_frequency.base >> (8 * 2)) & 0xFF;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	0c19      	lsrs	r1, r3, #16
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	b2ca      	uxtb	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_frequency.base >> (8 * 3)) & 0xFF;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0e19      	lsrs	r1, r3, #24
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->frequency);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->times_length >> (8 * 0)) & 0xFF;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->times_length >> (8 * 1)) & 0xFF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	0a19      	lsrs	r1, r3, #8
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->times_length >> (8 * 2)) & 0xFF;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0c19      	lsrs	r1, r3, #16
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3302      	adds	r3, #2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->times_length >> (8 * 3)) & 0xFF;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	0e19      	lsrs	r1, r3, #24
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->times_length);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3304      	adds	r3, #4
 8001f96:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < times_length; i++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e037      	b.n	800200e <_ZNK8auv_msgs20PingerTimeDifference9serializeEPh+0x116>
      *(outbuffer + offset + 0) = (this->times[i] >> (8 * 0)) & 0xFF;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b2ca      	uxtb	r2, r1
 8001fb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->times[i] >> (8 * 1)) & 0xFF;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a19      	lsrs	r1, r3, #8
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->times[i] >> (8 * 2)) & 0xFF;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0c19      	lsrs	r1, r3, #16
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3302      	adds	r3, #2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->times[i] >> (8 * 3)) & 0xFF;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e19      	lsrs	r1, r3, #24
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->times[i]);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < times_length; i++){
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	3301      	adds	r3, #1
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3c2      	bcc.n	8001f9e <_ZNK8auv_msgs20PingerTimeDifference9serializeEPh+0xa6>
      }
      return offset;
 8002018:	697b      	ldr	r3, [r7, #20]
    }
 800201a:	4618      	mov	r0, r3
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_frequency;
      u_frequency.base = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	440a      	add	r2, r1
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	440b      	add	r3, r1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3302      	adds	r3, #2
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	440b      	add	r3, r1
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	4313      	orrs	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
      u_frequency.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3303      	adds	r3, #3
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	4313      	orrs	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
      this->frequency = u_frequency.real;
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->frequency);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]
      uint32_t times_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
      times_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
      times_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3302      	adds	r3, #2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
      times_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3303      	adds	r3, #3
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->times_length);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3304      	adds	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
      if(times_lengthT > times_length)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d90a      	bls.n	80020ee <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh+0xc8>
        this->times = (uint32_t*)realloc(this->times, times_lengthT * sizeof(uint32_t));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f008 fc06 	bl	800a8f4 <realloc>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
      times_length = times_lengthT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]
      for( uint32_t i = 0; i < times_length; i++){
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e036      	b.n	8002168 <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh+0x142>
      this->st_times =  ((uint32_t) (*(inbuffer + offset)));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
      this->st_times |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	440b      	add	r3, r1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
      this->st_times |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3302      	adds	r3, #2
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	440b      	add	r3, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]
      this->st_times |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3303      	adds	r3, #3
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	440b      	add	r3, r1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->st_times);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3304      	adds	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
        memcpy( &(this->times[i]), &(this->st_times), sizeof(uint32_t));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	320c      	adds	r2, #12
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < times_length; i++){
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	3301      	adds	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3c3      	bcc.n	80020fa <_ZN8auv_msgs20PingerTimeDifference11deserializeEPh+0xd4>
      }
     return offset;
 8002172:	697b      	ldr	r3, [r7, #20]
    }
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN8auv_msgs20PingerTimeDifference7getTypeEv>:

    virtual const char * getType() override { return "auv_msgs/PingerTimeDifference"; };
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <_ZN8auv_msgs20PingerTimeDifference7getTypeEv+0x18>)
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0800d35c 	.word	0x0800d35c

08002198 <_ZN8auv_msgs20PingerTimeDifference6getMD5Ev>:
    virtual const char * getMD5() override { return "190b09a555ef19ac4b340cefab903ff1"; };
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <_ZN8auv_msgs20PingerTimeDifference6getMD5Ev+0x18>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	0800d37c 	.word	0x0800d37c

080021b4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fec8 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 80021c4:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
      label(""),
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80021ce:	605a      	str	r2, [r3, #4]
      size(0),
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
      stride(0)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
    {
    }
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	0800d588 	.word	0x0800d588
 80021ec:	0800d2bc 	.word	0x0800d2bc

080021f0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f834 	bl	8000270 <strlen>
 8002208:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	4413      	add	r3, r2
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	4618      	mov	r0, r3
 8002214:	f001 f9f4 	bl	8003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3304      	adds	r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	18d0      	adds	r0, r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	4619      	mov	r1, r3
 800222c:	f009 f975 	bl	800b51a <memcpy>
      offset += length_label;
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4413      	add	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4413      	add	r3, r2
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a19      	lsrs	r1, r3, #8
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4413      	add	r3, r2
 8002254:	b2ca      	uxtb	r2, r1
 8002256:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	0c19      	lsrs	r1, r3, #16
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3302      	adds	r3, #2
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4413      	add	r3, r2
 8002266:	b2ca      	uxtb	r2, r1
 8002268:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0e19      	lsrs	r1, r3, #24
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3303      	adds	r3, #3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4413      	add	r3, r2
 8002278:	b2ca      	uxtb	r2, r1
 800227a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3304      	adds	r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68d9      	ldr	r1, [r3, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4413      	add	r3, r2
 800228c:	b2ca      	uxtb	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a19      	lsrs	r1, r3, #8
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	b2ca      	uxtb	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0c19      	lsrs	r1, r3, #16
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3302      	adds	r3, #2
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0e19      	lsrs	r1, r3, #24
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3303      	adds	r3, #3
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3304      	adds	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
      return offset;
 80022cc:	68fb      	ldr	r3, [r7, #12]
    }
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	441a      	add	r2, r3
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f9a4 	bl	800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3304      	adds	r3, #4
 80022fa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00b      	b.n	800231a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	441a      	add	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3b01      	subs	r3, #1
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	440b      	add	r3, r1
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3ed      	bcc.n	8002302 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	3b01      	subs	r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4413      	add	r3, r2
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3b01      	subs	r3, #1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	3301      	adds	r3, #1
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	440b      	add	r3, r1
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3302      	adds	r3, #2
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	440b      	add	r3, r1
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	3303      	adds	r3, #3
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	440b      	add	r3, r1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	3304      	adds	r3, #4
 800239e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	3301      	adds	r3, #1
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	440b      	add	r3, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	3302      	adds	r3, #2
 80023cc:	6839      	ldr	r1, [r7, #0]
 80023ce:	440b      	add	r3, r1
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	3303      	adds	r3, #3
 80023e2:	6839      	ldr	r1, [r7, #0]
 80023e4:	440b      	add	r3, r1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	3304      	adds	r3, #4
 80023f4:	613b      	str	r3, [r7, #16]
     return offset;
 80023f6:	693b      	ldr	r3, [r7, #16]
    }
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	0800d3a0 	.word	0x0800d3a0

0800241c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	0800d3c0 	.word	0x0800d3c0

08002438 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fd86 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 8002448:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3308      	adds	r3, #8
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff feab 	bl	80021b4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    {
    }
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	0800d570 	.word	0x0800d570

08002478 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	4413      	add	r3, r2
 8002490:	b2ca      	uxtb	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	0a19      	lsrs	r1, r3, #8
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0c19      	lsrs	r1, r3, #16
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3302      	adds	r3, #2
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	b2ca      	uxtb	r2, r1
 80024b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0e19      	lsrs	r1, r3, #24
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3303      	adds	r3, #3
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	b2ca      	uxtb	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3304      	adds	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	e017      	b.n	8002506 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	18d0      	adds	r0, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699a      	ldr	r2, [r3, #24]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	440a      	add	r2, r1
 80024f4:	4611      	mov	r1, r2
 80024f6:	4798      	blx	r3
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3301      	adds	r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3e2      	bcc.n	80024d6 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	0a19      	lsrs	r1, r3, #8
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	0c19      	lsrs	r1, r3, #16
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3302      	adds	r3, #2
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	0e19      	lsrs	r1, r3, #24
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3303      	adds	r3, #3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3304      	adds	r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
      return offset;
 800255a:	68fb      	ldr	r3, [r7, #12]
    }
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3302      	adds	r3, #2
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4413      	add	r3, r2
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3303      	adds	r3, #3
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3304      	adds	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d90a      	bls.n	80025d8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f008 f991 	bl	800a8f4 <realloc>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e01a      	b.n	800261a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 0008 	add.w	r0, r3, #8
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7ff fe70 	bl	80022d6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4413      	add	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	18d0      	adds	r0, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3308      	adds	r3, #8
 800260c:	2210      	movs	r2, #16
 800260e:	4619      	mov	r1, r3
 8002610:	f008 ff83 	bl	800b51a <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3301      	adds	r3, #1
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	429a      	cmp	r2, r3
 8002622:	d3df      	bcc.n	80025e4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	440b      	add	r3, r1
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3302      	adds	r3, #2
 8002650:	6839      	ldr	r1, [r7, #0]
 8002652:	440b      	add	r3, r1
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3303      	adds	r3, #3
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440b      	add	r3, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3304      	adds	r3, #4
 8002678:	617b      	str	r3, [r7, #20]
     return offset;
 800267a:	697b      	ldr	r3, [r7, #20]
    }
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	0800d3e4 	.word	0x0800d3e4

080026a0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	0800d400 	.word	0x0800d400

080026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fc44 	bl	8000f54 <_ZN3ros3MsgC1Ev>
 80026cc:	4a0b      	ldr	r2, [pc, #44]	@ (80026fc <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
      layout(),
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff feae 	bl	8002438 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	0800d558 	.word	0x0800d558

08002700 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	1d18      	adds	r0, r3, #4
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7ff fead 	bl	8002478 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800271e:	4602      	mov	r2, r0
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	b2ca      	uxtb	r2, r1
 8002732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	0a19      	lsrs	r1, r3, #8
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	0c19      	lsrs	r1, r3, #16
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3302      	adds	r3, #2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4413      	add	r3, r2
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	0e19      	lsrs	r1, r3, #24
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3303      	adds	r3, #3
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4413      	add	r3, r2
 8002766:	b2ca      	uxtb	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3304      	adds	r3, #4
 800276e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e02a      	b.n	80027cc <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	0a19      	lsrs	r1, r3, #8
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4413      	add	r3, r2
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0c19      	lsrs	r1, r3, #16
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3302      	adds	r3, #2
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	b2ca      	uxtb	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	0e19      	lsrs	r1, r3, #24
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3303      	adds	r3, #3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3304      	adds	r3, #4
 80027c4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3301      	adds	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3cf      	bcc.n	8002776 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 80027d6:	697b      	ldr	r3, [r7, #20]
    }
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	1d18      	adds	r0, r3, #4
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7ff feb3 	bl	8002564 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4413      	add	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3302      	adds	r3, #2
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3303      	adds	r3, #3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	061b      	lsls	r3, r3, #24
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3304      	adds	r3, #4
 800284a:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	429a      	cmp	r2, r3
 8002854:	d90a      	bls.n	800286c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f008 f847 	bl	800a8f4 <realloc>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e035      	b.n	80028e4 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	440a      	add	r2, r1
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	440b      	add	r3, r1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	4313      	orrs	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3302      	adds	r3, #2
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	440b      	add	r3, r1
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3303      	adds	r3, #3
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	440b      	add	r3, r1
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3304      	adds	r3, #4
 80028ca:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	3228      	adds	r2, #40	@ 0x28
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	3301      	adds	r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3c4      	bcc.n	8002878 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 80028ee:	697b      	ldr	r3, [r7, #20]
    }
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	0800d424 	.word	0x0800d424

08002914 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	0800d440 	.word	0x0800d440

08002930 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	4a04      	ldr	r2, [pc, #16]	@ (800294c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	0800d5b8 	.word	0x0800d5b8

08002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ffe8 	bl	8002930 <_ZN3ros15NodeHandleBase_C1Ev>
 8002960:	4a36      	ldr	r2, [pc, #216]	@ (8002a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f97c 	bl	8001c68 <_ZN13STM32HardwareC1Ev>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f008 fd3c 	bl	800b41a <memset>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80029a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f008 fd33 	bl	800b41a <memset>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 80029ba:	2264      	movs	r2, #100	@ 0x64
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f008 fd2b 	bl	800b41a <memset>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 80029ca:	2264      	movs	r2, #100	@ 0x64
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f008 fd23 	bl	800b41a <memset>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fe06 	bl	800163c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800d544 	.word	0x0800d544

08002a40 <HAL_UART_TxCpltCallback>:
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
	*pSum = 0;
	*pSumSquares = 0;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002a48:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <HAL_UART_TxCpltCallback+0x20>)
 8002a4a:	f000 fe1e 	bl	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff f96f 	bl	8001d34 <_ZN13STM32Hardware5flushEv>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000404 	.word	0x20000404

08002a64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002a6c:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <HAL_UART_RxCpltCallback+0x20>)
 8002a6e:	f000 fe0c 	bl	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f91e 	bl	8001cb6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000404 	.word	0x20000404

08002a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	f5ad 4d90 	sub.w	sp, sp, #18432	@ 0x4800
 8002a8e:	b09e      	sub	sp, #120	@ 0x78
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a92:	f001 feeb 	bl	800486c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a96:	f000 fb39 	bl	800310c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a9a:	f000 fd03 	bl	80034a4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002a9e:	f000 fcd3 	bl	8003448 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8002aa2:	f000 fc41 	bl	8003328 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 8002aa6:	f000 fc9b 	bl	80033e0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8002aaa:	f000 fb8f 	bl	80031cc <_ZL12MX_ADC1_Initv>
  float32_t fourier_wave0[512];
  float32_t fourier_wave1[512];
  float32_t fourier_wave2[512];
  float32_t V1, V2, V3;
  float32_t v1Variance;
  float32_t v1Sum = 0;
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002ab6:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002aba:	6013      	str	r3, [r2, #0]
  float32_t v1SumSquares = 0;
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002ac4:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002ac8:	6013      	str	r3, [r2, #0]
  float32_t v2Variance;
  float32_t v2Sum = 0;
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002ad2:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002ad6:	6013      	str	r3, [r2, #0]
  float32_t v2SumSquares = 0;
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002ae0:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002ae4:	6013      	str	r3, [r2, #0]
  float32_t v3Variance;
  float32_t v3Sum = 0;
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002aee:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002af2:	6013      	str	r3, [r2, #0]
  float32_t v3SumSquares = 0;
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002afc:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002b00:	6013      	str	r3, [r2, #0]
  uint32_t index = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002b08:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002b0c:	6013      	str	r3, [r2, #0]
  uint32_t times[3];
  uint32_t frequency0 = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002b14:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8002b18:	6013      	str	r3, [r2, #0]
  uint32_t frequency1 = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002b20:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8002b24:	6013      	str	r3, [r2, #0]
  uint32_t frequency2 = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002b2c:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8002b30:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002b32:	217f      	movs	r1, #127	@ 0x7f
 8002b34:	48c4      	ldr	r0, [pc, #784]	@ (8002e48 <main+0x3c0>)
 8002b36:	f003 f865 	bl	8005c04 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 512; i++) {
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002b40:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e03d      	b.n	8002bc4 <main+0x13c>
	  hydrophone1[2*i + 1] = 0;
 8002b48:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002b4c:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	3301      	adds	r3, #1
 8002b56:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8002b5a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3b60      	subs	r3, #96	@ 0x60
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
	  hydrophone2[2*i + 1] = 0;
 8002b6a:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002b6e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	3301      	adds	r3, #1
 8002b78:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 8002b7c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b60      	subs	r3, #96	@ 0x60
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
	  hydrophone3[2*i + 1] = 0;
 8002b8c:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002b90:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f507 52c3 	add.w	r2, r7, #6240	@ 0x1860
 8002b9e:	f102 0218 	add.w	r2, r2, #24
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b60      	subs	r3, #96	@ 0x60
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 512; i++) {
 8002bae:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002bb2:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002bbe:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002bc8:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd2:	dbb9      	blt.n	8002b48 <main+0xc0>
  }
  nh.initNode();
 8002bd4:	489d      	ldr	r0, [pc, #628]	@ (8002e4c <main+0x3c4>)
 8002bd6:	f000 fd64 	bl	80036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(hpub);
 8002bda:	499d      	ldr	r1, [pc, #628]	@ (8002e50 <main+0x3c8>)
 8002bdc:	489b      	ldr	r0, [pc, #620]	@ (8002e4c <main+0x3c4>)
 8002bde:	f000 fd7d 	bl	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(wave_pub0);
 8002be2:	499c      	ldr	r1, [pc, #624]	@ (8002e54 <main+0x3cc>)
 8002be4:	4899      	ldr	r0, [pc, #612]	@ (8002e4c <main+0x3c4>)
 8002be6:	f000 fd79 	bl	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  //nh.advertise(wave_pub1);
  //nh.advertise(wave_pub2);
  nh.advertise(fourier_pub0);
 8002bea:	499b      	ldr	r1, [pc, #620]	@ (8002e58 <main+0x3d0>)
 8002bec:	4897      	ldr	r0, [pc, #604]	@ (8002e4c <main+0x3c4>)
 8002bee:	f000 fd75 	bl	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  //nh.advertise(fourier_pub1);
  //nh.advertise(fourier_pub2);
  HAL_TIM_Base_Start_IT(&htim2);
 8002bf2:	489a      	ldr	r0, [pc, #616]	@ (8002e5c <main+0x3d4>)
 8002bf4:	f004 ffb0 	bl	8007b58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8002bf8:	4898      	ldr	r0, [pc, #608]	@ (8002e5c <main+0x3d4>)
 8002bfa:	f004 ffad 	bl	8007b58 <HAL_TIM_Base_Start_IT>
  //printf("HI!\n\r");
  while (1)
  {
    index = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002c04:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002c08:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002c10:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e1c5      	b.n	8002fa4 <main+0x51c>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 8002c18:	2204      	movs	r2, #4
 8002c1a:	4991      	ldr	r1, [pc, #580]	@ (8002e60 <main+0x3d8>)
 8002c1c:	488a      	ldr	r0, [pc, #552]	@ (8002e48 <main+0x3c0>)
 8002c1e:	f002 f9d1 	bl	8004fc4 <HAL_ADC_Start_DMA>
		  while (conversionComplete == 0) {
 8002c22:	e000      	b.n	8002c26 <main+0x19e>
			  continue;
 8002c24:	bf00      	nop
		  while (conversionComplete == 0) {
 8002c26:	4b8f      	ldr	r3, [pc, #572]	@ (8002e64 <main+0x3dc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f5      	bne.n	8002c24 <main+0x19c>
		  }
		  conversionComplete = 0;
 8002c38:	4b8a      	ldr	r3, [pc, #552]	@ (8002e64 <main+0x3dc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
      if (i < 3)
 8002c3e:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002c42:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	dc0c      	bgt.n	8002c66 <main+0x1de>
    	  times[i] = usecs_elapsed;
 8002c4c:	4b86      	ldr	r3, [pc, #536]	@ (8002e68 <main+0x3e0>)
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8002c54:	f6a3 0378 	subw	r3, r3, #2168	@ 0x878
 8002c58:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002c5c:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      switch (curPhone) {
 8002c66:	4b81      	ldr	r3, [pc, #516]	@ (8002e6c <main+0x3e4>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	f200 8173 	bhi.w	8002f58 <main+0x4d0>
 8002c72:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <main+0x1f0>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002f59 	.word	0x08002f59
 8002c7c:	08002c89 	.word	0x08002c89
 8002c80:	08002d69 	.word	0x08002d69
 8002c84:	08002e79 	.word	0x08002e79
      	case INIT:
      		break;
      	case HYDROPHONE1:
      		calculateVoltage(adcChannels[0], adcChannels[1], &V1);
 8002c88:	4b75      	ldr	r3, [pc, #468]	@ (8002e60 <main+0x3d8>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	4b74      	ldr	r3, [pc, #464]	@ (8002e60 <main+0x3d8>)
 8002c90:	885b      	ldrh	r3, [r3, #2]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f507 4190 	add.w	r1, r7, #18432	@ 0x4800
 8002c98:	f101 0146 	add.w	r1, r1, #70	@ 0x46
 8002c9c:	800a      	strh	r2, [r1, #0]
 8002c9e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002ca2:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8002ca6:	8013      	strh	r3, [r2, #0]
 8002ca8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002cac:	3b64      	subs	r3, #100	@ 0x64
 8002cae:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002cb2:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8002cb6:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	@ (8002e70 <main+0x3e8>)
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002cc8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002cd0:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002cd4:	f103 0346 	add.w	r3, r3, #70	@ 0x46
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce2:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002ce6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002cea:	edd3 6a00 	vldr	s13, [r3]
 8002cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfa:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002cfe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002d02:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 8002d06:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002d0a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002e74 <main+0x3ec>
 8002d16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d1a:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002d1e:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002d34:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	edc3 7a00 	vstr	s15, [r3]
}
 8002d3e:	bf00      	nop
      		hydrophone1[2*index] = V1;
 8002d40:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002d44:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8002d50:	f6a2 0264 	subw	r2, r2, #2148	@ 0x864
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	f507 5161 	add.w	r1, r7, #14400	@ 0x3840
 8002d5a:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3b60      	subs	r3, #96	@ 0x60
 8002d64:	601a      	str	r2, [r3, #0]
      		break;
 8002d66:	e0f7      	b.n	8002f58 <main+0x4d0>
        case HYDROPHONE2:
        	calculateVoltage(adcChannels[0], adcChannels[2], &V2);
 8002d68:	4b3d      	ldr	r3, [pc, #244]	@ (8002e60 <main+0x3d8>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <main+0x3d8>)
 8002d70:	889b      	ldrh	r3, [r3, #4]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f507 4190 	add.w	r1, r7, #18432	@ 0x4800
 8002d78:	f101 0136 	add.w	r1, r1, #54	@ 0x36
 8002d7c:	800a      	strh	r2, [r1, #0]
 8002d7e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002d82:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002d86:	8013      	strh	r3, [r2, #0]
 8002d88:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002d8c:	3b68      	subs	r3, #104	@ 0x68
 8002d8e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002d92:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002d96:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002d98:	4b35      	ldr	r3, [pc, #212]	@ (8002e70 <main+0x3e8>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002da8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002dac:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002db0:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002db4:	f103 0336 	add.w	r3, r3, #54	@ 0x36
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc2:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002dc6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002dca:	edd3 6a00 	vldr	s13, [r3]
 8002dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dd2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002dde:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002de2:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 8002de6:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002dea:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002e74 <main+0x3ec>
 8002df6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dfa:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002dfe:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e10:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002e14:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	edc3 7a00 	vstr	s15, [r3]
}
 8002e1e:	bf00      	nop
        	hydrophone2[2*index] = V2;
 8002e20:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002e24:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8002e30:	f6a2 0268 	subw	r2, r2, #2152	@ 0x868
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	f507 5121 	add.w	r1, r7, #10304	@ 0x2840
 8002e3a:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3b60      	subs	r3, #96	@ 0x60
 8002e44:	601a      	str	r2, [r3, #0]
        	break;
 8002e46:	e087      	b.n	8002f58 <main+0x4d0>
 8002e48:	200001f4 	.word	0x200001f4
 8002e4c:	20000404 	.word	0x20000404
 8002e50:	20000e74 	.word	0x20000e74
 8002e54:	20000e88 	.word	0x20000e88
 8002e58:	20000e9c 	.word	0x20000e9c
 8002e5c:	200002a0 	.word	0x200002a0
 8002e60:	20000eb4 	.word	0x20000eb4
 8002e64:	20000ebc 	.word	0x20000ebc
 8002e68:	20000eb0 	.word	0x20000eb0
 8002e6c:	20000ec0 	.word	0x20000ec0
 8002e70:	1fff75aa 	.word	0x1fff75aa
 8002e74:	457ff000 	.word	0x457ff000
        case HYDROPHONE3:
        	calculateVoltage(adcChannels[0], adcChannels[3], &V3);
 8002e78:	4b98      	ldr	r3, [pc, #608]	@ (80030dc <main+0x654>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	4b97      	ldr	r3, [pc, #604]	@ (80030dc <main+0x654>)
 8002e80:	88db      	ldrh	r3, [r3, #6]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f507 4190 	add.w	r1, r7, #18432	@ 0x4800
 8002e88:	f101 0126 	add.w	r1, r1, #38	@ 0x26
 8002e8c:	800a      	strh	r2, [r1, #0]
 8002e8e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002e92:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002e96:	8013      	strh	r3, [r2, #0]
 8002e98:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002e9c:	3b6c      	subs	r3, #108	@ 0x6c
 8002e9e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002ea2:	f102 0220 	add.w	r2, r2, #32
 8002ea6:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80030e0 <main+0x658>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002eb8:	f103 031c 	add.w	r3, r3, #28
 8002ebc:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002ec0:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002ec4:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed2:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002ed6:	f103 031c 	add.w	r3, r3, #28
 8002eda:	edd3 6a00 	vldr	s13, [r3]
 8002ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002eee:	f103 0318 	add.w	r3, r3, #24
 8002ef2:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 8002ef6:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002efa:	f103 0318 	add.w	r3, r3, #24
 8002efe:	edd3 7a00 	vldr	s15, [r3]
 8002f02:	eddf 6a78 	vldr	s13, [pc, #480]	@ 80030e4 <main+0x65c>
 8002f06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f0a:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002f0e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002f24:	f103 0320 	add.w	r3, r3, #32
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8002f2e:	bf00      	nop
        	hydrophone3[2*index] = V3;
 8002f30:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002f34:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8002f40:	f6a2 026c 	subw	r2, r2, #2156	@ 0x86c
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 8002f4a:	f101 0118 	add.w	r1, r1, #24
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3b60      	subs	r3, #96	@ 0x60
 8002f54:	601a      	str	r2, [r3, #0]
        	break;
 8002f56:	bf00      	nop
      }
      if (i % 3 == 2) {
 8002f58:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002f5c:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	4b61      	ldr	r3, [pc, #388]	@ (80030e8 <main+0x660>)
 8002f64:	fb83 3201 	smull	r3, r2, r3, r1
 8002f68:	17cb      	asrs	r3, r1, #31
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	1aca      	subs	r2, r1, r3
 8002f74:	2a02      	cmp	r2, #2
 8002f76:	d10a      	bne.n	8002f8e <main+0x506>
    	  index++;
 8002f78:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002f7c:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002f88:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002f8c:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 8002f8e:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002f92:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8002f9e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8002fa8:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002fb2:	f6ff ae31 	blt.w	8002c18 <main+0x190>
      }
	 }
	wave0.data = hydrophone1;
 8002fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80030ec <main+0x664>)
 8002fb8:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8002fbc:	f103 0318 	add.w	r3, r3, #24
 8002fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wave0.data_length = 1024;
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <main+0x664>)
 8002fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
	wave_pub0.publish(&wave0);
 8002fca:	4948      	ldr	r1, [pc, #288]	@ (80030ec <main+0x664>)
 8002fcc:	4848      	ldr	r0, [pc, #288]	@ (80030f0 <main+0x668>)
 8002fce:	f7fe fe18 	bl	8001c02 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8002fd2:	4848      	ldr	r0, [pc, #288]	@ (80030f4 <main+0x66c>)
 8002fd4:	f000 fbb2 	bl	800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	nh.spinOnce();
	wave2.data = hydrophone3;
	wave2.data_length = 1024;
	wave_pub2.publish(&wave2);
	nh.spinOnce();*/
	get_fft(hydrophone1, fourier_wave0, 1024);
 8002fd8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002fdc:	f103 0318 	add.w	r3, r3, #24
 8002fe0:	3b20      	subs	r3, #32
 8002fe2:	f507 5060 	add.w	r0, r7, #14336	@ 0x3800
 8002fe6:	f100 0018 	add.w	r0, r0, #24
 8002fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f001 f8cc 	bl	800418c <get_fft>
	fourier0.data = fourier_wave0;
 8002ff4:	4a40      	ldr	r2, [pc, #256]	@ (80030f8 <main+0x670>)
 8002ff6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002ffa:	f103 0318 	add.w	r3, r3, #24
 8002ffe:	3b20      	subs	r3, #32
 8003000:	62d3      	str	r3, [r2, #44]	@ 0x2c
	fourier0.data_length = 512;
 8003002:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <main+0x670>)
 8003004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24
	fourier_pub0.publish(&fourier0);
 800300a:	493b      	ldr	r1, [pc, #236]	@ (80030f8 <main+0x670>)
 800300c:	483b      	ldr	r0, [pc, #236]	@ (80030fc <main+0x674>)
 800300e:	f7fe fdf8 	bl	8001c02 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8003012:	4838      	ldr	r0, [pc, #224]	@ (80030f4 <main+0x66c>)
 8003014:	f000 fb92 	bl	800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	get_fft(hydrophone3, fourier_wave2, 1024);
	fourier2.data = fourier_wave2;
	fourier2.data_length = 512;
	fourier_pub2.publish(&fourier2);
	nh.spinOnce();*/
    frequency0 = get_frequency(hydrophone1, 1024, 4705882.3529);
 8003018:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 800301c:	f103 0318 	add.w	r3, r3, #24
 8003020:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8003100 <main+0x678>
 8003024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003028:	4618      	mov	r0, r3
 800302a:	f001 f815 	bl	8004058 <get_frequency>
 800302e:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8003032:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8003036:	6018      	str	r0, [r3, #0]
    frequency1 = get_frequency(hydrophone2, 1024, 4705882.3529);
 8003038:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 800303c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003040:	3b20      	subs	r3, #32
 8003042:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8003100 <main+0x678>
 8003046:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800304a:	4618      	mov	r0, r3
 800304c:	f001 f804 	bl	8004058 <get_frequency>
 8003050:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8003054:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8003058:	6018      	str	r0, [r3, #0]
    frequency2 = get_frequency(hydrophone3, 1024, 4705882.3529);
 800305a:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 800305e:	f103 0318 	add.w	r3, r3, #24
 8003062:	3b20      	subs	r3, #32
 8003064:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8003100 <main+0x678>
 8003068:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fff3 	bl	8004058 <get_frequency>
 8003072:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8003076:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800307a:	6018      	str	r0, [r3, #0]
    if (frequency0 == frequency1 && frequency0 == frequency2) {
 800307c:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8003080:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800308a:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d11e      	bne.n	80030d2 <main+0x64a>
 8003094:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8003098:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80030a2:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d112      	bne.n	80030d2 <main+0x64a>
		pingerTimeDifference.frequency = frequency0;
 80030ac:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80030b0:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <main+0x67c>)
 80030b8:	6053      	str	r3, [r2, #4]
		pingerTimeDifference.times = times;
 80030ba:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <main+0x67c>)
 80030bc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80030c0:	3b78      	subs	r3, #120	@ 0x78
 80030c2:	6113      	str	r3, [r2, #16]
		pingerTimeDifference.times_length = 3;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <main+0x67c>)
 80030c6:	2203      	movs	r2, #3
 80030c8:	609a      	str	r2, [r3, #8]
		hpub.publish(&pingerTimeDifference);
 80030ca:	490e      	ldr	r1, [pc, #56]	@ (8003104 <main+0x67c>)
 80030cc:	480e      	ldr	r0, [pc, #56]	@ (8003108 <main+0x680>)
 80030ce:	f7fe fd98 	bl	8001c02 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    }
	nh.spinOnce();
 80030d2:	4808      	ldr	r0, [pc, #32]	@ (80030f4 <main+0x66c>)
 80030d4:	f000 fb32 	bl	800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80030d8:	e591      	b.n	8002bfe <main+0x176>
 80030da:	bf00      	nop
 80030dc:	20000eb4 	.word	0x20000eb4
 80030e0:	1fff75aa 	.word	0x1fff75aa
 80030e4:	457ff000 	.word	0x457ff000
 80030e8:	55555556 	.word	0x55555556
 80030ec:	20000d54 	.word	0x20000d54
 80030f0:	20000e88 	.word	0x20000e88
 80030f4:	20000404 	.word	0x20000404
 80030f8:	20000de4 	.word	0x20000de4
 80030fc:	20000e9c 	.word	0x20000e9c
 8003100:	4a8f9cb5 	.word	0x4a8f9cb5
 8003104:	20000d40 	.word	0x20000d40
 8003108:	20000e74 	.word	0x20000e74

0800310c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b096      	sub	sp, #88	@ 0x58
 8003110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	2244      	movs	r2, #68	@ 0x44
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f008 f97d 	bl	800b41a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003120:	463b      	mov	r3, r7
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800312e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003132:	f003 faef 	bl	8006714 <HAL_PWREx_ControlVoltageScaling>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003146:	f000 fa55 	bl	80035f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800314a:	2302      	movs	r3, #2
 800314c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800314e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003154:	2310      	movs	r3, #16
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003158:	2302      	movs	r3, #2
 800315a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800315c:	2302      	movs	r3, #2
 800315e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003160:	2301      	movs	r3, #1
 8003162:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003164:	230a      	movs	r3, #10
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003168:	2307      	movs	r3, #7
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800316c:	2302      	movs	r3, #2
 800316e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003170:	2302      	movs	r3, #2
 8003172:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4618      	mov	r0, r3
 800317a:	f003 fb21 	bl	80067c0 <HAL_RCC_OscConfig>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800318e:	f000 fa31 	bl	80035f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003192:	230f      	movs	r3, #15
 8003194:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003196:	2303      	movs	r3, #3
 8003198:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031a6:	463b      	mov	r3, r7
 80031a8:	2104      	movs	r1, #4
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 ff1c 	bl	8006fe8 <HAL_RCC_ClockConfig>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80031c0:	f000 fa18 	bl	80035f4 <Error_Handler>
  }
}
 80031c4:	bf00      	nop
 80031c6:	3758      	adds	r7, #88	@ 0x58
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031d2:	463b      	mov	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
 80031e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80031e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80031e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003314 <_ZL12MX_ADC1_Initv+0x148>)
 80031e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031e8:	4b49      	ldr	r3, [pc, #292]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ee:	4b48      	ldr	r3, [pc, #288]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031f4:	4b46      	ldr	r3, [pc, #280]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80031fa:	4b45      	ldr	r3, [pc, #276]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003200:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003202:	2204      	movs	r2, #4
 8003204:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003206:	4b42      	ldr	r3, [pc, #264]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003208:	2200      	movs	r2, #0
 800320a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800320c:	4b40      	ldr	r3, [pc, #256]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 800320e:	2201      	movs	r2, #1
 8003210:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8003212:	4b3f      	ldr	r3, [pc, #252]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003214:	2204      	movs	r2, #4
 8003216:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003218:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003226:	4b3a      	ldr	r3, [pc, #232]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003228:	2200      	movs	r2, #0
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800322c:	4b38      	ldr	r3, [pc, #224]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003236:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800323a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800323c:	4b34      	ldr	r3, [pc, #208]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003244:	4832      	ldr	r0, [pc, #200]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 8003246:	f001 fd7b 	bl	8004d40 <HAL_ADC_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <_ZL12MX_ADC1_Initv+0x92>
  {
    Error_Handler();
 800325a:	f000 f9cb 	bl	80035f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800325e:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <_ZL12MX_ADC1_Initv+0x14c>)
 8003260:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003262:	2306      	movs	r3, #6
 8003264:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800326a:	237f      	movs	r3, #127	@ 0x7f
 800326c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800326e:	2304      	movs	r3, #4
 8003270:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003276:	463b      	mov	r3, r7
 8003278:	4619      	mov	r1, r3
 800327a:	4825      	ldr	r0, [pc, #148]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 800327c:	f001 ff3a 	bl	80050f4 <HAL_ADC_ConfigChannel>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 8003290:	f000 f9b0 	bl	80035f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8003294:	4b21      	ldr	r3, [pc, #132]	@ (800331c <_ZL12MX_ADC1_Initv+0x150>)
 8003296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003298:	230c      	movs	r3, #12
 800329a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800329c:	463b      	mov	r3, r7
 800329e:	4619      	mov	r1, r3
 80032a0:	481b      	ldr	r0, [pc, #108]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80032a2:	f001 ff27 	bl	80050f4 <HAL_ADC_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <_ZL12MX_ADC1_Initv+0xee>
  {
    Error_Handler();
 80032b6:	f000 f99d 	bl	80035f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80032ba:	4b19      	ldr	r3, [pc, #100]	@ (8003320 <_ZL12MX_ADC1_Initv+0x154>)
 80032bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80032be:	2312      	movs	r3, #18
 80032c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032c2:	463b      	mov	r3, r7
 80032c4:	4619      	mov	r1, r3
 80032c6:	4812      	ldr	r0, [pc, #72]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80032c8:	f001 ff14 	bl	80050f4 <HAL_ADC_ConfigChannel>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <_ZL12MX_ADC1_Initv+0x114>
  {
    Error_Handler();
 80032dc:	f000 f98a 	bl	80035f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80032e0:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <_ZL12MX_ADC1_Initv+0x158>)
 80032e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80032e4:	2318      	movs	r3, #24
 80032e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032e8:	463b      	mov	r3, r7
 80032ea:	4619      	mov	r1, r3
 80032ec:	4808      	ldr	r0, [pc, #32]	@ (8003310 <_ZL12MX_ADC1_Initv+0x144>)
 80032ee:	f001 ff01 	bl	80050f4 <HAL_ADC_ConfigChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8003302:	f000 f977 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200001f4 	.word	0x200001f4
 8003314:	50040000 	.word	0x50040000
 8003318:	80000001 	.word	0x80000001
 800331c:	43210000 	.word	0x43210000
 8003320:	2e300800 	.word	0x2e300800
 8003324:	25b00200 	.word	0x25b00200

08003328 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003346:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 8003348:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800334c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800334e:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003354:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 800335a:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 800335c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800336e:	481b      	ldr	r0, [pc, #108]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 8003370:	f004 fb9a 	bl	8007aa8 <HAL_TIM_Base_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8003384:	f000 f936 	bl	80035f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800338c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4619      	mov	r1, r3
 8003394:	4811      	ldr	r0, [pc, #68]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 8003396:	f004 fd35 	bl	8007e04 <HAL_TIM_ConfigClockSource>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80033aa:	f000 f923 	bl	80035f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4808      	ldr	r0, [pc, #32]	@ (80033dc <_ZL12MX_TIM2_Initv+0xb4>)
 80033bc:	f004 ff12 	bl	80081e4 <HAL_TIMEx_MasterConfigSynchronization>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80033d0:	f000 f910 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033d4:	bf00      	nop
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200002a0 	.word	0x200002a0

080033e0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033e4:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <_ZL19MX_USART2_UART_Initv+0x64>)
 80033e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 80033ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003406:	220c      	movs	r2, #12
 8003408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003418:	2200      	movs	r2, #0
 800341a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 800341e:	2200      	movs	r2, #0
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003422:	4807      	ldr	r0, [pc, #28]	@ (8003440 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003424:	f004 ff62 	bl	80082ec <HAL_UART_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8003438:	f000 f8dc 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200002ec 	.word	0x200002ec
 8003444:	40004400 	.word	0x40004400

08003448 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800344e:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <_ZL11MX_DMA_Initv+0x58>)
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	4a13      	ldr	r2, [pc, #76]	@ (80034a0 <_ZL11MX_DMA_Initv+0x58>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6493      	str	r3, [r2, #72]	@ 0x48
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <_ZL11MX_DMA_Initv+0x58>)
 800345c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	200b      	movs	r0, #11
 800346c:	f002 fd05 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003470:	200b      	movs	r0, #11
 8003472:	f002 fd1e 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	2100      	movs	r1, #0
 800347a:	2010      	movs	r0, #16
 800347c:	f002 fcfd 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003480:	2010      	movs	r0, #16
 8003482:	f002 fd16 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	2011      	movs	r0, #17
 800348c:	f002 fcf5 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003490:	2011      	movs	r0, #17
 8003492:	f002 fd0e 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000

080034a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034aa:	f107 0314 	add.w	r3, r7, #20
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	4a2a      	ldr	r2, [pc, #168]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034c6:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034d2:	4b25      	ldr	r3, [pc, #148]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034de:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350e:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <_ZL12MX_GPIO_Initv+0xc4>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800351a:	2200      	movs	r2, #0
 800351c:	21a0      	movs	r1, #160	@ 0xa0
 800351e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003522:	f003 f8d1 	bl	80066c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800352a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800352c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	480b      	ldr	r0, [pc, #44]	@ (800356c <_ZL12MX_GPIO_Initv+0xc8>)
 800353e:	f002 ff49 	bl	80063d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 8003542:	23a0      	movs	r3, #160	@ 0xa0
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003546:	2301      	movs	r3, #1
 8003548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800355c:	f002 ff3a 	bl	80063d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003560:	bf00      	nop
 8003562:	3728      	adds	r7, #40	@ 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	48000800 	.word	0x48000800

08003570 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	usecs_elapsed += 10;
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330a      	adds	r3, #10
 800357e:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003580:	6013      	str	r3, [r2, #0]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000eb0 	.word	0x20000eb0

08003594 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	switch (curPhone) {
 800359c:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <HAL_ADC_ConvCpltCallback+0x58>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d819      	bhi.n	80035da <HAL_ADC_ConvCpltCallback+0x46>
 80035a6:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <HAL_ADC_ConvCpltCallback+0x18>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035c5 	.word	0x080035c5
 80035b4:	080035cd 	.word	0x080035cd
 80035b8:	080035d5 	.word	0x080035d5
	case INIT:
		curPhone = HYDROPHONE1;
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_ADC_ConvCpltCallback+0x58>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
		break;
 80035c2:	e00a      	b.n	80035da <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE1:
		curPhone = HYDROPHONE2;
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <HAL_ADC_ConvCpltCallback+0x58>)
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
		break;
 80035ca:	e006      	b.n	80035da <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE2:
		curPhone = HYDROPHONE3;
 80035cc:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <HAL_ADC_ConvCpltCallback+0x58>)
 80035ce:	2203      	movs	r2, #3
 80035d0:	701a      	strb	r2, [r3, #0]
		break;
 80035d2:	e002      	b.n	80035da <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE3:
		curPhone = HYDROPHONE1;
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_ADC_ConvCpltCallback+0x58>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
  }
  conversionComplete = 1;
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20000ec0 	.word	0x20000ec0
 80035f0:	20000ebc 	.word	0x20000ebc

080035f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f8:	b672      	cpsid	i
}
 80035fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035fc:	bf00      	nop
 80035fe:	e7fd      	b.n	80035fc <Error_Handler+0x8>

08003600 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e00c      	b.n	800362a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	fa22 f103 	lsr.w	r1, r2, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	b2ca      	uxtb	r2, r1
 8003622:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d9ef      	bls.n	8003610 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e010      	b.n	8003676 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	440a      	add	r2, r1
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	4611      	mov	r1, r2
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	00d2      	lsls	r2, r2, #3
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d9eb      	bls.n	8003654 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
  }
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe faf6 	bl	8001ca0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e01d      	b.n	8003728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d111      	bne.n	8003722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	60da      	str	r2, [r3, #12]
        return true;
 800371e:	2301      	movs	r3, #1
 8003720:	e006      	b.n	8003730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b18      	cmp	r3, #24
 800372c:	ddde      	ble.n	80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800372e:	2300      	movs	r3, #0
  }
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fbab 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800374e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800375e:	4293      	cmp	r3, r2
 8003760:	d903      	bls.n	800376a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d903      	bls.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800378e:	2b00      	cmp	r3, #0
 8003790:	d014      	beq.n	80037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fb84 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80037a8:	429a      	cmp	r2, r3
 80037aa:	bf8c      	ite	hi
 80037ac:	2301      	movhi	r3, #1
 80037ae:	2300      	movls	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80037b6:	f06f 0301 	mvn.w	r3, #1
 80037ba:	e194      	b.n	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fa89 	bl	8001cd8 <_ZN13STM32Hardware4readEv>
 80037c6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f2c0 8174 	blt.w	8003ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	d11e      	bne.n	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	b2d1      	uxtb	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	460a      	mov	r2, r1
 8003802:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800380c:	1e5a      	subs	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1b4      	bne.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2208      	movs	r2, #8
 8003822:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003826:	e7af      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800382e:	2b00      	cmp	r3, #0
 8003830:	d128      	bne.n	8003884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2bff      	cmp	r3, #255	@ 0xff
 8003836:	d10d      	bne.n	8003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f103 0214 	add.w	r2, r3, #20
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8003852:	e799      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fb23 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	bf8c      	ite	hi
 800386c:	2301      	movhi	r3, #1
 800386e:	2300      	movls	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d088      	beq.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 800387e:	f06f 0301 	mvn.w	r3, #1
 8003882:	e130      	b.n	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800388a:	2b01      	cmp	r3, #1
 800388c:	d118      	bne.n	80038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2bfe      	cmp	r3, #254	@ 0xfe
 8003892:	d107      	bne.n	80038a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80038a2:	e771      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f47f af68 	bne.w	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f918 	bl	8003aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80038be:	e763      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d113      	bne.n	80038f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80038f0:	e74a      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d110      	bne.n	800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	441a      	add	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800391c:	e734      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003924:	2b04      	cmp	r3, #4
 8003926:	d116      	bne.n	8003956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800392e:	425a      	negs	r2, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	bf58      	it	pl
 8003936:	4253      	negpl	r3, r2
 8003938:	2bff      	cmp	r3, #255	@ 0xff
 800393a:	d107      	bne.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800394a:	e71d      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003954:	e718      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800395c:	2b05      	cmp	r3, #5
 800395e:	d10f      	bne.n	8003980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800397e:	e703      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003986:	2b06      	cmp	r3, #6
 8003988:	d117      	bne.n	80039ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2207      	movs	r2, #7
 80039a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f aeec 	bne.w	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2208      	movs	r2, #8
 80039b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80039b8:	e6e6      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	f47f aee1 	bne.w	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80039d4:	425a      	negs	r2, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	bf58      	it	pl
 80039dc:	4253      	negpl	r3, r2
 80039de:	2bff      	cmp	r3, #255	@ 0xff
 80039e0:	f47f aed2 	bne.w	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d110      	bne.n	8003a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f87d 	bl	8003aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f898 	bl	8003b2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a0e:	e06a      	b.n	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003a16:	2b0a      	cmp	r3, #10
 8003a18:	d107      	bne.n	8003a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f960 	bl	8003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003a28:	e6ae      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d10e      	bne.n	8003a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fd ff39 	bl	80018ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8003a50:	e69a      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003a58:	2b0b      	cmp	r3, #11
 8003a5a:	d104      	bne.n	8003a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8003a64:	e690      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003a6c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f43f ae84 	beq.w	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003a86:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003a90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003a9a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4798      	blx	r3
    while (true)
 8003ab6:	e667      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003ab8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d906      	bls.n	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f809 	bl	8003aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8003ae4:	2300      	movs	r3, #0
  }
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fa3a 	bl	8000f74 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f107 020c 	add.w	r2, r7, #12
 8003b0a:	210a      	movs	r1, #10
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe f9c5 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003b2a:	b590      	push	{r4, r7, lr}
 8003b2c:	b08b      	sub	sp, #44	@ 0x2c
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003b32:	f107 030c 	add.w	r3, r7, #12
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd fb0c 	bl	8001154 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	e062      	b.n	8003c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d056      	beq.n	8003c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4798      	blx	r3
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4608      	mov	r0, r1
 8003bd0:	4798      	blx	r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bda:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681c      	ldr	r4, [r3, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe f81a 	bl	8001c2a <_ZN3ros9Publisher15getEndpointTypeEv>
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	3301      	adds	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	2b18      	cmp	r3, #24
 8003c0c:	dd99      	ble.n	8003b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c12:	e05e      	b.n	8003cd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c18:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d053      	beq.n	8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c28:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c56:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4798      	blx	r3
 8003c68:	4603      	mov	r3, r0
 8003c6a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c70:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	4798      	blx	r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c96:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681c      	ldr	r4, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003ca6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cae:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4798      	blx	r3
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	3301      	adds	r3, #1
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b18      	cmp	r3, #24
 8003cd6:	dd9d      	ble.n	8003c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8003ce0:	bf00      	nop
 8003ce2:	372c      	adds	r7, #44	@ 0x2c
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}

08003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd f93c 	bl	8000f74 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe f8cf 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd f99b 	bl	8001054 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4915      	ldr	r1, [pc, #84]	@ (8003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003d24:	fba1 1303 	umull	r1, r3, r1, r3
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003d34:	fba3 0302 	umull	r0, r3, r3, r2
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003d4e:	f107 0308 	add.w	r3, r7, #8
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8a6 	bl	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe f89f 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 8003d66:	4602      	mov	r2, r0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	10624dd3 	.word	0x10624dd3
 8003d7c:	000f4240 	.word	0x000f4240

08003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b63      	cmp	r3, #99	@ 0x63
 8003d90:	dd09      	ble.n	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e079      	b.n	8003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8003db2:	3207      	adds	r2, #7
 8003db4:	4611      	mov	r1, r2
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4798      	blx	r3
 8003dba:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	22ff      	movs	r2, #255	@ 0xff
 8003dc0:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	22fe      	movs	r2, #254	@ 0xfe
 8003dc8:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8003df2:	4413      	add	r3, r2
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	121b      	asrs	r3, r3, #8
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e1e:	2305      	movs	r3, #5
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e00c      	b.n	8003e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3306      	adds	r3, #6
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	dded      	ble.n	8003e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3307      	adds	r3, #7
 8003e4c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	425a      	negs	r2, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	bf58      	it	pl
 8003e58:	4253      	negpl	r3, r2
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	6179      	str	r1, [r7, #20]
 8003e62:	43d2      	mvns	r2, r2
 8003e64:	b2d1      	uxtb	r1, r2
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	460a      	mov	r2, r1
 8003e6c:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e76:	dc0a      	bgt.n	8003e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1d18      	adds	r0, r3, #4
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7fd ffc7 	bl	8001e18 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	e005      	b.n	8003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003e8e:	4905      	ldr	r1, [pc, #20]	@ (8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f849 	bl	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	0800d464 	.word	0x0800d464

08003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd fff4 	bl	8001ea4 <_ZN13STM32Hardware4timeEv>
 8003ebc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4915      	ldr	r1, [pc, #84]	@ (8003f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003ec6:	fba1 1303 	umull	r1, r3, r1, r3
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	1e5a      	subs	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003ede:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ee8:	fb00 f303 	mul.w	r3, r0, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4a0c      	ldr	r2, [pc, #48]	@ (8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	1aca      	subs	r2, r1, r3
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7fc ffe2 	bl	8000ed8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	10624dd3 	.word	0x10624dd3
 8003f20:	000f4240 	.word	0x000f4240
 8003f24:	3b9aca00 	.word	0x3b9aca00

08003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	2103      	movs	r1, #3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f804 	bl	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd fac0 	bl	80014dc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
 8003f5e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f107 0214 	add.w	r2, r7, #20
 8003f6e:	2107      	movs	r1, #7
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	4798      	blx	r3
  }
 8003f74:	bf00      	nop
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d12e      	bne.n	8003fea <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d129      	bne.n	8003fea <_Z41__static_initialization_and_destruction_0ii+0x6e>
ros::NodeHandle nh;
 8003f96:	4817      	ldr	r0, [pc, #92]	@ (8003ff4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003f98:	f7fe fcda 	bl	8002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
auv_msgs::PingerTimeDifference pingerTimeDifference;
 8003f9c:	4816      	ldr	r0, [pc, #88]	@ (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003f9e:	f7fd ff8d 	bl	8001ebc <_ZN8auv_msgs20PingerTimeDifferenceC1Ev>
std_msgs::Float32MultiArray wave0;
 8003fa2:	4816      	ldr	r0, [pc, #88]	@ (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003fa4:	f7fe fb8a 	bl	80026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray wave1;
 8003fa8:	4815      	ldr	r0, [pc, #84]	@ (8004000 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003faa:	f7fe fb87 	bl	80026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray wave2;
 8003fae:	4815      	ldr	r0, [pc, #84]	@ (8004004 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003fb0:	f7fe fb84 	bl	80026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray fourier0;
 8003fb4:	4814      	ldr	r0, [pc, #80]	@ (8004008 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003fb6:	f7fe fb81 	bl	80026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray fourier1;
 8003fba:	4814      	ldr	r0, [pc, #80]	@ (800400c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003fbc:	f7fe fb7e 	bl	80026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray fourier2;
 8003fc0:	4813      	ldr	r0, [pc, #76]	@ (8004010 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003fc2:	f7fe fb7b 	bl	80026bc <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher hpub("/sensors/hydrophones/pinger_time_difference", &pingerTimeDifference);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003fca:	4912      	ldr	r1, [pc, #72]	@ (8004014 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003fcc:	4812      	ldr	r0, [pc, #72]	@ (8004018 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003fce:	f7fd fe01 	bl	8001bd4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wave_pub0("/sensors/hydrophones/wave0", &wave0);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4a09      	ldr	r2, [pc, #36]	@ (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003fd6:	4911      	ldr	r1, [pc, #68]	@ (800401c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003fd8:	4811      	ldr	r0, [pc, #68]	@ (8004020 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003fda:	f7fd fdfb 	bl	8001bd4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher fourier_pub0("/sensors/hydrophones/fourier0", &fourier0);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003fe2:	4910      	ldr	r1, [pc, #64]	@ (8004024 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003fe4:	4810      	ldr	r0, [pc, #64]	@ (8004028 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003fe6:	f7fd fdf5 	bl	8001bd4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000404 	.word	0x20000404
 8003ff8:	20000d40 	.word	0x20000d40
 8003ffc:	20000d54 	.word	0x20000d54
 8004000:	20000d84 	.word	0x20000d84
 8004004:	20000db4 	.word	0x20000db4
 8004008:	20000de4 	.word	0x20000de4
 800400c:	20000e14 	.word	0x20000e14
 8004010:	20000e44 	.word	0x20000e44
 8004014:	0800d4a0 	.word	0x0800d4a0
 8004018:	20000e74 	.word	0x20000e74
 800401c:	0800d4cc 	.word	0x0800d4cc
 8004020:	20000e88 	.word	0x20000e88
 8004024:	0800d4e8 	.word	0x0800d4e8
 8004028:	20000e9c 	.word	0x20000e9c

0800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    return configured_;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_GLOBAL__sub_I_hadc1>:
 8004046:	b580      	push	{r7, lr}
 8004048:	af00      	add	r7, sp, #0
 800404a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800404e:	2001      	movs	r0, #1
 8004050:	f7ff ff94 	bl	8003f7c <_Z41__static_initialization_and_destruction_0ii>
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <get_frequency>:
    return freq[target_bin] / sum;
}


uint32_t get_frequency(float32_t* buff, uint32_t size, float32_t fs)
{
 8004058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	b08e      	sub	sp, #56	@ 0x38
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	ed87 0a01 	vstr	s0, [r7, #4]
 8004068:	466b      	mov	r3, sp
 800406a:	469a      	mov	sl, r3
    uint32_t target_frequencies[] = {25000, 30000, 35000, 40000};
 800406c:	4b46      	ldr	r3, [pc, #280]	@ (8004188 <get_frequency+0x130>)
 800406e:	f107 0610 	add.w	r6, r7, #16
 8004072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004074:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}


    float32_t freq[size / 2];
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0859      	lsrs	r1, r3, #1
 800407c:	460b      	mov	r3, r1
 800407e:	3b01      	subs	r3, #1
 8004080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004082:	2300      	movs	r3, #0
 8004084:	4688      	mov	r8, r1
 8004086:	4699      	mov	r9, r3
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8004094:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8004098:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800409c:	2300      	movs	r3, #0
 800409e:	460c      	mov	r4, r1
 80040a0:	461d      	mov	r5, r3
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	016b      	lsls	r3, r5, #5
 80040ac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80040b0:	0162      	lsls	r2, r4, #5
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	3307      	adds	r3, #7
 80040b6:	08db      	lsrs	r3, r3, #3
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	ebad 0d03 	sub.w	sp, sp, r3
 80040be:	466b      	mov	r3, sp
 80040c0:	3303      	adds	r3, #3
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	627b      	str	r3, [r7, #36]	@ 0x24
    get_fft(buff, freq, size);
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f85d 	bl	800418c <get_fft>

    uint32_t max = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t frequency = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t target_bin = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	623b      	str	r3, [r7, #32]

    for (int i = 0; i < 4; i++) {
 80040de:	2300      	movs	r3, #0
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e2:	e047      	b.n	8004174 <get_frequency+0x11c>
        target_bin = (uint32_t) round(target_frequencies[i] * size / fs);
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3338      	adds	r3, #56	@ 0x38
 80040ea:	443b      	add	r3, r7
 80040ec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004102:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004106:	ee16 0a90 	vmov	r0, s13
 800410a:	f7fc fa1d 	bl	8000548 <__aeabi_f2d>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	ec43 2b10 	vmov	d0, r2, r3
 8004116:	f006 fba7 	bl	800a868 <round>
 800411a:	ec53 2b10 	vmov	r2, r3, d0
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fd41 	bl	8000ba8 <__aeabi_d2uiz>
 8004126:	4603      	mov	r3, r0
 8004128:	623b      	str	r3, [r7, #32]
        if (freq[target_bin] > max) {
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	ed93 7a00 	vldr	s14, [r3]
 8004136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	dd11      	ble.n	800416e <get_frequency+0x116>
        	frequency = target_frequencies[i];
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	3338      	adds	r3, #56	@ 0x38
 8004150:	443b      	add	r3, r7
 8004152:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004156:	633b      	str	r3, [r7, #48]	@ 0x30
        	max = freq[target_bin];
 8004158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	edd3 7a00 	vldr	s15, [r3]
 8004164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004168:	ee17 3a90 	vmov	r3, s15
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < 4; i++) {
 800416e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004170:	3301      	adds	r3, #1
 8004172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004176:	2b03      	cmp	r3, #3
 8004178:	ddb4      	ble.n	80040e4 <get_frequency+0x8c>
        }
    }

    return frequency;
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	46d5      	mov	sp, sl
}
 800417e:	4618      	mov	r0, r3
 8004180:	3738      	adds	r7, #56	@ 0x38
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004188:	0800d508 	.word	0x0800d508

0800418c <get_fft>:

void get_fft(float32_t* inWave, float32_t* outWave, uint32_t size) {
 800418c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004190:	b089      	sub	sp, #36	@ 0x24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	466b      	mov	r3, sp
 800419c:	461e      	mov	r6, r3
		float32_t temp_buff[size];
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	3b01      	subs	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	2300      	movs	r3, #0
 80041a8:	4688      	mov	r8, r1
 80041aa:	4699      	mov	r9, r3
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80041b8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80041bc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80041c0:	2300      	movs	r3, #0
 80041c2:	460c      	mov	r4, r1
 80041c4:	461d      	mov	r5, r3
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	016b      	lsls	r3, r5, #5
 80041d0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80041d4:	0162      	lsls	r2, r4, #5
 80041d6:	008b      	lsls	r3, r1, #2
 80041d8:	3307      	adds	r3, #7
 80041da:	08db      	lsrs	r3, r3, #3
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	ebad 0d03 	sub.w	sp, sp, r3
 80041e2:	466b      	mov	r3, sp
 80041e4:	3303      	adds	r3, #3
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	617b      	str	r3, [r7, #20]

	    for (int i = 0; i < size; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e00c      	b.n	800420c <get_fft+0x80>
	    {
	        temp_buff[i] = inWave[i];
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	6979      	ldr	r1, [r7, #20]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < size; i++)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3301      	adds	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d8ee      	bhi.n	80041f2 <get_fft+0x66>
	    }
		arm_cfft_f32(&instance, temp_buff, 0, 0);
 8004214:	2300      	movs	r3, #0
 8004216:	2200      	movs	r2, #0
 8004218:	6979      	ldr	r1, [r7, #20]
 800421a:	4808      	ldr	r0, [pc, #32]	@ (800423c <get_fft+0xb0>)
 800421c:	f005 fe86 	bl	8009f2c <arm_cfft_f32>
	    arm_cmplx_mag_f32(temp_buff, outWave, size / 2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	461a      	mov	r2, r3
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	6978      	ldr	r0, [r7, #20]
 800422a:	f005 ff17 	bl	800a05c <arm_cmplx_mag_f32>
 800422e:	46b5      	mov	sp, r6
}
 8004230:	bf00      	nop
 8004232:	3724      	adds	r7, #36	@ 0x24
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800423a:	bf00      	nop
 800423c:	0800d63c 	.word	0x0800d63c

08004240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <HAL_MspInit+0x44>)
 8004248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424a:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <HAL_MspInit+0x44>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6613      	str	r3, [r2, #96]	@ 0x60
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <HAL_MspInit+0x44>)
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <HAL_MspInit+0x44>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	4a08      	ldr	r2, [pc, #32]	@ (8004284 <HAL_MspInit+0x44>)
 8004264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004268:	6593      	str	r3, [r2, #88]	@ 0x58
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_MspInit+0x44>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0a2      	sub	sp, #136	@ 0x88
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	2260      	movs	r2, #96	@ 0x60
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f007 f8b6 	bl	800b41a <memset>
  if(hadc->Instance==ADC1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a47      	ldr	r2, [pc, #284]	@ (80043d0 <HAL_ADC_MspInit+0x148>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	f040 8087 	bne.w	80043c8 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80042c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80042c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80042c6:	2302      	movs	r3, #2
 80042c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80042ce:	2308      	movs	r3, #8
 80042d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80042d2:	2307      	movs	r3, #7
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80042d6:	2302      	movs	r3, #2
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80042da:	2302      	movs	r3, #2
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80042de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 f8a1 	bl	8007430 <HAL_RCCEx_PeriphCLKConfig>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80042f4:	f7ff f97e 	bl	80035f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80042f8:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 80042fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fc:	4a35      	ldr	r2, [pc, #212]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 80042fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004304:	4b33      	ldr	r3, [pc, #204]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 8004306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004310:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 8004312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004314:	4a2f      	ldr	r2, [pc, #188]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800431c:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 800431e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004328:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 800432a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432c:	4a29      	ldr	r2, [pc, #164]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004334:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <HAL_ADC_MspInit+0x14c>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8004340:	2350      	movs	r3, #80	@ 0x50
 8004342:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004344:	230b      	movs	r3, #11
 8004346:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004356:	f002 f83d 	bl	80063d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800435a:	2302      	movs	r3, #2
 800435c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800435e:	230b      	movs	r3, #11
 8004360:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004366:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800436a:	4619      	mov	r1, r3
 800436c:	481a      	ldr	r0, [pc, #104]	@ (80043d8 <HAL_ADC_MspInit+0x150>)
 800436e:	f002 f831 	bl	80063d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004372:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 8004374:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_ADC_MspInit+0x158>)
 8004376:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004378:	4b18      	ldr	r3, [pc, #96]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800437e:	4b17      	ldr	r3, [pc, #92]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004384:	4b15      	ldr	r3, [pc, #84]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 8004386:	2200      	movs	r2, #0
 8004388:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800438a:	4b14      	ldr	r3, [pc, #80]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 800438c:	2280      	movs	r2, #128	@ 0x80
 800438e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004390:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 8004392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004396:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004398:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 800439a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800439e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80043a0:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043a6:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043ac:	480b      	ldr	r0, [pc, #44]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 80043ae:	f001 fd9b 	bl	8005ee8 <HAL_DMA_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80043b8:	f7ff f91c 	bl	80035f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a07      	ldr	r2, [pc, #28]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 80043c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043c2:	4a06      	ldr	r2, [pc, #24]	@ (80043dc <HAL_ADC_MspInit+0x154>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043c8:	bf00      	nop
 80043ca:	3788      	adds	r7, #136	@ 0x88
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	50040000 	.word	0x50040000
 80043d4:	40021000 	.word	0x40021000
 80043d8:	48000400 	.word	0x48000400
 80043dc:	20000258 	.word	0x20000258
 80043e0:	40020008 	.word	0x40020008

080043e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f4:	d113      	bne.n	800441e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <HAL_TIM_Base_MspInit+0x44>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004428 <HAL_TIM_Base_MspInit+0x44>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6593      	str	r3, [r2, #88]	@ 0x58
 8004402:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_TIM_Base_MspInit+0x44>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	201c      	movs	r0, #28
 8004414:	f001 fd31 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004418:	201c      	movs	r0, #28
 800441a:	f001 fd4a 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0a2      	sub	sp, #136	@ 0x88
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	2260      	movs	r2, #96	@ 0x60
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f006 ffe4 	bl	800b41a <memset>
  if(huart->Instance==USART2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a4d      	ldr	r2, [pc, #308]	@ (800458c <HAL_UART_MspInit+0x160>)
 8004458:	4293      	cmp	r3, r2
 800445a:	f040 8093 	bne.w	8004584 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800445e:	2302      	movs	r3, #2
 8004460:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004462:	2300      	movs	r3, #0
 8004464:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004466:	f107 0314 	add.w	r3, r7, #20
 800446a:	4618      	mov	r0, r3
 800446c:	f002 ffe0 	bl	8007430 <HAL_RCCEx_PeriphCLKConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004476:	f7ff f8bd 	bl	80035f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800447a:	4b45      	ldr	r3, [pc, #276]	@ (8004590 <HAL_UART_MspInit+0x164>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	4a44      	ldr	r2, [pc, #272]	@ (8004590 <HAL_UART_MspInit+0x164>)
 8004480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
 8004486:	4b42      	ldr	r3, [pc, #264]	@ (8004590 <HAL_UART_MspInit+0x164>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	4b3f      	ldr	r3, [pc, #252]	@ (8004590 <HAL_UART_MspInit+0x164>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	4a3e      	ldr	r2, [pc, #248]	@ (8004590 <HAL_UART_MspInit+0x164>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449e:	4b3c      	ldr	r3, [pc, #240]	@ (8004590 <HAL_UART_MspInit+0x164>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044aa:	230c      	movs	r3, #12
 80044ac:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044bc:	2307      	movs	r3, #7
 80044be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80044c6:	4619      	mov	r1, r3
 80044c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044cc:	f001 ff82 	bl	80063d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80044d0:	4b30      	ldr	r3, [pc, #192]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044d2:	4a31      	ldr	r2, [pc, #196]	@ (8004598 <HAL_UART_MspInit+0x16c>)
 80044d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80044d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044d8:	2202      	movs	r2, #2
 80044da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044ea:	2280      	movs	r2, #128	@ 0x80
 80044ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ee:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044f4:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80044fa:	4b26      	ldr	r3, [pc, #152]	@ (8004594 <HAL_UART_MspInit+0x168>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004500:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_UART_MspInit+0x168>)
 8004502:	2200      	movs	r2, #0
 8004504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004506:	4823      	ldr	r0, [pc, #140]	@ (8004594 <HAL_UART_MspInit+0x168>)
 8004508:	f001 fcee 	bl	8005ee8 <HAL_DMA_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8004512:	f7ff f86f 	bl	80035f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_UART_MspInit+0x168>)
 800451a:	675a      	str	r2, [r3, #116]	@ 0x74
 800451c:	4a1d      	ldr	r2, [pc, #116]	@ (8004594 <HAL_UART_MspInit+0x168>)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004522:	4b1e      	ldr	r3, [pc, #120]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004524:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <HAL_UART_MspInit+0x174>)
 8004526:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8004528:	4b1c      	ldr	r3, [pc, #112]	@ (800459c <HAL_UART_MspInit+0x170>)
 800452a:	2202      	movs	r2, #2
 800452c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800452e:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004530:	2210      	movs	r2, #16
 8004532:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004534:	4b19      	ldr	r3, [pc, #100]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800453a:	4b18      	ldr	r3, [pc, #96]	@ (800459c <HAL_UART_MspInit+0x170>)
 800453c:	2280      	movs	r2, #128	@ 0x80
 800453e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004540:	4b16      	ldr	r3, [pc, #88]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004542:	2200      	movs	r2, #0
 8004544:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004546:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004548:	2200      	movs	r2, #0
 800454a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <HAL_UART_MspInit+0x170>)
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004552:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004554:	2200      	movs	r2, #0
 8004556:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004558:	4810      	ldr	r0, [pc, #64]	@ (800459c <HAL_UART_MspInit+0x170>)
 800455a:	f001 fcc5 	bl	8005ee8 <HAL_DMA_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8004564:	f7ff f846 	bl	80035f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a0c      	ldr	r2, [pc, #48]	@ (800459c <HAL_UART_MspInit+0x170>)
 800456c:	671a      	str	r2, [r3, #112]	@ 0x70
 800456e:	4a0b      	ldr	r2, [pc, #44]	@ (800459c <HAL_UART_MspInit+0x170>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004574:	2200      	movs	r2, #0
 8004576:	2100      	movs	r1, #0
 8004578:	2026      	movs	r0, #38	@ 0x26
 800457a:	f001 fc7e 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800457e:	2026      	movs	r0, #38	@ 0x26
 8004580:	f001 fc97 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004584:	bf00      	nop
 8004586:	3788      	adds	r7, #136	@ 0x88
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40004400 	.word	0x40004400
 8004590:	40021000 	.word	0x40021000
 8004594:	20000374 	.word	0x20000374
 8004598:	4002006c 	.word	0x4002006c
 800459c:	200003bc 	.word	0x200003bc
 80045a0:	40020080 	.word	0x40020080

080045a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <NMI_Handler+0x4>

080045ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <HardFault_Handler+0x4>

080045b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <MemManage_Handler+0x4>

080045bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <BusFault_Handler+0x4>

080045c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <UsageFault_Handler+0x4>

080045cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045fa:	f000 f993 	bl	8004924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004608:	4802      	ldr	r0, [pc, #8]	@ (8004614 <DMA1_Channel1_IRQHandler+0x10>)
 800460a:	f001 fe04 	bl	8006216 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000258 	.word	0x20000258

08004618 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800461c:	4802      	ldr	r0, [pc, #8]	@ (8004628 <DMA1_Channel6_IRQHandler+0x10>)
 800461e:	f001 fdfa 	bl	8006216 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000374 	.word	0x20000374

0800462c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004630:	4802      	ldr	r0, [pc, #8]	@ (800463c <DMA1_Channel7_IRQHandler+0x10>)
 8004632:	f001 fdf0 	bl	8006216 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200003bc 	.word	0x200003bc

08004640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004644:	4802      	ldr	r0, [pc, #8]	@ (8004650 <TIM2_IRQHandler+0x10>)
 8004646:	f003 fadb 	bl	8007c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200002a0 	.word	0x200002a0

08004654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004658:	4802      	ldr	r0, [pc, #8]	@ (8004664 <USART2_IRQHandler+0x10>)
 800465a:	f003 ff5d 	bl	8008518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200002ec 	.word	0x200002ec

08004668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return 1;
 800466c:	2301      	movs	r3, #1
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_kill>:

int _kill(int pid, int sig)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004682:	f006 ff1d 	bl	800b4c0 <__errno>
 8004686:	4603      	mov	r3, r0
 8004688:	2216      	movs	r2, #22
 800468a:	601a      	str	r2, [r3, #0]
  return -1;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <_exit>:

void _exit (int status)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ffe7 	bl	8004678 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046aa:	bf00      	nop
 80046ac:	e7fd      	b.n	80046aa <_exit+0x12>

080046ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e00a      	b.n	80046d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046c0:	f3af 8000 	nop.w
 80046c4:	4601      	mov	r1, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	60ba      	str	r2, [r7, #8]
 80046cc:	b2ca      	uxtb	r2, r1
 80046ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3301      	adds	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	dbf0      	blt.n	80046c0 <_read+0x12>
  }

  return len;
 80046de:	687b      	ldr	r3, [r7, #4]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e009      	b.n	800470e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	60ba      	str	r2, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	dbf1      	blt.n	80046fa <_write+0x12>
  }
  return len;
 8004716:	687b      	ldr	r3, [r7, #4]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <_close>:

int _close(int file)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004748:	605a      	str	r2, [r3, #4]
  return 0;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_isatty>:

int _isatty(int file)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004760:	2301      	movs	r3, #1
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004790:	4a14      	ldr	r2, [pc, #80]	@ (80047e4 <_sbrk+0x5c>)
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <_sbrk+0x60>)
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800479c:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <_sbrk+0x64>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047a4:	4b11      	ldr	r3, [pc, #68]	@ (80047ec <_sbrk+0x64>)
 80047a6:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <_sbrk+0x68>)
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047aa:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <_sbrk+0x64>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d207      	bcs.n	80047c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047b8:	f006 fe82 	bl	800b4c0 <__errno>
 80047bc:	4603      	mov	r3, r0
 80047be:	220c      	movs	r2, #12
 80047c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047c6:	e009      	b.n	80047dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047c8:	4b08      	ldr	r3, [pc, #32]	@ (80047ec <_sbrk+0x64>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ce:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <_sbrk+0x64>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a05      	ldr	r2, [pc, #20]	@ (80047ec <_sbrk+0x64>)
 80047d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20010000 	.word	0x20010000
 80047e8:	00000400 	.word	0x00000400
 80047ec:	20000ec4 	.word	0x20000ec4
 80047f0:	20001018 	.word	0x20001018

080047f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <SystemInit+0x20>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	4a05      	ldr	r2, [pc, #20]	@ (8004814 <SystemInit+0x20>)
 8004800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004850 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800481c:	f7ff ffea 	bl	80047f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004820:	480c      	ldr	r0, [pc, #48]	@ (8004854 <LoopForever+0x6>)
  ldr r1, =_edata
 8004822:	490d      	ldr	r1, [pc, #52]	@ (8004858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004824:	4a0d      	ldr	r2, [pc, #52]	@ (800485c <LoopForever+0xe>)
  movs r3, #0
 8004826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004828:	e002      	b.n	8004830 <LoopCopyDataInit>

0800482a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800482a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800482c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800482e:	3304      	adds	r3, #4

08004830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004834:	d3f9      	bcc.n	800482a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004836:	4a0a      	ldr	r2, [pc, #40]	@ (8004860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004838:	4c0a      	ldr	r4, [pc, #40]	@ (8004864 <LoopForever+0x16>)
  movs r3, #0
 800483a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800483c:	e001      	b.n	8004842 <LoopFillZerobss>

0800483e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800483e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004840:	3204      	adds	r2, #4

08004842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004844:	d3fb      	bcc.n	800483e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004846:	f006 fe41 	bl	800b4cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800484a:	f7fe f91d 	bl	8002a88 <main>

0800484e <LoopForever>:

LoopForever:
    b LoopForever
 800484e:	e7fe      	b.n	800484e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004850:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004858:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800485c:	0800ed9c 	.word	0x0800ed9c
  ldr r2, =_sbss
 8004860:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004864:	20001018 	.word	0x20001018

08004868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004868:	e7fe      	b.n	8004868 <ADC1_IRQHandler>
	...

0800486c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004876:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <HAL_Init+0x3c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0b      	ldr	r2, [pc, #44]	@ (80048a8 <HAL_Init+0x3c>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004880:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004882:	2003      	movs	r0, #3
 8004884:	f001 faee 	bl	8005e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004888:	2000      	movs	r0, #0
 800488a:	f000 f80f 	bl	80048ac <HAL_InitTick>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	71fb      	strb	r3, [r7, #7]
 8004898:	e001      	b.n	800489e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800489a:	f7ff fcd1 	bl	8004240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800489e:	79fb      	ldrb	r3, [r7, #7]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40022000 	.word	0x40022000

080048ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048b8:	4b17      	ldr	r3, [pc, #92]	@ (8004918 <HAL_InitTick+0x6c>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d023      	beq.n	8004908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048c0:	4b16      	ldr	r3, [pc, #88]	@ (800491c <HAL_InitTick+0x70>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <HAL_InitTick+0x6c>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 faf9 	bl	8005ece <HAL_SYSTICK_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d809      	bhi.n	80048fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048e8:	2200      	movs	r2, #0
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048f0:	f001 fac3 	bl	8005e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004920 <HAL_InitTick+0x74>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e007      	b.n	800490c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e004      	b.n	800490c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	e001      	b.n	800490c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000008 	.word	0x20000008
 800491c:	20000000 	.word	0x20000000
 8004920:	20000004 	.word	0x20000004

08004924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004928:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <HAL_IncTick+0x20>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_IncTick+0x24>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4413      	add	r3, r2
 8004934:	4a04      	ldr	r2, [pc, #16]	@ (8004948 <HAL_IncTick+0x24>)
 8004936:	6013      	str	r3, [r2, #0]
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000008 	.word	0x20000008
 8004948:	20000ec8 	.word	0x20000ec8

0800494c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return uwTick;
 8004950:	4b03      	ldr	r3, [pc, #12]	@ (8004960 <HAL_GetTick+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000ec8 	.word	0x20000ec8

08004964 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	609a      	str	r2, [r3, #8]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	609a      	str	r2, [r3, #8]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3360      	adds	r3, #96	@ 0x60
 80049de:	461a      	mov	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <LL_ADC_SetOffset+0x44>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	03fff000 	.word	0x03fff000

08004a14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3360      	adds	r3, #96	@ 0x60
 8004a22:	461a      	mov	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3360      	adds	r3, #96	@ 0x60
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3330      	adds	r3, #48	@ 0x30
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	211f      	movs	r1, #31
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	401a      	ands	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0e9b      	lsrs	r3, r3, #26
 8004ad4:	f003 011f 	and.w	r1, r3, #31
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3314      	adds	r3, #20
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	0e5b      	lsrs	r3, r3, #25
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	4413      	add	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	0d1b      	lsrs	r3, r3, #20
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2107      	movs	r1, #7
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	401a      	ands	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	0d1b      	lsrs	r3, r3, #20
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f003 0318 	and.w	r3, r3, #24
 8004b6e:	4908      	ldr	r1, [pc, #32]	@ (8004b90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b70:	40d9      	lsrs	r1, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	400b      	ands	r3, r1
 8004b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	0007ffff 	.word	0x0007ffff

08004b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6093      	str	r3, [r2, #8]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bcc:	d101      	bne.n	8004bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1c:	d101      	bne.n	8004c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c6c:	f043 0202 	orr.w	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <LL_ADC_IsEnabled+0x18>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <LL_ADC_IsEnabled+0x1a>
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d101      	bne.n	8004cbe <LL_ADC_IsDisableOngoing+0x18>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_ADC_IsDisableOngoing+0x1a>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d101      	bne.n	8004d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d101      	bne.n	8004d32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e126      	b.n	8004fa8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fa8d 	bl	8004288 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff19 	bl	8004bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff feff 	bl	8004b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff34 	bl	8004c08 <LL_ADC_IsInternalRegulatorEnabled>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d115      	bne.n	8004dd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff18 	bl	8004be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004db0:	4b7f      	ldr	r3, [pc, #508]	@ (8004fb0 <HAL_ADC_Init+0x270>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	4a7f      	ldr	r2, [pc, #508]	@ (8004fb4 <HAL_ADC_Init+0x274>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dc4:	e002      	b.n	8004dcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f9      	bne.n	8004dc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ff16 	bl	8004c08 <LL_ADC_IsInternalRegulatorEnabled>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10d      	bne.n	8004dfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	f043 0210 	orr.w	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff76 	bl	8004cf4 <LL_ADC_REG_IsConversionOngoing>
 8004e08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 80bf 	bne.w	8004f96 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f040 80bb 	bne.w	8004f96 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e28:	f043 0202 	orr.w	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff23 	bl	8004c80 <LL_ADC_IsEnabled>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e40:	485d      	ldr	r0, [pc, #372]	@ (8004fb8 <HAL_ADC_Init+0x278>)
 8004e42:	f7ff ff1d 	bl	8004c80 <LL_ADC_IsEnabled>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4619      	mov	r1, r3
 8004e52:	485a      	ldr	r0, [pc, #360]	@ (8004fbc <HAL_ADC_Init+0x27c>)
 8004e54:	f7ff fd86 	bl	8004964 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7e5b      	ldrb	r3, [r3, #25]
 8004e5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d106      	bne.n	8004e94 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	045b      	lsls	r3, r3, #17
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <HAL_ADC_Init+0x280>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	69b9      	ldr	r1, [r7, #24]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff26 	bl	8004d1a <LL_ADC_INJ_IsConversionOngoing>
 8004ece:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d13d      	bne.n	8004f52 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d13a      	bne.n	8004f52 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ee0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ee8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ef8:	f023 0302 	bic.w	r3, r3, #2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	69b9      	ldr	r1, [r7, #24]
 8004f02:	430b      	orrs	r3, r1
 8004f04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d118      	bne.n	8004f42 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f1a:	f023 0304 	bic.w	r3, r3, #4
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f26:	4311      	orrs	r1, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004f2c:	4311      	orrs	r1, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f32:	430a      	orrs	r2, r1
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	611a      	str	r2, [r3, #16]
 8004f40:	e007      	b.n	8004f52 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10c      	bne.n	8004f74 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	f023 010f 	bic.w	r1, r3, #15
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f72:	e007      	b.n	8004f84 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 020f 	bic.w	r2, r2, #15
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	f023 0303 	bic.w	r3, r3, #3
 8004f8c:	f043 0201 	orr.w	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f94:	e007      	b.n	8004fa6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	f043 0210 	orr.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000000 	.word	0x20000000
 8004fb4:	053e2d63 	.word	0x053e2d63
 8004fb8:	50040000 	.word	0x50040000
 8004fbc:	50040300 	.word	0x50040300
 8004fc0:	fff0c007 	.word	0xfff0c007

08004fc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fe8d 	bl	8004cf4 <LL_ADC_REG_IsConversionOngoing>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d167      	bne.n	80050b0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_ADC_Start_DMA+0x2a>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e063      	b.n	80050b6 <HAL_ADC_Start_DMA+0xf2>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fc5e 	bl	80058b8 <ADC_Enable>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d14f      	bne.n	80050a6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d006      	beq.n	8005034 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	f023 0206 	bic.w	r2, r3, #6
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	659a      	str	r2, [r3, #88]	@ 0x58
 8005032:	e002      	b.n	800503a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503e:	4a20      	ldr	r2, [pc, #128]	@ (80050c0 <HAL_ADC_Start_DMA+0xfc>)
 8005040:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005046:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <HAL_ADC_Start_DMA+0x100>)
 8005048:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504e:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_ADC_Start_DMA+0x104>)
 8005050:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	221c      	movs	r2, #28
 8005058:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0210 	orr.w	r2, r2, #16
 8005070:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3340      	adds	r3, #64	@ 0x40
 800508c:	4619      	mov	r1, r3
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f000 ffe1 	bl	8006058 <HAL_DMA_Start_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fe14 	bl	8004ccc <LL_ADC_REG_StartConversion>
 80050a4:	e006      	b.n	80050b4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80050ae:	e001      	b.n	80050b4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	08005a83 	.word	0x08005a83
 80050c4:	08005b5b 	.word	0x08005b5b
 80050c8:	08005b77 	.word	0x08005b77

080050cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b0b6      	sub	sp, #216	@ 0xd8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x22>
 8005112:	2302      	movs	r3, #2
 8005114:	e3bb      	b.n	800588e <HAL_ADC_ConfigChannel+0x79a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fde6 	bl	8004cf4 <LL_ADC_REG_IsConversionOngoing>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 83a0 	bne.w	8005870 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d824      	bhi.n	800518a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	3b02      	subs	r3, #2
 8005146:	2b03      	cmp	r3, #3
 8005148:	d81b      	bhi.n	8005182 <HAL_ADC_ConfigChannel+0x8e>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <HAL_ADC_ConfigChannel+0x5c>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005161 	.word	0x08005161
 8005154:	08005169 	.word	0x08005169
 8005158:	08005171 	.word	0x08005171
 800515c:	08005179 	.word	0x08005179
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005160:	230c      	movs	r3, #12
 8005162:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005166:	e010      	b.n	800518a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005168:	2312      	movs	r3, #18
 800516a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800516e:	e00c      	b.n	800518a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005170:	2318      	movs	r3, #24
 8005172:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005176:	e008      	b.n	800518a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005178:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005180:	e003      	b.n	800518a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005182:	2306      	movs	r3, #6
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005188:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005198:	f7ff fc80 	bl	8004a9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fda7 	bl	8004cf4 <LL_ADC_REG_IsConversionOngoing>
 80051a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fdb3 	bl	8004d1a <LL_ADC_INJ_IsConversionOngoing>
 80051b4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 81a4 	bne.w	800550a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f040 819f 	bne.w	800550a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	461a      	mov	r2, r3
 80051da:	f7ff fc8b 	bl	8004af4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d00a      	beq.n	8005216 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6919      	ldr	r1, [r3, #16]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005210:	f7ff fbdc 	bl	80049cc <LL_ADC_SetOffset>
 8005214:	e179      	b.n	800550a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fbf9 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 8005222:	4603      	mov	r3, r0
 8005224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <HAL_ADC_ConfigChannel+0x14e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fbee 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 8005238:	4603      	mov	r3, r0
 800523a:	0e9b      	lsrs	r3, r3, #26
 800523c:	f003 021f 	and.w	r2, r3, #31
 8005240:	e01e      	b.n	8005280 <HAL_ADC_ConfigChannel+0x18c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fbe3 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 800524e:	4603      	mov	r3, r0
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005258:	fa93 f3a3 	rbit	r3, r3
 800525c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005264:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8005270:	2320      	movs	r3, #32
 8005272:	e004      	b.n	800527e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005278:	fab3 f383 	clz	r3, r3
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <HAL_ADC_ConfigChannel+0x1a4>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	0e9b      	lsrs	r3, r3, #26
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	e018      	b.n	80052ca <HAL_ADC_ConfigChannel+0x1d6>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80052ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80052b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80052bc:	2320      	movs	r3, #32
 80052be:	e004      	b.n	80052ca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80052c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d106      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fbb2 	bl	8004a40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2101      	movs	r1, #1
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fb96 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x214>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fb8b 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 80052fe:	4603      	mov	r3, r0
 8005300:	0e9b      	lsrs	r3, r3, #26
 8005302:	f003 021f 	and.w	r2, r3, #31
 8005306:	e01e      	b.n	8005346 <HAL_ADC_ConfigChannel+0x252>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fb80 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 8005314:	4603      	mov	r3, r0
 8005316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005326:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800532a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800532e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005336:	2320      	movs	r3, #32
 8005338:	e004      	b.n	8005344 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800533a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800533e:	fab3 f383 	clz	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <HAL_ADC_ConfigChannel+0x26a>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	0e9b      	lsrs	r3, r3, #26
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	e018      	b.n	8005390 <HAL_ADC_ConfigChannel+0x29c>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005366:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800536a:	fa93 f3a3 	rbit	r3, r3
 800536e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005372:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005376:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800537a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8005382:	2320      	movs	r3, #32
 8005384:	e004      	b.n	8005390 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005386:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800538a:	fab3 f383 	clz	r3, r3
 800538e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005390:	429a      	cmp	r2, r3
 8005392:	d106      	bne.n	80053a2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2200      	movs	r2, #0
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fb4f 	bl	8004a40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fb33 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x2da>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2102      	movs	r1, #2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fb28 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 80053c4:	4603      	mov	r3, r0
 80053c6:	0e9b      	lsrs	r3, r3, #26
 80053c8:	f003 021f 	and.w	r2, r3, #31
 80053cc:	e01e      	b.n	800540c <HAL_ADC_ConfigChannel+0x318>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fb1d 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 80053da:	4603      	mov	r3, r0
 80053dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e4:	fa93 f3a3 	rbit	r3, r3
 80053e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80053ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80053f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80053fc:	2320      	movs	r3, #32
 80053fe:	e004      	b.n	800540a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x330>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	0e9b      	lsrs	r3, r3, #26
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	e014      	b.n	800544e <HAL_ADC_ConfigChannel+0x35a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800542c:	fa93 f3a3 	rbit	r3, r3
 8005430:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005432:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005434:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005440:	2320      	movs	r3, #32
 8005442:	e004      	b.n	800544e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005448:	fab3 f383 	clz	r3, r3
 800544c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800544e:	429a      	cmp	r2, r3
 8005450:	d106      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2200      	movs	r2, #0
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff faf0 	bl	8004a40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2103      	movs	r1, #3
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fad4 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 800546c:	4603      	mov	r3, r0
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <HAL_ADC_ConfigChannel+0x398>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2103      	movs	r1, #3
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fac9 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 8005482:	4603      	mov	r3, r0
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	f003 021f 	and.w	r2, r3, #31
 800548a:	e017      	b.n	80054bc <HAL_ADC_ConfigChannel+0x3c8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2103      	movs	r1, #3
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fabe 	bl	8004a14 <LL_ADC_GetOffsetChannel>
 8005498:	4603      	mov	r3, r0
 800549a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800549e:	fa93 f3a3 	rbit	r3, r3
 80054a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80054a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80054a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80054ae:	2320      	movs	r3, #32
 80054b0:	e003      	b.n	80054ba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80054b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054b4:	fab3 f383 	clz	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x3e0>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	0e9b      	lsrs	r3, r3, #26
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	e011      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x404>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054dc:	fa93 f3a3 	rbit	r3, r3
 80054e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80054e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80054e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80054ec:	2320      	movs	r3, #32
 80054ee:	e003      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80054f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d106      	bne.n	800550a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	2103      	movs	r1, #3
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fa9b 	bl	8004a40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fbb6 	bl	8004c80 <LL_ADC_IsEnabled>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	f040 8140 	bne.w	800579c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	461a      	mov	r2, r3
 800552a:	f7ff fb0f 	bl	8004b4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4a8f      	ldr	r2, [pc, #572]	@ (8005770 <HAL_ADC_ConfigChannel+0x67c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	f040 8131 	bne.w	800579c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <HAL_ADC_ConfigChannel+0x46e>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	0e9b      	lsrs	r3, r3, #26
 8005550:	3301      	adds	r3, #1
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2b09      	cmp	r3, #9
 8005558:	bf94      	ite	ls
 800555a:	2301      	movls	r3, #1
 800555c:	2300      	movhi	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e019      	b.n	8005596 <HAL_ADC_ConfigChannel+0x4a2>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800556a:	fa93 f3a3 	rbit	r3, r3
 800556e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005572:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800557a:	2320      	movs	r3, #32
 800557c:	e003      	b.n	8005586 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800557e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005580:	fab3 f383 	clz	r3, r3
 8005584:	b2db      	uxtb	r3, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2b09      	cmp	r3, #9
 800558e:	bf94      	ite	ls
 8005590:	2301      	movls	r3, #1
 8005592:	2300      	movhi	r3, #0
 8005594:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005596:	2b00      	cmp	r3, #0
 8005598:	d079      	beq.n	800568e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x4c2>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	0e9b      	lsrs	r3, r3, #26
 80055ac:	3301      	adds	r3, #1
 80055ae:	069b      	lsls	r3, r3, #26
 80055b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055b4:	e015      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x4ee>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055be:	fa93 f3a3 	rbit	r3, r3
 80055c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80055c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80055c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80055ce:	2320      	movs	r3, #32
 80055d0:	e003      	b.n	80055da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80055d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	3301      	adds	r3, #1
 80055dc:	069b      	lsls	r3, r3, #26
 80055de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <HAL_ADC_ConfigChannel+0x50e>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	0e9b      	lsrs	r3, r3, #26
 80055f4:	3301      	adds	r3, #1
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2101      	movs	r1, #1
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	e017      	b.n	8005632 <HAL_ADC_ConfigChannel+0x53e>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560a:	fa93 f3a3 	rbit	r3, r3
 800560e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800561a:	2320      	movs	r3, #32
 800561c:	e003      	b.n	8005626 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800561e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005620:	fab3 f383 	clz	r3, r3
 8005624:	b2db      	uxtb	r3, r3
 8005626:	3301      	adds	r3, #1
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	ea42 0103 	orr.w	r1, r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x564>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0e9b      	lsrs	r3, r3, #26
 8005648:	3301      	adds	r3, #1
 800564a:	f003 021f 	and.w	r2, r3, #31
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	051b      	lsls	r3, r3, #20
 8005656:	e018      	b.n	800568a <HAL_ADC_ConfigChannel+0x596>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	3301      	adds	r3, #1
 800567e:	f003 021f 	and.w	r2, r3, #31
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800568a:	430b      	orrs	r3, r1
 800568c:	e081      	b.n	8005792 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x5b6>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0e9b      	lsrs	r3, r3, #26
 80056a0:	3301      	adds	r3, #1
 80056a2:	069b      	lsls	r3, r3, #26
 80056a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056a8:	e015      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x5e2>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	fa93 f3a3 	rbit	r3, r3
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80056bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80056c2:	2320      	movs	r3, #32
 80056c4:	e003      	b.n	80056ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80056c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c8:	fab3 f383 	clz	r3, r3
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	3301      	adds	r3, #1
 80056d0:	069b      	lsls	r3, r3, #26
 80056d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x602>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	0e9b      	lsrs	r3, r3, #26
 80056e8:	3301      	adds	r3, #1
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	2101      	movs	r1, #1
 80056f0:	fa01 f303 	lsl.w	r3, r1, r3
 80056f4:	e017      	b.n	8005726 <HAL_ADC_ConfigChannel+0x632>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	61bb      	str	r3, [r7, #24]
  return result;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800570e:	2320      	movs	r3, #32
 8005710:	e003      	b.n	800571a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	b2db      	uxtb	r3, r3
 800571a:	3301      	adds	r3, #1
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	2101      	movs	r1, #1
 8005722:	fa01 f303 	lsl.w	r3, r1, r3
 8005726:	ea42 0103 	orr.w	r1, r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x65e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	0e9b      	lsrs	r3, r3, #26
 800573c:	3301      	adds	r3, #1
 800573e:	f003 021f 	and.w	r2, r3, #31
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4413      	add	r3, r2
 8005748:	3b1e      	subs	r3, #30
 800574a:	051b      	lsls	r3, r3, #20
 800574c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005750:	e01e      	b.n	8005790 <HAL_ADC_ConfigChannel+0x69c>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	fa93 f3a3 	rbit	r3, r3
 800575e:	60fb      	str	r3, [r7, #12]
  return result;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800576a:	2320      	movs	r3, #32
 800576c:	e006      	b.n	800577c <HAL_ADC_ConfigChannel+0x688>
 800576e:	bf00      	nop
 8005770:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	3301      	adds	r3, #1
 800577e:	f003 021f 	and.w	r2, r3, #31
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	3b1e      	subs	r3, #30
 800578a:	051b      	lsls	r3, r3, #20
 800578c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005790:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005796:	4619      	mov	r1, r3
 8005798:	f7ff f9ac 	bl	8004af4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005898 <HAL_ADC_ConfigChannel+0x7a4>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d06c      	beq.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057a8:	483c      	ldr	r0, [pc, #240]	@ (800589c <HAL_ADC_ConfigChannel+0x7a8>)
 80057aa:	f7ff f901 	bl	80049b0 <LL_ADC_GetCommonPathInternalCh>
 80057ae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3a      	ldr	r2, [pc, #232]	@ (80058a0 <HAL_ADC_ConfigChannel+0x7ac>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d127      	bne.n	800580c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d121      	bne.n	800580c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a35      	ldr	r2, [pc, #212]	@ (80058a4 <HAL_ADC_ConfigChannel+0x7b0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d157      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057da:	4619      	mov	r1, r3
 80057dc:	482f      	ldr	r0, [pc, #188]	@ (800589c <HAL_ADC_ConfigChannel+0x7a8>)
 80057de:	f7ff f8d4 	bl	800498a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057e2:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	4a30      	ldr	r2, [pc, #192]	@ (80058ac <HAL_ADC_ConfigChannel+0x7b8>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	099b      	lsrs	r3, r3, #6
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80057fc:	e002      	b.n	8005804 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3b01      	subs	r3, #1
 8005802:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f9      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800580a:	e03a      	b.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <HAL_ADC_ConfigChannel+0x7bc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d113      	bne.n	800583e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800581a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1f      	ldr	r2, [pc, #124]	@ (80058a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d12a      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800582c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005830:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005834:	4619      	mov	r1, r3
 8005836:	4819      	ldr	r0, [pc, #100]	@ (800589c <HAL_ADC_ConfigChannel+0x7a8>)
 8005838:	f7ff f8a7 	bl	800498a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800583c:	e021      	b.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1c      	ldr	r2, [pc, #112]	@ (80058b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d11c      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800584c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d116      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800585e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005866:	4619      	mov	r1, r3
 8005868:	480c      	ldr	r0, [pc, #48]	@ (800589c <HAL_ADC_ConfigChannel+0x7a8>)
 800586a:	f7ff f88e 	bl	800498a <LL_ADC_SetCommonPathInternalCh>
 800586e:	e008      	b.n	8005882 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800588a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800588e:	4618      	mov	r0, r3
 8005890:	37d8      	adds	r7, #216	@ 0xd8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	80080000 	.word	0x80080000
 800589c:	50040300 	.word	0x50040300
 80058a0:	c7520000 	.word	0xc7520000
 80058a4:	50040000 	.word	0x50040000
 80058a8:	20000000 	.word	0x20000000
 80058ac:	053e2d63 	.word	0x053e2d63
 80058b0:	cb840000 	.word	0xcb840000
 80058b4:	80000001 	.word	0x80000001

080058b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff f9d9 	bl	8004c80 <LL_ADC_IsEnabled>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d169      	bne.n	80059a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	4b36      	ldr	r3, [pc, #216]	@ (80059b4 <ADC_Enable+0xfc>)
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e6:	f043 0210 	orr.w	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f2:	f043 0201 	orr.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e055      	b.n	80059aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff f994 	bl	8004c30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005908:	482b      	ldr	r0, [pc, #172]	@ (80059b8 <ADC_Enable+0x100>)
 800590a:	f7ff f851 	bl	80049b0 <LL_ADC_GetCommonPathInternalCh>
 800590e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005918:	4b28      	ldr	r3, [pc, #160]	@ (80059bc <ADC_Enable+0x104>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	099b      	lsrs	r3, r3, #6
 800591e:	4a28      	ldr	r2, [pc, #160]	@ (80059c0 <ADC_Enable+0x108>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	099b      	lsrs	r3, r3, #6
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	4613      	mov	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005932:	e002      	b.n	800593a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3b01      	subs	r3, #1
 8005938:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f9      	bne.n	8005934 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005940:	f7ff f804 	bl	800494c <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005946:	e028      	b.n	800599a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff f997 	bl	8004c80 <LL_ADC_IsEnabled>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff f967 	bl	8004c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005962:	f7fe fff3 	bl	800494c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d914      	bls.n	800599a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00d      	beq.n	800599a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005982:	f043 0210 	orr.w	r2, r3, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598e:	f043 0201 	orr.w	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e007      	b.n	80059aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d1cf      	bne.n	8005948 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	8000003f 	.word	0x8000003f
 80059b8:	50040300 	.word	0x50040300
 80059bc:	20000000 	.word	0x20000000
 80059c0:	053e2d63 	.word	0x053e2d63

080059c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff f968 	bl	8004ca6 <LL_ADC_IsDisableOngoing>
 80059d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff f94f 	bl	8004c80 <LL_ADC_IsEnabled>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d047      	beq.n	8005a78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d144      	bne.n	8005a78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030d 	and.w	r3, r3, #13
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d10c      	bne.n	8005a16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f929 	bl	8004c58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a0e:	f7fe ff9d 	bl	800494c <HAL_GetTick>
 8005a12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a14:	e029      	b.n	8005a6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f043 0210 	orr.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e023      	b.n	8005a7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a32:	f7fe ff8b 	bl	800494c <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d914      	bls.n	8005a6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	f043 0210 	orr.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	f043 0201 	orr.w	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e007      	b.n	8005a7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1dc      	bne.n	8005a32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d14b      	bne.n	8005b34 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d021      	beq.n	8005afa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe ffdb 	bl	8004a76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d032      	beq.n	8005b2c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d12b      	bne.n	8005b2c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11f      	bne.n	8005b2c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	655a      	str	r2, [r3, #84]	@ 0x54
 8005af8:	e018      	b.n	8005b2c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d111      	bne.n	8005b2c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b24:	f043 0201 	orr.w	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7fd fd31 	bl	8003594 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b32:	e00e      	b.n	8005b52 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff facd 	bl	80050e0 <HAL_ADC_ErrorCallback>
}
 8005b46:	e004      	b.n	8005b52 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff faaf 	bl	80050cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	f043 0204 	orr.w	r2, r3, #4
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fa9f 	bl	80050e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <LL_ADC_StartCalibration>:
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <LL_ADC_IsCalibrationOnGoing>:
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bf0:	d101      	bne.n	8005bf6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_ADCEx_Calibration_Start+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e04d      	b.n	8005cbc <HAL_ADCEx_Calibration_Start+0xb8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fecb 	bl	80059c4 <ADC_Disable>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d136      	bne.n	8005ca6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c40:	f023 0302 	bic.w	r3, r3, #2
 8005c44:	f043 0202 	orr.w	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff ffa9 	bl	8005baa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c58:	e014      	b.n	8005c84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8005c66:	d30d      	bcc.n	8005c84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6c:	f023 0312 	bic.w	r3, r3, #18
 8005c70:	f043 0210 	orr.w	r2, r3, #16
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e01b      	b.n	8005cbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ffa7 	bl	8005bdc <LL_ADC_IsCalibrationOnGoing>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e2      	bne.n	8005c5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c98:	f023 0303 	bic.w	r3, r3, #3
 8005c9c:	f043 0201 	orr.w	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ca4:	e005      	b.n	8005cb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	f043 0210 	orr.w	r2, r3, #16
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cf6:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <__NVIC_SetPriorityGrouping+0x44>)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	60d3      	str	r3, [r2, #12]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d10:	4b04      	ldr	r3, [pc, #16]	@ (8005d24 <__NVIC_GetPriorityGrouping+0x18>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	f003 0307 	and.w	r3, r3, #7
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	db0b      	blt.n	8005d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	f003 021f 	and.w	r2, r3, #31
 8005d40:	4907      	ldr	r1, [pc, #28]	@ (8005d60 <__NVIC_EnableIRQ+0x38>)
 8005d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	2001      	movs	r0, #1
 8005d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	e000e100 	.word	0xe000e100

08005d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	db0a      	blt.n	8005d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	490c      	ldr	r1, [pc, #48]	@ (8005db0 <__NVIC_SetPriority+0x4c>)
 8005d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d82:	0112      	lsls	r2, r2, #4
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	440b      	add	r3, r1
 8005d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d8c:	e00a      	b.n	8005da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4908      	ldr	r1, [pc, #32]	@ (8005db4 <__NVIC_SetPriority+0x50>)
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	3b04      	subs	r3, #4
 8005d9c:	0112      	lsls	r2, r2, #4
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	440b      	add	r3, r1
 8005da2:	761a      	strb	r2, [r3, #24]
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000e100 	.word	0xe000e100
 8005db4:	e000ed00 	.word	0xe000ed00

08005db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	@ 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f1c3 0307 	rsb	r3, r3, #7
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	bf28      	it	cs
 8005dd6:	2304      	movcs	r3, #4
 8005dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d902      	bls.n	8005de8 <NVIC_EncodePriority+0x30>
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3b03      	subs	r3, #3
 8005de6:	e000      	b.n	8005dea <NVIC_EncodePriority+0x32>
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	43d9      	mvns	r1, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e10:	4313      	orrs	r3, r2
         );
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3724      	adds	r7, #36	@ 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e30:	d301      	bcc.n	8005e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00f      	b.n	8005e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e36:	4a0a      	ldr	r2, [pc, #40]	@ (8005e60 <SysTick_Config+0x40>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e3e:	210f      	movs	r1, #15
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e44:	f7ff ff8e 	bl	8005d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e48:	4b05      	ldr	r3, [pc, #20]	@ (8005e60 <SysTick_Config+0x40>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4e:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <SysTick_Config+0x40>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	e000e010 	.word	0xe000e010

08005e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff29 	bl	8005cc4 <__NVIC_SetPriorityGrouping>
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	4603      	mov	r3, r0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e8c:	f7ff ff3e 	bl	8005d0c <__NVIC_GetPriorityGrouping>
 8005e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f7ff ff8e 	bl	8005db8 <NVIC_EncodePriority>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff5d 	bl	8005d64 <__NVIC_SetPriority>
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ff31 	bl	8005d28 <__NVIC_EnableIRQ>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ffa2 	bl	8005e20 <SysTick_Config>
 8005edc:	4603      	mov	r3, r0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e098      	b.n	800602c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	4b4d      	ldr	r3, [pc, #308]	@ (8006038 <HAL_DMA_Init+0x150>)
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d80f      	bhi.n	8005f26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800603c <HAL_DMA_Init+0x154>)
 8005f0e:	4413      	add	r3, r2
 8005f10:	4a4b      	ldr	r2, [pc, #300]	@ (8006040 <HAL_DMA_Init+0x158>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	009a      	lsls	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a48      	ldr	r2, [pc, #288]	@ (8006044 <HAL_DMA_Init+0x15c>)
 8005f22:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f24:	e00e      	b.n	8005f44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b46      	ldr	r3, [pc, #280]	@ (8006048 <HAL_DMA_Init+0x160>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	4a43      	ldr	r2, [pc, #268]	@ (8006040 <HAL_DMA_Init+0x158>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	009a      	lsls	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a42      	ldr	r2, [pc, #264]	@ (800604c <HAL_DMA_Init+0x164>)
 8005f42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f9e:	d039      	beq.n	8006014 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	4a27      	ldr	r2, [pc, #156]	@ (8006044 <HAL_DMA_Init+0x15c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d11a      	bne.n	8005fe0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005faa:	4b29      	ldr	r3, [pc, #164]	@ (8006050 <HAL_DMA_Init+0x168>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	f003 031c 	and.w	r3, r3, #28
 8005fb6:	210f      	movs	r1, #15
 8005fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	4924      	ldr	r1, [pc, #144]	@ (8006050 <HAL_DMA_Init+0x168>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005fc4:	4b22      	ldr	r3, [pc, #136]	@ (8006050 <HAL_DMA_Init+0x168>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd0:	f003 031c 	and.w	r3, r3, #28
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	491d      	ldr	r1, [pc, #116]	@ (8006050 <HAL_DMA_Init+0x168>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]
 8005fde:	e019      	b.n	8006014 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8006054 <HAL_DMA_Init+0x16c>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe8:	f003 031c 	and.w	r3, r3, #28
 8005fec:	210f      	movs	r1, #15
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	4917      	ldr	r1, [pc, #92]	@ (8006054 <HAL_DMA_Init+0x16c>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ffa:	4b16      	ldr	r3, [pc, #88]	@ (8006054 <HAL_DMA_Init+0x16c>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006006:	f003 031c 	and.w	r3, r3, #28
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	4911      	ldr	r1, [pc, #68]	@ (8006054 <HAL_DMA_Init+0x16c>)
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40020407 	.word	0x40020407
 800603c:	bffdfff8 	.word	0xbffdfff8
 8006040:	cccccccd 	.word	0xcccccccd
 8006044:	40020000 	.word	0x40020000
 8006048:	bffdfbf8 	.word	0xbffdfbf8
 800604c:	40020400 	.word	0x40020400
 8006050:	400200a8 	.word	0x400200a8
 8006054:	400204a8 	.word	0x400204a8

08006058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_DMA_Start_IT+0x20>
 8006074:	2302      	movs	r3, #2
 8006076:	e04b      	b.n	8006110 <HAL_DMA_Start_IT+0xb8>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d13a      	bne.n	8006102 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f95f 	bl	8006374 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d008      	beq.n	80060d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 020e 	orr.w	r2, r2, #14
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e00f      	b.n	80060f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0204 	bic.w	r2, r2, #4
 80060de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 020a 	orr.w	r2, r2, #10
 80060ee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e005      	b.n	800610e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800610a:	2302      	movs	r3, #2
 800610c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d008      	beq.n	8006142 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2204      	movs	r2, #4
 8006134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e022      	b.n	8006188 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 020e 	bic.w	r2, r2, #14
 8006150:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006166:	f003 021c 	and.w	r2, r3, #28
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	2101      	movs	r1, #1
 8006170:	fa01 f202 	lsl.w	r2, r1, r2
 8006174:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d005      	beq.n	80061b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2204      	movs	r2, #4
 80061b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
 80061b6:	e029      	b.n	800620c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 020e 	bic.w	r2, r2, #14
 80061c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061dc:	f003 021c 	and.w	r2, r3, #28
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	2101      	movs	r1, #1
 80061e6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
    }
  }
  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006232:	f003 031c 	and.w	r3, r3, #28
 8006236:	2204      	movs	r2, #4
 8006238:	409a      	lsls	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d026      	beq.n	8006290 <HAL_DMA_IRQHandler+0x7a>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d021      	beq.n	8006290 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0204 	bic.w	r2, r2, #4
 8006268:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626e:	f003 021c 	and.w	r2, r3, #28
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	2104      	movs	r1, #4
 8006278:	fa01 f202 	lsl.w	r2, r1, r2
 800627c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	2b00      	cmp	r3, #0
 8006284:	d071      	beq.n	800636a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800628e:	e06c      	b.n	800636a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006294:	f003 031c 	and.w	r3, r3, #28
 8006298:	2202      	movs	r2, #2
 800629a:	409a      	lsls	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d02e      	beq.n	8006302 <HAL_DMA_IRQHandler+0xec>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d029      	beq.n	8006302 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 020a 	bic.w	r2, r2, #10
 80062ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d8:	f003 021c 	and.w	r2, r3, #28
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	2102      	movs	r1, #2
 80062e2:	fa01 f202 	lsl.w	r2, r1, r2
 80062e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d038      	beq.n	800636a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006300:	e033      	b.n	800636a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006306:	f003 031c 	and.w	r3, r3, #28
 800630a:	2208      	movs	r2, #8
 800630c:	409a      	lsls	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d02a      	beq.n	800636c <HAL_DMA_IRQHandler+0x156>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d025      	beq.n	800636c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 020e 	bic.w	r2, r2, #14
 800632e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006334:	f003 021c 	and.w	r2, r3, #28
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	2101      	movs	r1, #1
 800633e:	fa01 f202 	lsl.w	r2, r1, r2
 8006342:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800636a:	bf00      	nop
 800636c:	bf00      	nop
}
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f003 021c 	and.w	r2, r3, #28
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	2101      	movs	r1, #1
 8006390:	fa01 f202 	lsl.w	r2, r1, r2
 8006394:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d108      	bne.n	80063b8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063b6:	e007      	b.n	80063c8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063e2:	e154      	b.n	800668e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	2101      	movs	r1, #1
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8146 	beq.w	8006688 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d005      	beq.n	8006414 <HAL_GPIO_Init+0x40>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d130      	bne.n	8006476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	2203      	movs	r2, #3
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	43db      	mvns	r3, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4013      	ands	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800644a:	2201      	movs	r2, #1
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	43db      	mvns	r3, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4013      	ands	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	091b      	lsrs	r3, r3, #4
 8006460:	f003 0201 	and.w	r2, r3, #1
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b03      	cmp	r3, #3
 8006480:	d017      	beq.n	80064b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	2203      	movs	r2, #3
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4013      	ands	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d123      	bne.n	8006506 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	08da      	lsrs	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3208      	adds	r2, #8
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	220f      	movs	r2, #15
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4013      	ands	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	08da      	lsrs	r2, r3, #3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3208      	adds	r2, #8
 8006500:	6939      	ldr	r1, [r7, #16]
 8006502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	2203      	movs	r2, #3
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4013      	ands	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f003 0203 	and.w	r2, r3, #3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80a0 	beq.w	8006688 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006548:	4b58      	ldr	r3, [pc, #352]	@ (80066ac <HAL_GPIO_Init+0x2d8>)
 800654a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654c:	4a57      	ldr	r2, [pc, #348]	@ (80066ac <HAL_GPIO_Init+0x2d8>)
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	6613      	str	r3, [r2, #96]	@ 0x60
 8006554:	4b55      	ldr	r3, [pc, #340]	@ (80066ac <HAL_GPIO_Init+0x2d8>)
 8006556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006560:	4a53      	ldr	r2, [pc, #332]	@ (80066b0 <HAL_GPIO_Init+0x2dc>)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	089b      	lsrs	r3, r3, #2
 8006566:	3302      	adds	r3, #2
 8006568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	220f      	movs	r2, #15
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800658a:	d019      	beq.n	80065c0 <HAL_GPIO_Init+0x1ec>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a49      	ldr	r2, [pc, #292]	@ (80066b4 <HAL_GPIO_Init+0x2e0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_GPIO_Init+0x1e8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a48      	ldr	r2, [pc, #288]	@ (80066b8 <HAL_GPIO_Init+0x2e4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00d      	beq.n	80065b8 <HAL_GPIO_Init+0x1e4>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a47      	ldr	r2, [pc, #284]	@ (80066bc <HAL_GPIO_Init+0x2e8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <HAL_GPIO_Init+0x1e0>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a46      	ldr	r2, [pc, #280]	@ (80066c0 <HAL_GPIO_Init+0x2ec>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d101      	bne.n	80065b0 <HAL_GPIO_Init+0x1dc>
 80065ac:	2304      	movs	r3, #4
 80065ae:	e008      	b.n	80065c2 <HAL_GPIO_Init+0x1ee>
 80065b0:	2307      	movs	r3, #7
 80065b2:	e006      	b.n	80065c2 <HAL_GPIO_Init+0x1ee>
 80065b4:	2303      	movs	r3, #3
 80065b6:	e004      	b.n	80065c2 <HAL_GPIO_Init+0x1ee>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e002      	b.n	80065c2 <HAL_GPIO_Init+0x1ee>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <HAL_GPIO_Init+0x1ee>
 80065c0:	2300      	movs	r3, #0
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	f002 0203 	and.w	r2, r2, #3
 80065c8:	0092      	lsls	r2, r2, #2
 80065ca:	4093      	lsls	r3, r2
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065d2:	4937      	ldr	r1, [pc, #220]	@ (80066b0 <HAL_GPIO_Init+0x2dc>)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	3302      	adds	r3, #2
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065e0:	4b38      	ldr	r3, [pc, #224]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4013      	ands	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006604:	4a2f      	ldr	r2, [pc, #188]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800660a:	4b2e      	ldr	r3, [pc, #184]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	43db      	mvns	r3, r3
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4013      	ands	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800662e:	4a25      	ldr	r2, [pc, #148]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006634:	4b23      	ldr	r3, [pc, #140]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	43db      	mvns	r3, r3
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4013      	ands	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800665e:	4b19      	ldr	r3, [pc, #100]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	43db      	mvns	r3, r3
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4013      	ands	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006682:	4a10      	ldr	r2, [pc, #64]	@ (80066c4 <HAL_GPIO_Init+0x2f0>)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	3301      	adds	r3, #1
 800668c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f aea3 	bne.w	80063e4 <HAL_GPIO_Init+0x10>
  }
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40021000 	.word	0x40021000
 80066b0:	40010000 	.word	0x40010000
 80066b4:	48000400 	.word	0x48000400
 80066b8:	48000800 	.word	0x48000800
 80066bc:	48000c00 	.word	0x48000c00
 80066c0:	48001000 	.word	0x48001000
 80066c4:	40010400 	.word	0x40010400

080066c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	807b      	strh	r3, [r7, #2]
 80066d4:	4613      	mov	r3, r2
 80066d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066d8:	787b      	ldrb	r3, [r7, #1]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066e4:	e002      	b.n	80066ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066e6:	887a      	ldrh	r2, [r7, #2]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066fc:	4b04      	ldr	r3, [pc, #16]	@ (8006710 <HAL_PWREx_GetVoltageRange+0x18>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40007000 	.word	0x40007000

08006714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006722:	d130      	bne.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006724:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800672c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006730:	d038      	beq.n	80067a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006732:	4b20      	ldr	r3, [pc, #128]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800673a:	4a1e      	ldr	r2, [pc, #120]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800673c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006740:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006742:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2232      	movs	r2, #50	@ 0x32
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	4a1b      	ldr	r2, [pc, #108]	@ (80067bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800674e:	fba2 2303 	umull	r2, r3, r2, r3
 8006752:	0c9b      	lsrs	r3, r3, #18
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006758:	e002      	b.n	8006760 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b01      	subs	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006760:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676c:	d102      	bne.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x60>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f2      	bne.n	800675a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006774:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006780:	d110      	bne.n	80067a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e00f      	b.n	80067a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006786:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006792:	d007      	beq.n	80067a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006794:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800679c:	4a05      	ldr	r2, [pc, #20]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800679e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40007000 	.word	0x40007000
 80067b8:	20000000 	.word	0x20000000
 80067bc:	431bde83 	.word	0x431bde83

080067c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f000 bc02 	b.w	8006fd8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d4:	4b96      	ldr	r3, [pc, #600]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 030c 	and.w	r3, r3, #12
 80067dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067de:	4b94      	ldr	r3, [pc, #592]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80e4 	beq.w	80069be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_RCC_OscConfig+0x4c>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b0c      	cmp	r3, #12
 8006800:	f040 808b 	bne.w	800691a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b01      	cmp	r3, #1
 8006808:	f040 8087 	bne.w	800691a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800680c:	4b88      	ldr	r3, [pc, #544]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_RCC_OscConfig+0x64>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e3d9      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1a      	ldr	r2, [r3, #32]
 8006828:	4b81      	ldr	r3, [pc, #516]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <HAL_RCC_OscConfig+0x7e>
 8006834:	4b7e      	ldr	r3, [pc, #504]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800683c:	e005      	b.n	800684a <HAL_RCC_OscConfig+0x8a>
 800683e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800684a:	4293      	cmp	r3, r2
 800684c:	d223      	bcs.n	8006896 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fd8c 	bl	8007370 <RCC_SetFlashLatencyFromMSIRange>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e3ba      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006862:	4b73      	ldr	r3, [pc, #460]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a72      	ldr	r2, [pc, #456]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b70      	ldr	r3, [pc, #448]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	496d      	ldr	r1, [pc, #436]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800687c:	4313      	orrs	r3, r2
 800687e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006880:	4b6b      	ldr	r3, [pc, #428]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	4968      	ldr	r1, [pc, #416]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006890:	4313      	orrs	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
 8006894:	e025      	b.n	80068e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006896:	4b66      	ldr	r3, [pc, #408]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a65      	ldr	r2, [pc, #404]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800689c:	f043 0308 	orr.w	r3, r3, #8
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b63      	ldr	r3, [pc, #396]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	4960      	ldr	r1, [pc, #384]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	495b      	ldr	r1, [pc, #364]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fd4c 	bl	8007370 <RCC_SetFlashLatencyFromMSIRange>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e37a      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068e2:	f000 fc81 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b51      	ldr	r3, [pc, #324]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	4950      	ldr	r1, [pc, #320]	@ (8006a34 <HAL_RCC_OscConfig+0x274>)
 80068f4:	5ccb      	ldrb	r3, [r1, r3]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	4a4e      	ldr	r2, [pc, #312]	@ (8006a38 <HAL_RCC_OscConfig+0x278>)
 8006900:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006902:	4b4e      	ldr	r3, [pc, #312]	@ (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd ffd0 	bl	80048ac <HAL_InitTick>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d052      	beq.n	80069bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	e35e      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d032      	beq.n	8006988 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006922:	4b43      	ldr	r3, [pc, #268]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a42      	ldr	r2, [pc, #264]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800692e:	f7fe f80d 	bl	800494c <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006936:	f7fe f809 	bl	800494c <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e347      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006948:	4b39      	ldr	r3, [pc, #228]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0f0      	beq.n	8006936 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006954:	4b36      	ldr	r3, [pc, #216]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a35      	ldr	r2, [pc, #212]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800695a:	f043 0308 	orr.w	r3, r3, #8
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	4b33      	ldr	r3, [pc, #204]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4930      	ldr	r1, [pc, #192]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006972:	4b2f      	ldr	r3, [pc, #188]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	492b      	ldr	r1, [pc, #172]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006982:	4313      	orrs	r3, r2
 8006984:	604b      	str	r3, [r1, #4]
 8006986:	e01a      	b.n	80069be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006988:	4b29      	ldr	r3, [pc, #164]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a28      	ldr	r2, [pc, #160]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006994:	f7fd ffda 	bl	800494c <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800699c:	f7fd ffd6 	bl	800494c <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e314      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069ae:	4b20      	ldr	r3, [pc, #128]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <HAL_RCC_OscConfig+0x1dc>
 80069ba:	e000      	b.n	80069be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d073      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_OscConfig+0x21c>
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d10e      	bne.n	80069f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d10b      	bne.n	80069f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069dc:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d063      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x2f0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d15f      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e2f1      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fc:	d106      	bne.n	8006a0c <HAL_RCC_OscConfig+0x24c>
 80069fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a0b      	ldr	r2, [pc, #44]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e025      	b.n	8006a58 <HAL_RCC_OscConfig+0x298>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a14:	d114      	bne.n	8006a40 <HAL_RCC_OscConfig+0x280>
 8006a16:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a05      	ldr	r2, [pc, #20]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	4b03      	ldr	r3, [pc, #12]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a02      	ldr	r2, [pc, #8]	@ (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e013      	b.n	8006a58 <HAL_RCC_OscConfig+0x298>
 8006a30:	40021000 	.word	0x40021000
 8006a34:	0800d64c 	.word	0x0800d64c
 8006a38:	20000000 	.word	0x20000000
 8006a3c:	20000004 	.word	0x20000004
 8006a40:	4ba0      	ldr	r3, [pc, #640]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a9f      	ldr	r2, [pc, #636]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a9c      	ldr	r2, [pc, #624]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d013      	beq.n	8006a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fd ff74 	bl	800494c <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fd ff70 	bl	800494c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	@ 0x64
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e2ae      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a7a:	4b92      	ldr	r3, [pc, #584]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x2a8>
 8006a86:	e014      	b.n	8006ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a88:	f7fd ff60 	bl	800494c <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a90:	f7fd ff5c 	bl	800494c <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b64      	cmp	r3, #100	@ 0x64
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e29a      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aa2:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x2d0>
 8006aae:	e000      	b.n	8006ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d060      	beq.n	8006b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d005      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x310>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b0c      	cmp	r3, #12
 8006ac8:	d119      	bne.n	8006afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d116      	bne.n	8006afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad0:	4b7c      	ldr	r3, [pc, #496]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x328>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e277      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae8:	4b76      	ldr	r3, [pc, #472]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	4973      	ldr	r1, [pc, #460]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afc:	e040      	b.n	8006b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d023      	beq.n	8006b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b06:	4b6f      	ldr	r3, [pc, #444]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fd ff1b 	bl	800494c <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b1a:	f7fd ff17 	bl	800494c <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e255      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b2c:	4b65      	ldr	r3, [pc, #404]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b38:	4b62      	ldr	r3, [pc, #392]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	061b      	lsls	r3, r3, #24
 8006b46:	495f      	ldr	r1, [pc, #380]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	604b      	str	r3, [r1, #4]
 8006b4c:	e018      	b.n	8006b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a5c      	ldr	r2, [pc, #368]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5a:	f7fd fef7 	bl	800494c <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b62:	f7fd fef3 	bl	800494c <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e231      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b74:	4b53      	ldr	r3, [pc, #332]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f0      	bne.n	8006b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03c      	beq.n	8006c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01c      	beq.n	8006bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b94:	4b4b      	ldr	r3, [pc, #300]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba4:	f7fd fed2 	bl	800494c <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bac:	f7fd fece 	bl	800494c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e20c      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bbe:	4b41      	ldr	r3, [pc, #260]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ef      	beq.n	8006bac <HAL_RCC_OscConfig+0x3ec>
 8006bcc:	e01b      	b.n	8006c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bce:	4b3d      	ldr	r3, [pc, #244]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bde:	f7fd feb5 	bl	800494c <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006be6:	f7fd feb1 	bl	800494c <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e1ef      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bf8:	4b32      	ldr	r3, [pc, #200]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1ef      	bne.n	8006be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80a6 	beq.w	8006d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c14:	2300      	movs	r3, #0
 8006c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c18:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10d      	bne.n	8006c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c24:	4b27      	ldr	r3, [pc, #156]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c28:	4a26      	ldr	r2, [pc, #152]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c30:	4b24      	ldr	r3, [pc, #144]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c40:	4b21      	ldr	r3, [pc, #132]	@ (8006cc8 <HAL_RCC_OscConfig+0x508>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d118      	bne.n	8006c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <HAL_RCC_OscConfig+0x508>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <HAL_RCC_OscConfig+0x508>)
 8006c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c58:	f7fd fe78 	bl	800494c <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c60:	f7fd fe74 	bl	800494c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e1b2      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c72:	4b15      	ldr	r3, [pc, #84]	@ (8006cc8 <HAL_RCC_OscConfig+0x508>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d108      	bne.n	8006c98 <HAL_RCC_OscConfig+0x4d8>
 8006c86:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c96:	e029      	b.n	8006cec <HAL_RCC_OscConfig+0x52c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d115      	bne.n	8006ccc <HAL_RCC_OscConfig+0x50c>
 8006ca0:	4b08      	ldr	r3, [pc, #32]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca6:	4a07      	ldr	r2, [pc, #28]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006ca8:	f043 0304 	orr.w	r3, r3, #4
 8006cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cb0:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb6:	4a03      	ldr	r2, [pc, #12]	@ (8006cc4 <HAL_RCC_OscConfig+0x504>)
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cc0:	e014      	b.n	8006cec <HAL_RCC_OscConfig+0x52c>
 8006cc2:	bf00      	nop
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	4b9a      	ldr	r3, [pc, #616]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd2:	4a99      	ldr	r2, [pc, #612]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cdc:	4b96      	ldr	r3, [pc, #600]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce2:	4a95      	ldr	r2, [pc, #596]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006ce4:	f023 0304 	bic.w	r3, r3, #4
 8006ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fd fe2a 	bl	800494c <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cfa:	e00a      	b.n	8006d12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfc:	f7fd fe26 	bl	800494c <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e162      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d12:	4b89      	ldr	r3, [pc, #548]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0ed      	beq.n	8006cfc <HAL_RCC_OscConfig+0x53c>
 8006d20:	e015      	b.n	8006d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d22:	f7fd fe13 	bl	800494c <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d28:	e00a      	b.n	8006d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d2a:	f7fd fe0f 	bl	800494c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e14b      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d40:	4b7d      	ldr	r3, [pc, #500]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ed      	bne.n	8006d2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d4e:	7ffb      	ldrb	r3, [r7, #31]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d105      	bne.n	8006d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d54:	4b78      	ldr	r3, [pc, #480]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d58:	4a77      	ldr	r2, [pc, #476]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d03c      	beq.n	8006de6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01c      	beq.n	8006dae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d74:	4b70      	ldr	r3, [pc, #448]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d7a:	4a6f      	ldr	r2, [pc, #444]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fd fde2 	bl	800494c <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d8c:	f7fd fdde 	bl	800494c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e11c      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d9e:	4b66      	ldr	r3, [pc, #408]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0ef      	beq.n	8006d8c <HAL_RCC_OscConfig+0x5cc>
 8006dac:	e01b      	b.n	8006de6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dae:	4b62      	ldr	r3, [pc, #392]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006db4:	4a60      	ldr	r2, [pc, #384]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbe:	f7fd fdc5 	bl	800494c <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc6:	f7fd fdc1 	bl	800494c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0ff      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dd8:	4b57      	ldr	r3, [pc, #348]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1ef      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80f3 	beq.w	8006fd6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	f040 80c9 	bne.w	8006f8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f003 0203 	and.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d12c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d123      	bne.n	8006e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d11b      	bne.n	8006e68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d113      	bne.n	8006e68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d109      	bne.n	8006e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	3b01      	subs	r3, #1
 8006e62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d06b      	beq.n	8006f40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b0c      	cmp	r3, #12
 8006e6c:	d062      	beq.n	8006f34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e6e:	4b32      	ldr	r3, [pc, #200]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e0ac      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2d      	ldr	r2, [pc, #180]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e8a:	f7fd fd5f 	bl	800494c <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e90:	e008      	b.n	8006ea4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e92:	f7fd fd5b 	bl	800494c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e099      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ea4:	4b24      	ldr	r3, [pc, #144]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f0      	bne.n	8006e92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb0:	4b21      	ldr	r3, [pc, #132]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	4b21      	ldr	r3, [pc, #132]	@ (8006f3c <HAL_RCC_OscConfig+0x77c>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ec0:	3a01      	subs	r2, #1
 8006ec2:	0112      	lsls	r2, r2, #4
 8006ec4:	4311      	orrs	r1, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006eca:	0212      	lsls	r2, r2, #8
 8006ecc:	4311      	orrs	r1, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ed2:	0852      	lsrs	r2, r2, #1
 8006ed4:	3a01      	subs	r2, #1
 8006ed6:	0552      	lsls	r2, r2, #21
 8006ed8:	4311      	orrs	r1, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ede:	0852      	lsrs	r2, r2, #1
 8006ee0:	3a01      	subs	r2, #1
 8006ee2:	0652      	lsls	r2, r2, #25
 8006ee4:	4311      	orrs	r1, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006eea:	06d2      	lsls	r2, r2, #27
 8006eec:	430a      	orrs	r2, r1
 8006eee:	4912      	ldr	r1, [pc, #72]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ef4:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f00:	4b0d      	ldr	r3, [pc, #52]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	4a0c      	ldr	r2, [pc, #48]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f0c:	f7fd fd1e 	bl	800494c <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fd fd1a 	bl	800494c <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e058      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f26:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <HAL_RCC_OscConfig+0x778>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f32:	e050      	b.n	8006fd6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e04f      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f40:	4b27      	ldr	r3, [pc, #156]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d144      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f4c:	4b24      	ldr	r3, [pc, #144]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a23      	ldr	r2, [pc, #140]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f58:	4b21      	ldr	r3, [pc, #132]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4a20      	ldr	r2, [pc, #128]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f64:	f7fd fcf2 	bl	800494c <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6c:	f7fd fcee 	bl	800494c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e02c      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7e:	4b18      	ldr	r3, [pc, #96]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x7ac>
 8006f8a:	e024      	b.n	8006fd6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b0c      	cmp	r3, #12
 8006f90:	d01f      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a12      	ldr	r2, [pc, #72]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006f98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9e:	f7fd fcd5 	bl	800494c <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa6:	f7fd fcd1 	bl	800494c <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e00f      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fb8:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f0      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	4905      	ldr	r1, [pc, #20]	@ (8006fe0 <HAL_RCC_OscConfig+0x820>)
 8006fca:	4b06      	ldr	r3, [pc, #24]	@ (8006fe4 <HAL_RCC_OscConfig+0x824>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60cb      	str	r3, [r1, #12]
 8006fd0:	e001      	b.n	8006fd6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	feeefffc 	.word	0xfeeefffc

08006fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0e7      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ffc:	4b75      	ldr	r3, [pc, #468]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d910      	bls.n	800702c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700a:	4b72      	ldr	r3, [pc, #456]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f023 0207 	bic.w	r2, r3, #7
 8007012:	4970      	ldr	r1, [pc, #448]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	4313      	orrs	r3, r2
 8007018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800701a:	4b6e      	ldr	r3, [pc, #440]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0cf      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d010      	beq.n	800705a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007044:	429a      	cmp	r2, r3
 8007046:	d908      	bls.n	800705a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007048:	4b63      	ldr	r3, [pc, #396]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	4960      	ldr	r1, [pc, #384]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007056:	4313      	orrs	r3, r2
 8007058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04c      	beq.n	8007100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b03      	cmp	r3, #3
 800706c:	d107      	bne.n	800707e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800706e:	4b5a      	ldr	r3, [pc, #360]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d121      	bne.n	80070be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e0a6      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d107      	bne.n	8007096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007086:	4b54      	ldr	r3, [pc, #336]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d115      	bne.n	80070be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e09a      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d107      	bne.n	80070ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800709e:	4b4e      	ldr	r3, [pc, #312]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e08e      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ae:	4b4a      	ldr	r3, [pc, #296]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e086      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070be:	4b46      	ldr	r3, [pc, #280]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f023 0203 	bic.w	r2, r3, #3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4943      	ldr	r1, [pc, #268]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d0:	f7fd fc3c 	bl	800494c <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d6:	e00a      	b.n	80070ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d8:	f7fd fc38 	bl	800494c <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e06e      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ee:	4b3a      	ldr	r3, [pc, #232]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 020c 	and.w	r2, r3, #12
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d1eb      	bne.n	80070d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	4b31      	ldr	r3, [pc, #196]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007118:	429a      	cmp	r2, r3
 800711a:	d208      	bcs.n	800712e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800711c:	4b2e      	ldr	r3, [pc, #184]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	492b      	ldr	r1, [pc, #172]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800712e:	4b29      	ldr	r3, [pc, #164]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d210      	bcs.n	800715e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800713c:	4b25      	ldr	r3, [pc, #148]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f023 0207 	bic.w	r2, r3, #7
 8007144:	4923      	ldr	r1, [pc, #140]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	4313      	orrs	r3, r2
 800714a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714c:	4b21      	ldr	r3, [pc, #132]	@ (80071d4 <HAL_RCC_ClockConfig+0x1ec>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d001      	beq.n	800715e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e036      	b.n	80071cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800716a:	4b1b      	ldr	r3, [pc, #108]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	4918      	ldr	r1, [pc, #96]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007178:	4313      	orrs	r3, r2
 800717a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007188:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4910      	ldr	r1, [pc, #64]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 8007198:	4313      	orrs	r3, r2
 800719a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800719c:	f000 f824 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 80071a0:	4602      	mov	r2, r0
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <HAL_RCC_ClockConfig+0x1f0>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	490b      	ldr	r1, [pc, #44]	@ (80071dc <HAL_RCC_ClockConfig+0x1f4>)
 80071ae:	5ccb      	ldrb	r3, [r1, r3]
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
 80071b8:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <HAL_RCC_ClockConfig+0x1f8>)
 80071ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80071bc:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <HAL_RCC_ClockConfig+0x1fc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fd fb73 	bl	80048ac <HAL_InitTick>
 80071c6:	4603      	mov	r3, r0
 80071c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40022000 	.word	0x40022000
 80071d8:	40021000 	.word	0x40021000
 80071dc:	0800d64c 	.word	0x0800d64c
 80071e0:	20000000 	.word	0x20000000
 80071e4:	20000004 	.word	0x20000004

080071e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b089      	sub	sp, #36	@ 0x24
 80071ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071f6:	4b3e      	ldr	r3, [pc, #248]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007200:	4b3b      	ldr	r3, [pc, #236]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x34>
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b0c      	cmp	r3, #12
 8007214:	d121      	bne.n	800725a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d11e      	bne.n	800725a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800721c:	4b34      	ldr	r3, [pc, #208]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d107      	bne.n	8007238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007228:	4b31      	ldr	r3, [pc, #196]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800722a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e005      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007238:	4b2d      	ldr	r3, [pc, #180]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	091b      	lsrs	r3, r3, #4
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007244:	4a2b      	ldr	r2, [pc, #172]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007258:	e00a      	b.n	8007270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b04      	cmp	r3, #4
 800725e:	d102      	bne.n	8007266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007260:	4b25      	ldr	r3, [pc, #148]	@ (80072f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	e004      	b.n	8007270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d101      	bne.n	8007270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800726c:	4b23      	ldr	r3, [pc, #140]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x114>)
 800726e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d134      	bne.n	80072e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007276:	4b1e      	ldr	r3, [pc, #120]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d003      	beq.n	800728e <HAL_RCC_GetSysClockFreq+0xa6>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d003      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0xac>
 800728c:	e005      	b.n	800729a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800728e:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007290:	617b      	str	r3, [r7, #20]
      break;
 8007292:	e005      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007294:	4b19      	ldr	r3, [pc, #100]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x114>)
 8007296:	617b      	str	r3, [r7, #20]
      break;
 8007298:	e002      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	617b      	str	r3, [r7, #20]
      break;
 800729e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072a0:	4b13      	ldr	r3, [pc, #76]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	091b      	lsrs	r3, r3, #4
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	3301      	adds	r3, #1
 80072ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072ae:	4b10      	ldr	r3, [pc, #64]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	fb03 f202 	mul.w	r2, r3, r2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	0e5b      	lsrs	r3, r3, #25
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	3301      	adds	r3, #1
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072e0:	69bb      	ldr	r3, [r7, #24]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3724      	adds	r7, #36	@ 0x24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40021000 	.word	0x40021000
 80072f4:	0800d664 	.word	0x0800d664
 80072f8:	00f42400 	.word	0x00f42400
 80072fc:	007a1200 	.word	0x007a1200

08007300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007304:	4b03      	ldr	r3, [pc, #12]	@ (8007314 <HAL_RCC_GetHCLKFreq+0x14>)
 8007306:	681b      	ldr	r3, [r3, #0]
}
 8007308:	4618      	mov	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20000000 	.word	0x20000000

08007318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800731c:	f7ff fff0 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b06      	ldr	r3, [pc, #24]	@ (800733c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4904      	ldr	r1, [pc, #16]	@ (8007340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40021000 	.word	0x40021000
 8007340:	0800d65c 	.word	0x0800d65c

08007344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007348:	f7ff ffda 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0adb      	lsrs	r3, r3, #11
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4904      	ldr	r1, [pc, #16]	@ (800736c <HAL_RCC_GetPCLK2Freq+0x28>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40021000 	.word	0x40021000
 800736c:	0800d65c 	.word	0x0800d65c

08007370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800737c:	4b2a      	ldr	r3, [pc, #168]	@ (8007428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800737e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007388:	f7ff f9b6 	bl	80066f8 <HAL_PWREx_GetVoltageRange>
 800738c:	6178      	str	r0, [r7, #20]
 800738e:	e014      	b.n	80073ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007390:	4b25      	ldr	r3, [pc, #148]	@ (8007428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007394:	4a24      	ldr	r2, [pc, #144]	@ (8007428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800739a:	6593      	str	r3, [r2, #88]	@ 0x58
 800739c:	4b22      	ldr	r3, [pc, #136]	@ (8007428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800739e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073a8:	f7ff f9a6 	bl	80066f8 <HAL_PWREx_GetVoltageRange>
 80073ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c0:	d10b      	bne.n	80073da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b80      	cmp	r3, #128	@ 0x80
 80073c6:	d919      	bls.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80073cc:	d902      	bls.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073ce:	2302      	movs	r3, #2
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e013      	b.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073d4:	2301      	movs	r3, #1
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	e010      	b.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b80      	cmp	r3, #128	@ 0x80
 80073de:	d902      	bls.n	80073e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80073e0:	2303      	movs	r3, #3
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	e00a      	b.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b80      	cmp	r3, #128	@ 0x80
 80073ea:	d102      	bne.n	80073f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073ec:	2302      	movs	r3, #2
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	e004      	b.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b70      	cmp	r3, #112	@ 0x70
 80073f6:	d101      	bne.n	80073fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073f8:	2301      	movs	r3, #1
 80073fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073fc:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f023 0207 	bic.w	r2, r3, #7
 8007404:	4909      	ldr	r1, [pc, #36]	@ (800742c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800740c:	4b07      	ldr	r3, [pc, #28]	@ (800742c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	429a      	cmp	r2, r3
 8007418:	d001      	beq.n	800741e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021000 	.word	0x40021000
 800742c:	40022000 	.word	0x40022000

08007430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007438:	2300      	movs	r3, #0
 800743a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800743c:	2300      	movs	r3, #0
 800743e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007448:	2b00      	cmp	r3, #0
 800744a:	d031      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007450:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007454:	d01a      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800745a:	d814      	bhi.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007460:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007464:	d10f      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007466:	4b5d      	ldr	r3, [pc, #372]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	4a5c      	ldr	r2, [pc, #368]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800746c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007472:	e00c      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fa22 	bl	80078c4 <RCCEx_PLLSAI1_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	74fb      	strb	r3, [r7, #19]
      break;
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800748c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748e:	7cfb      	ldrb	r3, [r7, #19]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007494:	4b51      	ldr	r3, [pc, #324]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a2:	494e      	ldr	r1, [pc, #312]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80074aa:	e001      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 809e 	beq.w	80075fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074be:	2300      	movs	r3, #0
 80074c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074c2:	4b46      	ldr	r3, [pc, #280]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074d8:	4b40      	ldr	r3, [pc, #256]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074dc:	4a3f      	ldr	r2, [pc, #252]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80074e4:	4b3d      	ldr	r3, [pc, #244]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074f0:	2301      	movs	r3, #1
 80074f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074f4:	4b3a      	ldr	r3, [pc, #232]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a39      	ldr	r2, [pc, #228]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80074fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007500:	f7fd fa24 	bl	800494c <HAL_GetTick>
 8007504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007506:	e009      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007508:	f7fd fa20 	bl	800494c <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d902      	bls.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	74fb      	strb	r3, [r7, #19]
        break;
 800751a:	e005      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800751c:	4b30      	ldr	r3, [pc, #192]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0ef      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007528:	7cfb      	ldrb	r3, [r7, #19]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d15a      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800752e:	4b2b      	ldr	r3, [pc, #172]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01e      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	429a      	cmp	r2, r3
 8007548:	d019      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800754a:	4b24      	ldr	r3, [pc, #144]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800754c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007554:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007556:	4b21      	ldr	r3, [pc, #132]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755c:	4a1f      	ldr	r2, [pc, #124]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800755e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007566:	4b1d      	ldr	r3, [pc, #116]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756c:	4a1b      	ldr	r2, [pc, #108]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800756e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007576:	4a19      	ldr	r2, [pc, #100]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d016      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fd f9e0 	bl	800494c <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800758e:	e00b      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007590:	f7fd f9dc 	bl	800494c <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800759e:	4293      	cmp	r3, r2
 80075a0:	d902      	bls.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	74fb      	strb	r3, [r7, #19]
            break;
 80075a6:	e006      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075a8:	4b0c      	ldr	r3, [pc, #48]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0ec      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80075b6:	7cfb      	ldrb	r3, [r7, #19]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10b      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075bc:	4b07      	ldr	r3, [pc, #28]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ca:	4904      	ldr	r1, [pc, #16]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80075d2:	e009      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075d4:	7cfb      	ldrb	r3, [r7, #19]
 80075d6:	74bb      	strb	r3, [r7, #18]
 80075d8:	e006      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80075da:	bf00      	nop
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7cfb      	ldrb	r3, [r7, #19]
 80075e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075e8:	7c7b      	ldrb	r3, [r7, #17]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d105      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ee:	4b8d      	ldr	r3, [pc, #564]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80075f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f2:	4a8c      	ldr	r2, [pc, #560]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80075f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007606:	4b87      	ldr	r3, [pc, #540]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760c:	f023 0203 	bic.w	r2, r3, #3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	4983      	ldr	r1, [pc, #524]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007628:	4b7e      	ldr	r3, [pc, #504]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762e:	f023 020c 	bic.w	r2, r3, #12
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007636:	497b      	ldr	r1, [pc, #492]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800764a:	4b76      	ldr	r3, [pc, #472]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007650:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	4972      	ldr	r1, [pc, #456]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800766c:	4b6d      	ldr	r3, [pc, #436]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	496a      	ldr	r1, [pc, #424]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800768e:	4b65      	ldr	r3, [pc, #404]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007694:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769c:	4961      	ldr	r1, [pc, #388]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	4959      	ldr	r1, [pc, #356]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076d2:	4b54      	ldr	r3, [pc, #336]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	4950      	ldr	r1, [pc, #320]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007702:	4948      	ldr	r1, [pc, #288]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007716:	4b43      	ldr	r3, [pc, #268]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	493f      	ldr	r1, [pc, #252]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d028      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007738:	4b3a      	ldr	r3, [pc, #232]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007746:	4937      	ldr	r1, [pc, #220]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007756:	d106      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b32      	ldr	r3, [pc, #200]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a31      	ldr	r2, [pc, #196]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
 8007764:	e011      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800776e:	d10c      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	2101      	movs	r1, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f8a4 	bl	80078c4 <RCCEx_PLLSAI1_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007780:	7cfb      	ldrb	r3, [r7, #19]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d028      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007796:	4b23      	ldr	r3, [pc, #140]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a4:	491f      	ldr	r1, [pc, #124]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077b4:	d106      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077c0:	60d3      	str	r3, [r2, #12]
 80077c2:	e011      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3304      	adds	r3, #4
 80077d2:	2101      	movs	r1, #1
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f875 	bl	80078c4 <RCCEx_PLLSAI1_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077de:	7cfb      	ldrb	r3, [r7, #19]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02b      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80077f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007802:	4908      	ldr	r1, [pc, #32]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007804:	4313      	orrs	r3, r2
 8007806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007812:	d109      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007814:	4b03      	ldr	r3, [pc, #12]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4a02      	ldr	r2, [pc, #8]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800781a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800781e:	60d3      	str	r3, [r2, #12]
 8007820:	e014      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007830:	d10c      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3304      	adds	r3, #4
 8007836:	2101      	movs	r1, #1
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f843 	bl	80078c4 <RCCEx_PLLSAI1_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007842:	7cfb      	ldrb	r3, [r7, #19]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8007848:	7cfb      	ldrb	r3, [r7, #19]
 800784a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01c      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007858:	4b19      	ldr	r3, [pc, #100]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800785e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007866:	4916      	ldr	r1, [pc, #88]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007868:	4313      	orrs	r3, r2
 800786a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007876:	d10c      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	2102      	movs	r1, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f820 	bl	80078c4 <RCCEx_PLLSAI1_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007888:	7cfb      	ldrb	r3, [r7, #19]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800788e:	7cfb      	ldrb	r3, [r7, #19]
 8007890:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ac:	4904      	ldr	r1, [pc, #16]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80078b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40021000 	.word	0x40021000

080078c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80078d2:	4b74      	ldr	r3, [pc, #464]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d018      	beq.n	8007910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80078de:	4b71      	ldr	r3, [pc, #452]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0203 	and.w	r2, r3, #3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d10d      	bne.n	800790a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
       ||
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80078f6:	4b6b      	ldr	r3, [pc, #428]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	091b      	lsrs	r3, r3, #4
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
       ||
 8007906:	429a      	cmp	r2, r3
 8007908:	d047      	beq.n	800799a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
 800790e:	e044      	b.n	800799a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b03      	cmp	r3, #3
 8007916:	d018      	beq.n	800794a <RCCEx_PLLSAI1_Config+0x86>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d825      	bhi.n	8007968 <RCCEx_PLLSAI1_Config+0xa4>
 800791c:	2b01      	cmp	r3, #1
 800791e:	d002      	beq.n	8007926 <RCCEx_PLLSAI1_Config+0x62>
 8007920:	2b02      	cmp	r3, #2
 8007922:	d009      	beq.n	8007938 <RCCEx_PLLSAI1_Config+0x74>
 8007924:	e020      	b.n	8007968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007926:	4b5f      	ldr	r3, [pc, #380]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d11d      	bne.n	800796e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007936:	e01a      	b.n	800796e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007938:	4b5a      	ldr	r3, [pc, #360]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007940:	2b00      	cmp	r3, #0
 8007942:	d116      	bne.n	8007972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007948:	e013      	b.n	8007972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800794a:	4b56      	ldr	r3, [pc, #344]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10f      	bne.n	8007976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007956:	4b53      	ldr	r3, [pc, #332]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d109      	bne.n	8007976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007966:	e006      	b.n	8007976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	e004      	b.n	8007978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007976:	bf00      	nop
    }

    if(status == HAL_OK)
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10d      	bne.n	800799a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800797e:	4b49      	ldr	r3, [pc, #292]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	3b01      	subs	r3, #1
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	430b      	orrs	r3, r1
 8007994:	4943      	ldr	r1, [pc, #268]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007996:	4313      	orrs	r3, r2
 8007998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d17c      	bne.n	8007a9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80079a0:	4b40      	ldr	r3, [pc, #256]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3f      	ldr	r2, [pc, #252]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ac:	f7fc ffce 	bl	800494c <HAL_GetTick>
 80079b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079b2:	e009      	b.n	80079c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079b4:	f7fc ffca 	bl	800494c <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d902      	bls.n	80079c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	73fb      	strb	r3, [r7, #15]
        break;
 80079c6:	e005      	b.n	80079d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079c8:	4b36      	ldr	r3, [pc, #216]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1ef      	bne.n	80079b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d15f      	bne.n	8007a9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d110      	bne.n	8007a02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079e0:	4b30      	ldr	r3, [pc, #192]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80079e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6892      	ldr	r2, [r2, #8]
 80079f0:	0211      	lsls	r1, r2, #8
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	68d2      	ldr	r2, [r2, #12]
 80079f6:	06d2      	lsls	r2, r2, #27
 80079f8:	430a      	orrs	r2, r1
 80079fa:	492a      	ldr	r1, [pc, #168]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	610b      	str	r3, [r1, #16]
 8007a00:	e027      	b.n	8007a52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d112      	bne.n	8007a2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a08:	4b26      	ldr	r3, [pc, #152]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007a10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6892      	ldr	r2, [r2, #8]
 8007a18:	0211      	lsls	r1, r2, #8
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6912      	ldr	r2, [r2, #16]
 8007a1e:	0852      	lsrs	r2, r2, #1
 8007a20:	3a01      	subs	r2, #1
 8007a22:	0552      	lsls	r2, r2, #21
 8007a24:	430a      	orrs	r2, r1
 8007a26:	491f      	ldr	r1, [pc, #124]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	610b      	str	r3, [r1, #16]
 8007a2c:	e011      	b.n	8007a52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007a36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6892      	ldr	r2, [r2, #8]
 8007a3e:	0211      	lsls	r1, r2, #8
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6952      	ldr	r2, [r2, #20]
 8007a44:	0852      	lsrs	r2, r2, #1
 8007a46:	3a01      	subs	r2, #1
 8007a48:	0652      	lsls	r2, r2, #25
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	4915      	ldr	r1, [pc, #84]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007a52:	4b14      	ldr	r3, [pc, #80]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a13      	ldr	r2, [pc, #76]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5e:	f7fc ff75 	bl	800494c <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a64:	e009      	b.n	8007a7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a66:	f7fc ff71 	bl	800494c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d902      	bls.n	8007a7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	73fb      	strb	r3, [r7, #15]
          break;
 8007a78:	e005      	b.n	8007a86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0ef      	beq.n	8007a66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d106      	bne.n	8007a9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a8c:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	4903      	ldr	r1, [pc, #12]	@ (8007aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40021000 	.word	0x40021000

08007aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e049      	b.n	8007b4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fc fc88 	bl	80043e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f000 fa7e 	bl	8007fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d001      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e03b      	b.n	8007be8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	@ (8007bf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d009      	beq.n	8007ba6 <HAL_TIM_Base_Start_IT+0x4e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9a:	d004      	beq.n	8007ba6 <HAL_TIM_Base_Start_IT+0x4e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	@ (8007bf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d115      	bne.n	8007bd2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	4b13      	ldr	r3, [pc, #76]	@ (8007bfc <HAL_TIM_Base_Start_IT+0xa4>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b06      	cmp	r3, #6
 8007bb6:	d015      	beq.n	8007be4 <HAL_TIM_Base_Start_IT+0x8c>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bbe:	d011      	beq.n	8007be4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0201 	orr.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd0:	e008      	b.n	8007be4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0201 	orr.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e000      	b.n	8007be6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	00010007 	.word	0x00010007

08007c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d020      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0202 	mvn.w	r2, #2
 8007c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f9ad 	bl	8007faa <HAL_TIM_IC_CaptureCallback>
 8007c50:	e005      	b.n	8007c5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f99f 	bl	8007f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f9b0 	bl	8007fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d020      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01b      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0204 	mvn.w	r2, #4
 8007c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f987 	bl	8007faa <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e005      	b.n	8007caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f979 	bl	8007f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f98a 	bl	8007fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d020      	beq.n	8007cfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01b      	beq.n	8007cfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0208 	mvn.w	r2, #8
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f961 	bl	8007faa <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f953 	bl	8007f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f964 	bl	8007fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d020      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01b      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0210 	mvn.w	r2, #16
 8007d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f93b 	bl	8007faa <HAL_TIM_IC_CaptureCallback>
 8007d34:	e005      	b.n	8007d42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f92d 	bl	8007f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f93e 	bl	8007fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00c      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0201 	mvn.w	r2, #1
 8007d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fb fc02 	bl	8003570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00c      	beq.n	8007d90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa9a 	bl	80082c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00c      	beq.n	8007db4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa92 	bl	80082d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00c      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8fd 	bl	8007fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0220 	mvn.w	r2, #32
 8007df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa5a 	bl	80082b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e0b6      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x18a>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e5c:	d03e      	beq.n	8007edc <HAL_TIM_ConfigClockSource+0xd8>
 8007e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e62:	f200 8087 	bhi.w	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6a:	f000 8086 	beq.w	8007f7a <HAL_TIM_ConfigClockSource+0x176>
 8007e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e72:	d87f      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e74:	2b70      	cmp	r3, #112	@ 0x70
 8007e76:	d01a      	beq.n	8007eae <HAL_TIM_ConfigClockSource+0xaa>
 8007e78:	2b70      	cmp	r3, #112	@ 0x70
 8007e7a:	d87b      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e7c:	2b60      	cmp	r3, #96	@ 0x60
 8007e7e:	d050      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x11e>
 8007e80:	2b60      	cmp	r3, #96	@ 0x60
 8007e82:	d877      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e84:	2b50      	cmp	r3, #80	@ 0x50
 8007e86:	d03c      	beq.n	8007f02 <HAL_TIM_ConfigClockSource+0xfe>
 8007e88:	2b50      	cmp	r3, #80	@ 0x50
 8007e8a:	d873      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e8c:	2b40      	cmp	r3, #64	@ 0x40
 8007e8e:	d058      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0x13e>
 8007e90:	2b40      	cmp	r3, #64	@ 0x40
 8007e92:	d86f      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e94:	2b30      	cmp	r3, #48	@ 0x30
 8007e96:	d064      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0x15e>
 8007e98:	2b30      	cmp	r3, #48	@ 0x30
 8007e9a:	d86b      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d060      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0x15e>
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	d867      	bhi.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d05c      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0x15e>
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d05a      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0x15e>
 8007eac:	e062      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ebe:	f000 f971 	bl	80081a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	609a      	str	r2, [r3, #8]
      break;
 8007eda:	e04f      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007eec:	f000 f95a 	bl	80081a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007efe:	609a      	str	r2, [r3, #8]
      break;
 8007f00:	e03c      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f000 f8ce 	bl	80080b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2150      	movs	r1, #80	@ 0x50
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f927 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007f20:	e02c      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f000 f8ed 	bl	800810e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2160      	movs	r1, #96	@ 0x60
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f917 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007f40:	e01c      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f000 f8ae 	bl	80080b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2140      	movs	r1, #64	@ 0x40
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f907 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007f60:	e00c      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	f000 f8fe 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007f72:	e003      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	73fb      	strb	r3, [r7, #15]
      break;
 8007f78:	e000      	b.n	8007f7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80080a4 <TIM_Base_SetConfig+0xbc>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d003      	beq.n	8008008 <TIM_Base_SetConfig+0x20>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008006:	d108      	bne.n	800801a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800800e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a21      	ldr	r2, [pc, #132]	@ (80080a4 <TIM_Base_SetConfig+0xbc>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_Base_SetConfig+0x52>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008028:	d007      	beq.n	800803a <TIM_Base_SetConfig+0x52>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <TIM_Base_SetConfig+0xc0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_Base_SetConfig+0x52>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <TIM_Base_SetConfig+0xc4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d108      	bne.n	800804c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a0c      	ldr	r2, [pc, #48]	@ (80080a4 <TIM_Base_SetConfig+0xbc>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_Base_SetConfig+0xa0>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a0b      	ldr	r2, [pc, #44]	@ (80080a8 <TIM_Base_SetConfig+0xc0>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_Base_SetConfig+0xa0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a0a      	ldr	r2, [pc, #40]	@ (80080ac <TIM_Base_SetConfig+0xc4>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d103      	bne.n	8008090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	615a      	str	r2, [r3, #20]
}
 8008096:	bf00      	nop
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40014000 	.word	0x40014000
 80080ac:	40014400 	.word	0x40014400

080080b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0201 	bic.w	r2, r3, #1
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f023 030a 	bic.w	r3, r3, #10
 80080ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800810e:	b480      	push	{r7}
 8008110:	b087      	sub	sp, #28
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	f023 0210 	bic.w	r2, r3, #16
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	031b      	lsls	r3, r3, #12
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800814a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	621a      	str	r2, [r3, #32]
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800816e:	b480      	push	{r7}
 8008170:	b085      	sub	sp, #20
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	f043 0307 	orr.w	r3, r3, #7
 8008190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	609a      	str	r2, [r3, #8]
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	021a      	lsls	r2, r3, #8
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	609a      	str	r2, [r3, #8]
}
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e04f      	b.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a21      	ldr	r2, [pc, #132]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d108      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800822c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a14      	ldr	r2, [pc, #80]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d009      	beq.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008264:	d004      	beq.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a10      	ldr	r2, [pc, #64]	@ (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10c      	bne.n	800828a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	4313      	orrs	r3, r2
 8008280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	40012c00 	.word	0x40012c00
 80082ac:	40014000 	.word	0x40014000

080082b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e040      	b.n	8008380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fc f88c 	bl	800442c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2224      	movs	r2, #36	@ 0x24
 8008318:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fe5e 	bl	8008ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc01 	bl	8008b40 <UART_SetConfig>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e01b      	b.n	8008380 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fedd 	bl	8009138 <UART_CheckIdleState>
 800837e:	4603      	mov	r3, r0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800839a:	2b20      	cmp	r3, #32
 800839c:	d165      	bne.n	800846a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <HAL_UART_Transmit_DMA+0x22>
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e05e      	b.n	800846c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	88fa      	ldrh	r2, [r7, #6]
 80083b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2221      	movs	r2, #33	@ 0x21
 80083d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d027      	beq.n	800842a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083de:	4a25      	ldr	r2, [pc, #148]	@ (8008474 <HAL_UART_Transmit_DMA+0xec>)
 80083e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e6:	4a24      	ldr	r2, [pc, #144]	@ (8008478 <HAL_UART_Transmit_DMA+0xf0>)
 80083e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ee:	4a23      	ldr	r2, [pc, #140]	@ (800847c <HAL_UART_Transmit_DMA+0xf4>)
 80083f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f6:	2200      	movs	r2, #0
 80083f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008402:	4619      	mov	r1, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3328      	adds	r3, #40	@ 0x28
 800840a:	461a      	mov	r2, r3
 800840c:	88fb      	ldrh	r3, [r7, #6]
 800840e:	f7fd fe23 	bl	8006058 <HAL_DMA_Start_IT>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2210      	movs	r2, #16
 800841c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e020      	b.n	800846c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2240      	movs	r2, #64	@ 0x40
 8008430:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	613b      	str	r3, [r7, #16]
   return(result);
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008452:	623a      	str	r2, [r7, #32]
 8008454:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	69f9      	ldr	r1, [r7, #28]
 8008458:	6a3a      	ldr	r2, [r7, #32]
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e5      	bne.n	8008432 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	e000      	b.n	800846c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800846a:	2302      	movs	r3, #2
  }
}
 800846c:	4618      	mov	r0, r3
 800846e:	3728      	adds	r7, #40	@ 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	080095ad 	.word	0x080095ad
 8008478:	08009647 	.word	0x08009647
 800847c:	080097cd 	.word	0x080097cd

08008480 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	@ 0x28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	4613      	mov	r3, r2
 800848c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008494:	2b20      	cmp	r3, #32
 8008496:	d137      	bne.n	8008508 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <HAL_UART_Receive_DMA+0x24>
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e030      	b.n	800850a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a18      	ldr	r2, [pc, #96]	@ (8008514 <HAL_UART_Receive_DMA+0x94>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d01f      	beq.n	80084f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d018      	beq.n	80084f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	613b      	str	r3, [r7, #16]
   return(result);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	623b      	str	r3, [r7, #32]
 80084e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	69f9      	ldr	r1, [r7, #28]
 80084ea:	6a3a      	ldr	r2, [r7, #32]
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e6      	bne.n	80084c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 ff2a 	bl	8009358 <UART_Start_Receive_DMA>
 8008504:	4603      	mov	r3, r0
 8008506:	e000      	b.n	800850a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008508:	2302      	movs	r3, #2
  }
}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	@ 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40008000 	.word	0x40008000

08008518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b0ba      	sub	sp, #232	@ 0xe8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800853e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008542:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008546:	4013      	ands	r3, r2
 8008548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800854c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d115      	bne.n	8008580 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00f      	beq.n	8008580 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 82ae 	beq.w	8008ad2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
      }
      return;
 800857e:	e2a8      	b.n	8008ad2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8117 	beq.w	80087b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800858a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800859a:	4b85      	ldr	r3, [pc, #532]	@ (80087b0 <HAL_UART_IRQHandler+0x298>)
 800859c:	4013      	ands	r3, r2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 810a 	beq.w	80087b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_UART_IRQHandler+0xbc>
 80085b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d011      	beq.n	8008604 <HAL_UART_IRQHandler+0xec>
 80085e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2202      	movs	r2, #2
 80085f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085fa:	f043 0204 	orr.w	r2, r3, #4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d011      	beq.n	8008634 <HAL_UART_IRQHandler+0x11c>
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2204      	movs	r2, #4
 8008622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800862a:	f043 0202 	orr.w	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b00      	cmp	r3, #0
 800863e:	d017      	beq.n	8008670 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800864c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008650:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2208      	movs	r2, #8
 800865e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008666:	f043 0208 	orr.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008678:	2b00      	cmp	r3, #0
 800867a:	d012      	beq.n	80086a2 <HAL_UART_IRQHandler+0x18a>
 800867c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008680:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8214 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ea:	2b40      	cmp	r3, #64	@ 0x40
 80086ec:	d005      	beq.n	80086fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d04f      	beq.n	800879a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fef2 	bl	80094e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870a:	2b40      	cmp	r3, #64	@ 0x40
 800870c:	d141      	bne.n	8008792 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800872c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800873a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800873e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1d9      	bne.n	800870e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875e:	2b00      	cmp	r3, #0
 8008760:	d013      	beq.n	800878a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008766:	4a13      	ldr	r2, [pc, #76]	@ (80087b4 <HAL_UART_IRQHandler+0x29c>)
 8008768:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876e:	4618      	mov	r0, r3
 8008770:	f7fd fd10 	bl	8006194 <HAL_DMA_Abort_IT>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d017      	beq.n	80087aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800877e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008788:	e00f      	b.n	80087aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9c2 	bl	8008b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	e00b      	b.n	80087aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9be 	bl	8008b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	e007      	b.n	80087aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f9ba 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80087a8:	e195      	b.n	8008ad6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	bf00      	nop
    return;
 80087ac:	e193      	b.n	8008ad6 <HAL_UART_IRQHandler+0x5be>
 80087ae:	bf00      	nop
 80087b0:	04000120 	.word	0x04000120
 80087b4:	0800984b 	.word	0x0800984b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087bc:	2b01      	cmp	r3, #1
 80087be:	f040 814e 	bne.w	8008a5e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c6:	f003 0310 	and.w	r3, r3, #16
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 8147 	beq.w	8008a5e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8140 	beq.w	8008a5e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2210      	movs	r2, #16
 80087e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f0:	2b40      	cmp	r3, #64	@ 0x40
 80087f2:	f040 80b8 	bne.w	8008966 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008802:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8167 	beq.w	8008ada <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008816:	429a      	cmp	r2, r3
 8008818:	f080 815f 	bcs.w	8008ada <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008822:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 8086 	bne.w	8008944 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800884c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008866:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800886e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800887a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1da      	bne.n	8008838 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3308      	adds	r3, #8
 8008888:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008892:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008894:	f023 0301 	bic.w	r3, r3, #1
 8008898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3308      	adds	r3, #8
 80088a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e1      	bne.n	8008882 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e3      	bne.n	80088be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008914:	f023 0310 	bic.w	r3, r3, #16
 8008918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008926:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008928:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800892c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e4      	bne.n	8008904 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd fbea 	bl	8006118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008956:	b29b      	uxth	r3, r3
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	b29b      	uxth	r3, r3
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8e2 	bl	8008b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008964:	e0b9      	b.n	8008ada <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008972:	b29b      	uxth	r3, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80ab 	beq.w	8008ade <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80a6 	beq.w	8008ade <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e4      	bne.n	8008992 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	623b      	str	r3, [r7, #32]
   return(result);
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e3      	bne.n	80089c8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f023 0310 	bic.w	r3, r3, #16
 8008a28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	617b      	str	r3, [r7, #20]
   return(result);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e4      	bne.n	8008a14 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f866 	bl	8008b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a5c:	e03f      	b.n	8008ade <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00e      	beq.n	8008a88 <HAL_UART_IRQHandler+0x570>
 8008a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 ff22 	bl	80098ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a86:	e02d      	b.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00e      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01c      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	4798      	blx	r3
    }
    return;
 8008ab0:	e017      	b.n	8008ae2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d012      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
 8008abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00c      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fed3 	bl	8009876 <UART_EndTransmit_IT>
    return;
 8008ad0:	e008      	b.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008ad2:	bf00      	nop
 8008ad4:	e006      	b.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008ad6:	bf00      	nop
 8008ad8:	e004      	b.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008ada:	bf00      	nop
 8008adc:	e002      	b.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008ade:	bf00      	nop
 8008ae0:	e000      	b.n	8008ae4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008ae2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008ae4:	37e8      	adds	r7, #232	@ 0xe8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop

08008aec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b44:	b08a      	sub	sp, #40	@ 0x28
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8008de8 <UART_SetConfig+0x2a8>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a93      	ldr	r2, [pc, #588]	@ (8008dec <UART_SetConfig+0x2ac>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d004      	beq.n	8008bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a8a      	ldr	r2, [pc, #552]	@ (8008df0 <UART_SetConfig+0x2b0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d126      	bne.n	8008c18 <UART_SetConfig+0xd8>
 8008bca:	4b8a      	ldr	r3, [pc, #552]	@ (8008df4 <UART_SetConfig+0x2b4>)
 8008bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d81b      	bhi.n	8008c10 <UART_SetConfig+0xd0>
 8008bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <UART_SetConfig+0xa0>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008c01 	.word	0x08008c01
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bf6:	e0ab      	b.n	8008d50 <UART_SetConfig+0x210>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bfe:	e0a7      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c00:	2304      	movs	r3, #4
 8008c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c06:	e0a3      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c08:	2308      	movs	r3, #8
 8008c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c0e:	e09f      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c10:	2310      	movs	r3, #16
 8008c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c16:	e09b      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a76      	ldr	r2, [pc, #472]	@ (8008df8 <UART_SetConfig+0x2b8>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d138      	bne.n	8008c94 <UART_SetConfig+0x154>
 8008c22:	4b74      	ldr	r3, [pc, #464]	@ (8008df4 <UART_SetConfig+0x2b4>)
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c28:	f003 030c 	and.w	r3, r3, #12
 8008c2c:	2b0c      	cmp	r3, #12
 8008c2e:	d82d      	bhi.n	8008c8c <UART_SetConfig+0x14c>
 8008c30:	a201      	add	r2, pc, #4	@ (adr r2, 8008c38 <UART_SetConfig+0xf8>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c6d 	.word	0x08008c6d
 8008c3c:	08008c8d 	.word	0x08008c8d
 8008c40:	08008c8d 	.word	0x08008c8d
 8008c44:	08008c8d 	.word	0x08008c8d
 8008c48:	08008c7d 	.word	0x08008c7d
 8008c4c:	08008c8d 	.word	0x08008c8d
 8008c50:	08008c8d 	.word	0x08008c8d
 8008c54:	08008c8d 	.word	0x08008c8d
 8008c58:	08008c75 	.word	0x08008c75
 8008c5c:	08008c8d 	.word	0x08008c8d
 8008c60:	08008c8d 	.word	0x08008c8d
 8008c64:	08008c8d 	.word	0x08008c8d
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c72:	e06d      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c74:	2302      	movs	r3, #2
 8008c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c7a:	e069      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c82:	e065      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c84:	2308      	movs	r3, #8
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8a:	e061      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c92:	e05d      	b.n	8008d50 <UART_SetConfig+0x210>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a58      	ldr	r2, [pc, #352]	@ (8008dfc <UART_SetConfig+0x2bc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d125      	bne.n	8008cea <UART_SetConfig+0x1aa>
 8008c9e:	4b55      	ldr	r3, [pc, #340]	@ (8008df4 <UART_SetConfig+0x2b4>)
 8008ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ca8:	2b30      	cmp	r3, #48	@ 0x30
 8008caa:	d016      	beq.n	8008cda <UART_SetConfig+0x19a>
 8008cac:	2b30      	cmp	r3, #48	@ 0x30
 8008cae:	d818      	bhi.n	8008ce2 <UART_SetConfig+0x1a2>
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d00a      	beq.n	8008cca <UART_SetConfig+0x18a>
 8008cb4:	2b20      	cmp	r3, #32
 8008cb6:	d814      	bhi.n	8008ce2 <UART_SetConfig+0x1a2>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <UART_SetConfig+0x182>
 8008cbc:	2b10      	cmp	r3, #16
 8008cbe:	d008      	beq.n	8008cd2 <UART_SetConfig+0x192>
 8008cc0:	e00f      	b.n	8008ce2 <UART_SetConfig+0x1a2>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cc8:	e042      	b.n	8008d50 <UART_SetConfig+0x210>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cd0:	e03e      	b.n	8008d50 <UART_SetConfig+0x210>
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cd8:	e03a      	b.n	8008d50 <UART_SetConfig+0x210>
 8008cda:	2308      	movs	r3, #8
 8008cdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce0:	e036      	b.n	8008d50 <UART_SetConfig+0x210>
 8008ce2:	2310      	movs	r3, #16
 8008ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce8:	e032      	b.n	8008d50 <UART_SetConfig+0x210>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a3f      	ldr	r2, [pc, #252]	@ (8008dec <UART_SetConfig+0x2ac>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d12a      	bne.n	8008d4a <UART_SetConfig+0x20a>
 8008cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8008df4 <UART_SetConfig+0x2b4>)
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008cfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d02:	d01a      	beq.n	8008d3a <UART_SetConfig+0x1fa>
 8008d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d08:	d81b      	bhi.n	8008d42 <UART_SetConfig+0x202>
 8008d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d0e:	d00c      	beq.n	8008d2a <UART_SetConfig+0x1ea>
 8008d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d14:	d815      	bhi.n	8008d42 <UART_SetConfig+0x202>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <UART_SetConfig+0x1e2>
 8008d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d1e:	d008      	beq.n	8008d32 <UART_SetConfig+0x1f2>
 8008d20:	e00f      	b.n	8008d42 <UART_SetConfig+0x202>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d28:	e012      	b.n	8008d50 <UART_SetConfig+0x210>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d30:	e00e      	b.n	8008d50 <UART_SetConfig+0x210>
 8008d32:	2304      	movs	r3, #4
 8008d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d38:	e00a      	b.n	8008d50 <UART_SetConfig+0x210>
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d40:	e006      	b.n	8008d50 <UART_SetConfig+0x210>
 8008d42:	2310      	movs	r3, #16
 8008d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d48:	e002      	b.n	8008d50 <UART_SetConfig+0x210>
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a25      	ldr	r2, [pc, #148]	@ (8008dec <UART_SetConfig+0x2ac>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	f040 808a 	bne.w	8008e70 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d824      	bhi.n	8008dae <UART_SetConfig+0x26e>
 8008d64:	a201      	add	r2, pc, #4	@ (adr r2, 8008d6c <UART_SetConfig+0x22c>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d91 	.word	0x08008d91
 8008d70:	08008daf 	.word	0x08008daf
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008daf 	.word	0x08008daf
 8008d7c:	08008d9f 	.word	0x08008d9f
 8008d80:	08008daf 	.word	0x08008daf
 8008d84:	08008daf 	.word	0x08008daf
 8008d88:	08008daf 	.word	0x08008daf
 8008d8c:	08008da7 	.word	0x08008da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d90:	f7fe fac2 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8008d94:	61f8      	str	r0, [r7, #28]
        break;
 8008d96:	e010      	b.n	8008dba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d98:	4b19      	ldr	r3, [pc, #100]	@ (8008e00 <UART_SetConfig+0x2c0>)
 8008d9a:	61fb      	str	r3, [r7, #28]
        break;
 8008d9c:	e00d      	b.n	8008dba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d9e:	f7fe fa23 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 8008da2:	61f8      	str	r0, [r7, #28]
        break;
 8008da4:	e009      	b.n	8008dba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008daa:	61fb      	str	r3, [r7, #28]
        break;
 8008dac:	e005      	b.n	8008dba <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8109 	beq.w	8008fd4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	4413      	add	r3, r2
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d305      	bcc.n	8008dde <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d912      	bls.n	8008e04 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008de4:	e0f6      	b.n	8008fd4 <UART_SetConfig+0x494>
 8008de6:	bf00      	nop
 8008de8:	efff69f3 	.word	0xefff69f3
 8008dec:	40008000 	.word	0x40008000
 8008df0:	40013800 	.word	0x40013800
 8008df4:	40021000 	.word	0x40021000
 8008df8:	40004400 	.word	0x40004400
 8008dfc:	40004800 	.word	0x40004800
 8008e00:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2200      	movs	r2, #0
 8008e08:	461c      	mov	r4, r3
 8008e0a:	4615      	mov	r5, r2
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	022b      	lsls	r3, r5, #8
 8008e16:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e1a:	0222      	lsls	r2, r4, #8
 8008e1c:	68f9      	ldr	r1, [r7, #12]
 8008e1e:	6849      	ldr	r1, [r1, #4]
 8008e20:	0849      	lsrs	r1, r1, #1
 8008e22:	2000      	movs	r0, #0
 8008e24:	4688      	mov	r8, r1
 8008e26:	4681      	mov	r9, r0
 8008e28:	eb12 0a08 	adds.w	sl, r2, r8
 8008e2c:	eb43 0b09 	adc.w	fp, r3, r9
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	607a      	str	r2, [r7, #4]
 8008e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3e:	4650      	mov	r0, sl
 8008e40:	4659      	mov	r1, fp
 8008e42:	f7f7 fed1 	bl	8000be8 <__aeabi_uldivmod>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e54:	d308      	bcc.n	8008e68 <UART_SetConfig+0x328>
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e5c:	d204      	bcs.n	8008e68 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	60da      	str	r2, [r3, #12]
 8008e66:	e0b5      	b.n	8008fd4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e6e:	e0b1      	b.n	8008fd4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e78:	d15d      	bne.n	8008f36 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8008e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e7e:	2b08      	cmp	r3, #8
 8008e80:	d827      	bhi.n	8008ed2 <UART_SetConfig+0x392>
 8008e82:	a201      	add	r2, pc, #4	@ (adr r2, 8008e88 <UART_SetConfig+0x348>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ed3 	.word	0x08008ed3
 8008e98:	08008ec3 	.word	0x08008ec3
 8008e9c:	08008ed3 	.word	0x08008ed3
 8008ea0:	08008ed3 	.word	0x08008ed3
 8008ea4:	08008ed3 	.word	0x08008ed3
 8008ea8:	08008ecb 	.word	0x08008ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eac:	f7fe fa34 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8008eb0:	61f8      	str	r0, [r7, #28]
        break;
 8008eb2:	e014      	b.n	8008ede <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eb4:	f7fe fa46 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8008eb8:	61f8      	str	r0, [r7, #28]
        break;
 8008eba:	e010      	b.n	8008ede <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8008ff0 <UART_SetConfig+0x4b0>)
 8008ebe:	61fb      	str	r3, [r7, #28]
        break;
 8008ec0:	e00d      	b.n	8008ede <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ec2:	f7fe f991 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 8008ec6:	61f8      	str	r0, [r7, #28]
        break;
 8008ec8:	e009      	b.n	8008ede <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ece:	61fb      	str	r3, [r7, #28]
        break;
 8008ed0:	e005      	b.n	8008ede <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d077      	beq.n	8008fd4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	005a      	lsls	r2, r3, #1
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	085b      	lsrs	r3, r3, #1
 8008eee:	441a      	add	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b0f      	cmp	r3, #15
 8008efe:	d916      	bls.n	8008f2e <UART_SetConfig+0x3ee>
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f06:	d212      	bcs.n	8008f2e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f023 030f 	bic.w	r3, r3, #15
 8008f10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	085b      	lsrs	r3, r3, #1
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	8afb      	ldrh	r3, [r7, #22]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	8afa      	ldrh	r2, [r7, #22]
 8008f2a:	60da      	str	r2, [r3, #12]
 8008f2c:	e052      	b.n	8008fd4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f34:	e04e      	b.n	8008fd4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	d827      	bhi.n	8008f8e <UART_SetConfig+0x44e>
 8008f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f44 <UART_SetConfig+0x404>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008f69 	.word	0x08008f69
 8008f48:	08008f71 	.word	0x08008f71
 8008f4c:	08008f79 	.word	0x08008f79
 8008f50:	08008f8f 	.word	0x08008f8f
 8008f54:	08008f7f 	.word	0x08008f7f
 8008f58:	08008f8f 	.word	0x08008f8f
 8008f5c:	08008f8f 	.word	0x08008f8f
 8008f60:	08008f8f 	.word	0x08008f8f
 8008f64:	08008f87 	.word	0x08008f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f68:	f7fe f9d6 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8008f6c:	61f8      	str	r0, [r7, #28]
        break;
 8008f6e:	e014      	b.n	8008f9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f70:	f7fe f9e8 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8008f74:	61f8      	str	r0, [r7, #28]
        break;
 8008f76:	e010      	b.n	8008f9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f78:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff0 <UART_SetConfig+0x4b0>)
 8008f7a:	61fb      	str	r3, [r7, #28]
        break;
 8008f7c:	e00d      	b.n	8008f9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f7e:	f7fe f933 	bl	80071e8 <HAL_RCC_GetSysClockFreq>
 8008f82:	61f8      	str	r0, [r7, #28]
        break;
 8008f84:	e009      	b.n	8008f9a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f8a:	61fb      	str	r3, [r7, #28]
        break;
 8008f8c:	e005      	b.n	8008f9a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f98:	bf00      	nop
    }

    if (pclk != 0U)
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d019      	beq.n	8008fd4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	085a      	lsrs	r2, r3, #1
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	441a      	add	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d909      	bls.n	8008fce <UART_SetConfig+0x48e>
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc0:	d205      	bcs.n	8008fce <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60da      	str	r2, [r3, #12]
 8008fcc:	e002      	b.n	8008fd4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008fe0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3728      	adds	r7, #40	@ 0x28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fee:	bf00      	nop
 8008ff0:	00f42400 	.word	0x00f42400

08008ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01a      	beq.n	800910a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090f2:	d10a      	bne.n	800910a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	605a      	str	r2, [r3, #4]
  }
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b098      	sub	sp, #96	@ 0x60
 800913c:	af02      	add	r7, sp, #8
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009148:	f7fb fc00 	bl	800494c <HAL_GetTick>
 800914c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b08      	cmp	r3, #8
 800915a:	d12e      	bne.n	80091ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800915c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009164:	2200      	movs	r2, #0
 8009166:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f88c 	bl	8009288 <UART_WaitOnFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d021      	beq.n	80091ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800918a:	653b      	str	r3, [r7, #80]	@ 0x50
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009194:	647b      	str	r3, [r7, #68]	@ 0x44
 8009196:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800919a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e6      	bne.n	8009176 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e062      	b.n	8009280 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d149      	bne.n	800925c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091d0:	2200      	movs	r2, #0
 80091d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f856 	bl	8009288 <UART_WaitOnFlagUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d03c      	beq.n	800925c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	623b      	str	r3, [r7, #32]
   return(result);
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009200:	633b      	str	r3, [r7, #48]	@ 0x30
 8009202:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e6      	bne.n	80091e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	60fb      	str	r3, [r7, #12]
   return(result);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0301 	bic.w	r3, r3, #1
 800922a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3308      	adds	r3, #8
 8009232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009234:	61fa      	str	r2, [r7, #28]
 8009236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	69b9      	ldr	r1, [r7, #24]
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	617b      	str	r3, [r7, #20]
   return(result);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e5      	bne.n	8009214 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e011      	b.n	8009280 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3758      	adds	r7, #88	@ 0x58
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	4613      	mov	r3, r2
 8009296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009298:	e049      	b.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092a0:	d045      	beq.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092a2:	f7fb fb53 	bl	800494c <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d302      	bcc.n	80092b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e048      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d031      	beq.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	f003 0308 	and.w	r3, r3, #8
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d110      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2208      	movs	r2, #8
 80092de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f8ff 	bl	80094e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2208      	movs	r2, #8
 80092ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e029      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009308:	d111      	bne.n	800932e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f8e5 	bl	80094e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e00f      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4013      	ands	r3, r2
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	bf0c      	ite	eq
 800933e:	2301      	moveq	r3, #1
 8009340:	2300      	movne	r3, #0
 8009342:	b2db      	uxtb	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	429a      	cmp	r2, r3
 800934a:	d0a6      	beq.n	800929a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b096      	sub	sp, #88	@ 0x58
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	88fa      	ldrh	r2, [r7, #6]
 8009370:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2222      	movs	r2, #34	@ 0x22
 8009380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009388:	2b00      	cmp	r3, #0
 800938a:	d028      	beq.n	80093de <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009390:	4a3e      	ldr	r2, [pc, #248]	@ (800948c <UART_Start_Receive_DMA+0x134>)
 8009392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009398:	4a3d      	ldr	r2, [pc, #244]	@ (8009490 <UART_Start_Receive_DMA+0x138>)
 800939a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009494 <UART_Start_Receive_DMA+0x13c>)
 80093a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a8:	2200      	movs	r2, #0
 80093aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3324      	adds	r3, #36	@ 0x24
 80093b6:	4619      	mov	r1, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093bc:	461a      	mov	r2, r3
 80093be:	88fb      	ldrh	r3, [r7, #6]
 80093c0:	f7fc fe4a 	bl	8006058 <HAL_DMA_Start_IT>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d009      	beq.n	80093de <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2210      	movs	r2, #16
 80093ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2220      	movs	r2, #32
 80093d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e051      	b.n	8009482 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d018      	beq.n	8009418 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009406:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800940a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e6      	bne.n	80093e6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3308      	adds	r3, #8
 800941e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3308      	adds	r3, #8
 8009436:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009438:	637a      	str	r2, [r7, #52]	@ 0x34
 800943a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800943e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e5      	bne.n	8009418 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3308      	adds	r3, #8
 8009452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	613b      	str	r3, [r7, #16]
   return(result);
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800946c:	623a      	str	r2, [r7, #32]
 800946e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	69f9      	ldr	r1, [r7, #28]
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	61bb      	str	r3, [r7, #24]
   return(result);
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e5      	bne.n	800944c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3758      	adds	r7, #88	@ 0x58
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	08009663 	.word	0x08009663
 8009490:	0800978f 	.word	0x0800978f
 8009494:	080097cd 	.word	0x080097cd

08009498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b089      	sub	sp, #36	@ 0x24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	61bb      	str	r3, [r7, #24]
 80094c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6979      	ldr	r1, [r7, #20]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	613b      	str	r3, [r7, #16]
   return(result);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e6      	bne.n	80094a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80094d8:	bf00      	nop
 80094da:	3724      	adds	r7, #36	@ 0x24
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b095      	sub	sp, #84	@ 0x54
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950a:	643b      	str	r3, [r7, #64]	@ 0x40
 800950c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e6      	bne.n	80094ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	61fb      	str	r3, [r7, #28]
   return(result);
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800953e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009540:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009556:	2b01      	cmp	r3, #1
 8009558:	d118      	bne.n	800958c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	60bb      	str	r3, [r7, #8]
   return(result);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f023 0310 	bic.w	r3, r3, #16
 800956e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6979      	ldr	r1, [r7, #20]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	613b      	str	r3, [r7, #16]
   return(result);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e6      	bne.n	800955a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80095a0:	bf00      	nop
 80095a2:	3754      	adds	r7, #84	@ 0x54
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b090      	sub	sp, #64	@ 0x40
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d137      	bne.n	8009638 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80095c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	623b      	str	r3, [r7, #32]
   return(result);
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e5      	bne.n	80095d0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	60fb      	str	r3, [r7, #12]
   return(result);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
 800961a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	69b9      	ldr	r1, [r7, #24]
 8009628:	69fa      	ldr	r2, [r7, #28]
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	617b      	str	r3, [r7, #20]
   return(result);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009636:	e002      	b.n	800963e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009638:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800963a:	f7f9 fa01 	bl	8002a40 <HAL_UART_TxCpltCallback>
}
 800963e:	bf00      	nop
 8009640:	3740      	adds	r7, #64	@ 0x40
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009652:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff fa49 	bl	8008aec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b09c      	sub	sp, #112	@ 0x70
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d171      	bne.n	8009762 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800967e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009680:	2200      	movs	r2, #0
 8009682:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009696:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800969a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800969c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e6      	bne.n	8009686 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ca:	f023 0301 	bic.w	r3, r3, #1
 80096ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80096d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3308      	adds	r3, #8
 80096d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80096d8:	647a      	str	r2, [r7, #68]	@ 0x44
 80096da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e5      	bne.n	80096b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3308      	adds	r3, #8
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	e853 3f00 	ldrex	r3, [r3]
 80096fa:	623b      	str	r3, [r7, #32]
   return(result);
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009702:	663b      	str	r3, [r7, #96]	@ 0x60
 8009704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3308      	adds	r3, #8
 800970a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800970c:	633a      	str	r2, [r7, #48]	@ 0x30
 800970e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009714:	e841 2300 	strex	r3, r2, [r1]
 8009718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e5      	bne.n	80096ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009722:	2220      	movs	r2, #32
 8009724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800972a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800972c:	2b01      	cmp	r3, #1
 800972e:	d118      	bne.n	8009762 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	60fb      	str	r3, [r7, #12]
   return(result);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f023 0310 	bic.w	r3, r3, #16
 8009744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	69b9      	ldr	r1, [r7, #24]
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	617b      	str	r3, [r7, #20]
   return(result);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e6      	bne.n	8009730 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009764:	2200      	movs	r2, #0
 8009766:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800976a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800976c:	2b01      	cmp	r3, #1
 800976e:	d107      	bne.n	8009780 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009772:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009776:	4619      	mov	r1, r3
 8009778:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800977a:	f7ff f9d5 	bl	8008b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800977e:	e002      	b.n	8009786 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009780:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009782:	f7f9 f96f 	bl	8002a64 <HAL_UART_RxCpltCallback>
}
 8009786:	bf00      	nop
 8009788:	3770      	adds	r7, #112	@ 0x70
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d109      	bne.n	80097be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80097b0:	085b      	lsrs	r3, r3, #1
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f7ff f9b6 	bl	8008b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097bc:	e002      	b.n	80097c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f7ff f99e 	bl	8008b00 <HAL_UART_RxHalfCpltCallback>
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f2:	2b80      	cmp	r3, #128	@ 0x80
 80097f4:	d109      	bne.n	800980a <UART_DMAError+0x3e>
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b21      	cmp	r3, #33	@ 0x21
 80097fa:	d106      	bne.n	800980a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2200      	movs	r2, #0
 8009800:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009804:	6978      	ldr	r0, [r7, #20]
 8009806:	f7ff fe47 	bl	8009498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009814:	2b40      	cmp	r3, #64	@ 0x40
 8009816:	d109      	bne.n	800982c <UART_DMAError+0x60>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b22      	cmp	r3, #34	@ 0x22
 800981c:	d106      	bne.n	800982c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2200      	movs	r2, #0
 8009822:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009826:	6978      	ldr	r0, [r7, #20]
 8009828:	f7ff fe5c 	bl	80094e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009832:	f043 0210 	orr.w	r2, r3, #16
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800983c:	6978      	ldr	r0, [r7, #20]
 800983e:	f7ff f969 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009842:	bf00      	nop
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff f953 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b088      	sub	sp, #32
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	60bb      	str	r3, [r7, #8]
   return(result);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6979      	ldr	r1, [r7, #20]
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	613b      	str	r3, [r7, #16]
   return(result);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e6      	bne.n	800987e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2220      	movs	r2, #32
 80098b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7f9 f8bf 	bl	8002a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098c2:	bf00      	nop
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <arm_cfft_radix8by2_f32>:
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	ed2d 8b08 	vpush	{d8-d11}
 80098e8:	4607      	mov	r7, r0
 80098ea:	4608      	mov	r0, r1
 80098ec:	f8b7 c000 	ldrh.w	ip, [r7]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80098f6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80098fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80098fe:	f000 80b0 	beq.w	8009a62 <arm_cfft_radix8by2_f32+0x182>
 8009902:	008c      	lsls	r4, r1, #2
 8009904:	3410      	adds	r4, #16
 8009906:	f100 0310 	add.w	r3, r0, #16
 800990a:	1906      	adds	r6, r0, r4
 800990c:	3210      	adds	r2, #16
 800990e:	4444      	add	r4, r8
 8009910:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009914:	f108 0510 	add.w	r5, r8, #16
 8009918:	ed15 2a04 	vldr	s4, [r5, #-16]
 800991c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009920:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009924:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009928:	ed14 6a02 	vldr	s12, [r4, #-8]
 800992c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009930:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009934:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009938:	ed55 0a01 	vldr	s1, [r5, #-4]
 800993c:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009940:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009944:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009948:	ed13 5a02 	vldr	s10, [r3, #-8]
 800994c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009950:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009954:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009958:	ee73 ba82 	vadd.f32	s23, s7, s4
 800995c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009960:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009964:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009968:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800996c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009970:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009974:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009978:	ed43 ba04 	vstr	s23, [r3, #-16]
 800997c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009980:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009984:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009988:	ed06 8a01 	vstr	s16, [r6, #-4]
 800998c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009990:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009994:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009998:	ee37 7a62 	vsub.f32	s14, s14, s5
 800999c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80099a0:	ee34 4a43 	vsub.f32	s8, s8, s6
 80099a4:	ed52 6a03 	vldr	s13, [r2, #-12]
 80099a8:	ed12 3a04 	vldr	s6, [r2, #-16]
 80099ac:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80099b0:	ee27 8a26 	vmul.f32	s16, s14, s13
 80099b4:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80099b8:	ee23 2a83 	vmul.f32	s4, s7, s6
 80099bc:	ee64 4a83 	vmul.f32	s9, s9, s6
 80099c0:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80099c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80099c8:	ee64 6a26 	vmul.f32	s13, s8, s13
 80099cc:	ee24 4a03 	vmul.f32	s8, s8, s6
 80099d0:	ee37 7a63 	vsub.f32	s14, s14, s7
 80099d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80099d8:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80099dc:	ee32 3a08 	vadd.f32	s6, s4, s16
 80099e0:	ed05 7a03 	vstr	s14, [r5, #-12]
 80099e4:	ed05 3a04 	vstr	s6, [r5, #-16]
 80099e8:	ed04 4a04 	vstr	s8, [r4, #-16]
 80099ec:	ed44 6a03 	vstr	s13, [r4, #-12]
 80099f0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80099f4:	ee76 6a41 	vsub.f32	s13, s12, s2
 80099f8:	ee35 5a40 	vsub.f32	s10, s10, s0
 80099fc:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009a00:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009a04:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009a08:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009a0c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009a10:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009a14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009a18:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009a1c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009a20:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009a24:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009a28:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009a2c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009a30:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009a34:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009a38:	3310      	adds	r3, #16
 8009a3a:	4563      	cmp	r3, ip
 8009a3c:	ed45 5a02 	vstr	s11, [r5, #-8]
 8009a40:	f106 0610 	add.w	r6, r6, #16
 8009a44:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009a48:	f102 0210 	add.w	r2, r2, #16
 8009a4c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009a50:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009a54:	f105 0510 	add.w	r5, r5, #16
 8009a58:	f104 0410 	add.w	r4, r4, #16
 8009a5c:	f47f af5c 	bne.w	8009918 <arm_cfft_radix8by2_f32+0x38>
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	b28c      	uxth	r4, r1
 8009a64:	4621      	mov	r1, r4
 8009a66:	2302      	movs	r3, #2
 8009a68:	f000 fc1c 	bl	800a2a4 <arm_radix8_butterfly_f32>
 8009a6c:	ecbd 8b08 	vpop	{d8-d11}
 8009a70:	4621      	mov	r1, r4
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	4640      	mov	r0, r8
 8009a76:	2302      	movs	r3, #2
 8009a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	f000 bc12 	b.w	800a2a4 <arm_radix8_butterfly_f32>

08009a80 <arm_cfft_radix8by4_f32>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	ed2d 8b0a 	vpush	{d8-d12}
 8009a88:	b08d      	sub	sp, #52	@ 0x34
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a8e:	8801      	ldrh	r1, [r0, #0]
 8009a90:	6842      	ldr	r2, [r0, #4]
 8009a92:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a94:	0849      	lsrs	r1, r1, #1
 8009a96:	008b      	lsls	r3, r1, #2
 8009a98:	18ee      	adds	r6, r5, r3
 8009a9a:	18f0      	adds	r0, r6, r3
 8009a9c:	edd0 5a00 	vldr	s11, [r0]
 8009aa0:	edd5 7a00 	vldr	s15, [r5]
 8009aa4:	ed96 7a00 	vldr	s14, [r6]
 8009aa8:	edd0 3a01 	vldr	s7, [r0, #4]
 8009aac:	ed96 4a01 	vldr	s8, [r6, #4]
 8009ab0:	ed95 5a01 	vldr	s10, [r5, #4]
 8009ab4:	9008      	str	r0, [sp, #32]
 8009ab6:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8009aba:	18c7      	adds	r7, r0, r3
 8009abc:	edd7 4a00 	vldr	s9, [r7]
 8009ac0:	ed97 3a01 	vldr	s6, [r7, #4]
 8009ac4:	9701      	str	r7, [sp, #4]
 8009ac6:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009aca:	462c      	mov	r4, r5
 8009acc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009ad0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009ad4:	ee16 ca90 	vmov	ip, s13
 8009ad8:	f844 cb08 	str.w	ip, [r4], #8
 8009adc:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009ae0:	edd6 5a01 	vldr	s11, [r6, #4]
 8009ae4:	edd7 2a01 	vldr	s5, [r7, #4]
 8009ae8:	9404      	str	r4, [sp, #16]
 8009aea:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009aee:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009af2:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009af6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009afa:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009afe:	0849      	lsrs	r1, r1, #1
 8009b00:	f102 0e08 	add.w	lr, r2, #8
 8009b04:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009b08:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009b0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b0e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009b12:	f1a1 0902 	sub.w	r9, r1, #2
 8009b16:	f8cd e00c 	str.w	lr, [sp, #12]
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	ee13 ea90 	vmov	lr, s7
 8009b20:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009b24:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8009b28:	4604      	mov	r4, r0
 8009b2a:	edc5 5a01 	vstr	s11, [r5, #4]
 8009b2e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009b32:	f841 eb08 	str.w	lr, [r1], #8
 8009b36:	ee34 5a24 	vadd.f32	s10, s8, s9
 8009b3a:	ee16 ea10 	vmov	lr, s12
 8009b3e:	ed86 5a01 	vstr	s10, [r6, #4]
 8009b42:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009b46:	f844 eb08 	str.w	lr, [r4], #8
 8009b4a:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009b4e:	edc0 6a01 	vstr	s13, [r0, #4]
 8009b52:	9405      	str	r4, [sp, #20]
 8009b54:	4604      	mov	r4, r0
 8009b56:	ee17 0a90 	vmov	r0, s15
 8009b5a:	9106      	str	r1, [sp, #24]
 8009b5c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009b60:	f102 0110 	add.w	r1, r2, #16
 8009b64:	46bc      	mov	ip, r7
 8009b66:	9100      	str	r1, [sp, #0]
 8009b68:	f847 0b08 	str.w	r0, [r7], #8
 8009b6c:	f102 0118 	add.w	r1, r2, #24
 8009b70:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009b74:	9102      	str	r1, [sp, #8]
 8009b76:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009b7a:	9007      	str	r0, [sp, #28]
 8009b7c:	f000 8134 	beq.w	8009de8 <arm_cfft_radix8by4_f32+0x368>
 8009b80:	f102 0920 	add.w	r9, r2, #32
 8009b84:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8009b88:	9a01      	ldr	r2, [sp, #4]
 8009b8a:	f8dd a000 	ldr.w	sl, [sp]
 8009b8e:	3b0c      	subs	r3, #12
 8009b90:	4683      	mov	fp, r0
 8009b92:	4463      	add	r3, ip
 8009b94:	f105 0e10 	add.w	lr, r5, #16
 8009b98:	f1a4 010c 	sub.w	r1, r4, #12
 8009b9c:	f104 0510 	add.w	r5, r4, #16
 8009ba0:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009ba4:	f1a2 040c 	sub.w	r4, r2, #12
 8009ba8:	f106 0010 	add.w	r0, r6, #16
 8009bac:	3210      	adds	r2, #16
 8009bae:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009bb2:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009bb6:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009bba:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009bbe:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009bc2:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8009bc6:	ed12 1a01 	vldr	s2, [r2, #-4]
 8009bca:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009bce:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009bd2:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009bd6:	ee37 7a84 	vadd.f32	s14, s15, s8
 8009bda:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009bde:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009be2:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009be6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8009bea:	ed10 7a01 	vldr	s14, [r0, #-4]
 8009bee:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009bf2:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009bf6:	ee78 aa25 	vadd.f32	s21, s16, s11
 8009bfa:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009bfe:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009c02:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009c06:	ed94 7a02 	vldr	s14, [r4, #8]
 8009c0a:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009c0e:	ed91 ba02 	vldr	s22, [r1, #8]
 8009c12:	edd3 9a02 	vldr	s19, [r3, #8]
 8009c16:	edd4 2a01 	vldr	s5, [r4, #4]
 8009c1a:	ed9c 9a01 	vldr	s18, [ip, #4]
 8009c1e:	ed93 5a01 	vldr	s10, [r3, #4]
 8009c22:	edd1 0a01 	vldr	s1, [r1, #4]
 8009c26:	ee72 6a07 	vadd.f32	s13, s4, s14
 8009c2a:	ee32 2a47 	vsub.f32	s4, s4, s14
 8009c2e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8009c32:	ee79 4a22 	vadd.f32	s9, s18, s5
 8009c36:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8009c3a:	ee79 2a62 	vsub.f32	s5, s18, s5
 8009c3e:	ed8c 7a02 	vstr	s14, [ip, #8]
 8009c42:	ed91 7a01 	vldr	s14, [r1, #4]
 8009c46:	edd3 8a01 	vldr	s17, [r3, #4]
 8009c4a:	ee34 7a87 	vadd.f32	s14, s9, s14
 8009c4e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8009c52:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009c56:	ee32 9a60 	vsub.f32	s18, s4, s1
 8009c5a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009c5e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8009c62:	ed1a aa02 	vldr	s20, [sl, #-8]
 8009c66:	ee73 8a22 	vadd.f32	s17, s6, s5
 8009c6a:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009c6e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009c72:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009c76:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8009c7a:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009c7e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009c82:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009c86:	ee63 ca87 	vmul.f32	s25, s7, s14
 8009c8a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009c8e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009c92:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009c96:	ee73 3aea 	vsub.f32	s7, s7, s21
 8009c9a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009c9e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009ca2:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009ca6:	ee34 4a67 	vsub.f32	s8, s8, s15
 8009caa:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009cae:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009cb2:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009cb6:	ed00 7a02 	vstr	s14, [r0, #-8]
 8009cba:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009cbe:	edc1 8a01 	vstr	s17, [r1, #4]
 8009cc2:	ed81 aa02 	vstr	s20, [r1, #8]
 8009cc6:	ed59 3a04 	vldr	s7, [r9, #-16]
 8009cca:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009cce:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009cd2:	ed59 6a03 	vldr	s13, [r9, #-12]
 8009cd6:	ee34 4a61 	vsub.f32	s8, s8, s3
 8009cda:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009cde:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009ce2:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009ce6:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009cea:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009cee:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009cf2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009cf6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009cfa:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009cfe:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009d02:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009d06:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8009d0a:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009d0e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8009d12:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009d16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009d1a:	ed45 3a02 	vstr	s7, [r5, #-8]
 8009d1e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8009d22:	ed84 7a01 	vstr	s14, [r4, #4]
 8009d26:	ed84 4a02 	vstr	s8, [r4, #8]
 8009d2a:	ee35 6a81 	vadd.f32	s12, s11, s2
 8009d2e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8009d32:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8009d36:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8009d3a:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009d3e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8009d42:	ee67 2a26 	vmul.f32	s5, s14, s13
 8009d46:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009d4a:	ee26 5a25 	vmul.f32	s10, s12, s11
 8009d4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009d52:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009d56:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009d5a:	ee63 6a26 	vmul.f32	s13, s6, s13
 8009d5e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8009d62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009d66:	ee75 5a24 	vadd.f32	s11, s10, s9
 8009d6a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009d6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009d72:	f1bb 0b01 	subs.w	fp, fp, #1
 8009d76:	ed42 5a02 	vstr	s11, [r2, #-8]
 8009d7a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009d7e:	f10e 0e08 	add.w	lr, lr, #8
 8009d82:	ed83 3a02 	vstr	s6, [r3, #8]
 8009d86:	ed83 7a01 	vstr	s14, [r3, #4]
 8009d8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8009d8e:	f10a 0a08 	add.w	sl, sl, #8
 8009d92:	f100 0008 	add.w	r0, r0, #8
 8009d96:	f1a1 0108 	sub.w	r1, r1, #8
 8009d9a:	f109 0910 	add.w	r9, r9, #16
 8009d9e:	f105 0508 	add.w	r5, r5, #8
 8009da2:	f1a4 0408 	sub.w	r4, r4, #8
 8009da6:	f108 0818 	add.w	r8, r8, #24
 8009daa:	f102 0208 	add.w	r2, r2, #8
 8009dae:	f1a3 0308 	sub.w	r3, r3, #8
 8009db2:	f47f aefc 	bne.w	8009bae <arm_cfft_radix8by4_f32+0x12e>
 8009db6:	9907      	ldr	r1, [sp, #28]
 8009db8:	9800      	ldr	r0, [sp, #0]
 8009dba:	00cb      	lsls	r3, r1, #3
 8009dbc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009dc0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009dc4:	9100      	str	r1, [sp, #0]
 8009dc6:	9904      	ldr	r1, [sp, #16]
 8009dc8:	4419      	add	r1, r3
 8009dca:	9104      	str	r1, [sp, #16]
 8009dcc:	9903      	ldr	r1, [sp, #12]
 8009dce:	4419      	add	r1, r3
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	9906      	ldr	r1, [sp, #24]
 8009dd4:	4419      	add	r1, r3
 8009dd6:	9106      	str	r1, [sp, #24]
 8009dd8:	9905      	ldr	r1, [sp, #20]
 8009dda:	441f      	add	r7, r3
 8009ddc:	4419      	add	r1, r3
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	9105      	str	r1, [sp, #20]
 8009de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	9904      	ldr	r1, [sp, #16]
 8009dea:	9805      	ldr	r0, [sp, #20]
 8009dec:	ed91 4a00 	vldr	s8, [r1]
 8009df0:	edd0 6a00 	vldr	s13, [r0]
 8009df4:	9b06      	ldr	r3, [sp, #24]
 8009df6:	ed97 3a00 	vldr	s6, [r7]
 8009dfa:	edd3 7a00 	vldr	s15, [r3]
 8009dfe:	edd0 4a01 	vldr	s9, [r0, #4]
 8009e02:	edd1 3a01 	vldr	s7, [r1, #4]
 8009e06:	ed97 2a01 	vldr	s4, [r7, #4]
 8009e0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8009e0e:	9a03      	ldr	r2, [sp, #12]
 8009e10:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8009e14:	ee34 6a26 	vadd.f32	s12, s8, s13
 8009e18:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8009e1c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8009e20:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009e24:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009e28:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009e2c:	ed81 5a00 	vstr	s10, [r1]
 8009e30:	ed93 5a01 	vldr	s10, [r3, #4]
 8009e34:	edd7 4a01 	vldr	s9, [r7, #4]
 8009e38:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009e3c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8009e40:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009e44:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8009e48:	ed81 5a01 	vstr	s10, [r1, #4]
 8009e4c:	edd2 1a00 	vldr	s3, [r2]
 8009e50:	edd2 2a01 	vldr	s5, [r2, #4]
 8009e54:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009e58:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009e5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009e60:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009e64:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009e68:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009e6c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009e70:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009e74:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009e78:	edc3 2a00 	vstr	s5, [r3]
 8009e7c:	ed83 5a01 	vstr	s10, [r3, #4]
 8009e80:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009e84:	9b00      	ldr	r3, [sp, #0]
 8009e86:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009e8a:	ed93 4a01 	vldr	s8, [r3, #4]
 8009e8e:	ed93 5a00 	vldr	s10, [r3]
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009e98:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009e9c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009ea0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009ea4:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009ea8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009eac:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009eb0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009eb4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009eb8:	ed80 6a01 	vstr	s12, [r0, #4]
 8009ebc:	edc0 5a00 	vstr	s11, [r0]
 8009ec0:	edd3 5a01 	vldr	s11, [r3, #4]
 8009ec4:	edd3 6a00 	vldr	s13, [r3]
 8009ec8:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009ecc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009ed0:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009ed4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009ed8:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009edc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ee0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009ee4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009ee8:	ed87 7a01 	vstr	s14, [r7, #4]
 8009eec:	edc7 7a00 	vstr	s15, [r7]
 8009ef0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	686a      	ldr	r2, [r5, #4]
 8009ef8:	2304      	movs	r3, #4
 8009efa:	f000 f9d3 	bl	800a2a4 <arm_radix8_butterfly_f32>
 8009efe:	4630      	mov	r0, r6
 8009f00:	4621      	mov	r1, r4
 8009f02:	686a      	ldr	r2, [r5, #4]
 8009f04:	2304      	movs	r3, #4
 8009f06:	f000 f9cd 	bl	800a2a4 <arm_radix8_butterfly_f32>
 8009f0a:	9808      	ldr	r0, [sp, #32]
 8009f0c:	686a      	ldr	r2, [r5, #4]
 8009f0e:	4621      	mov	r1, r4
 8009f10:	2304      	movs	r3, #4
 8009f12:	f000 f9c7 	bl	800a2a4 <arm_radix8_butterfly_f32>
 8009f16:	686a      	ldr	r2, [r5, #4]
 8009f18:	9801      	ldr	r0, [sp, #4]
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	2304      	movs	r3, #4
 8009f1e:	b00d      	add	sp, #52	@ 0x34
 8009f20:	ecbd 8b0a 	vpop	{d8-d12}
 8009f24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	f000 b9bc 	b.w	800a2a4 <arm_radix8_butterfly_f32>

08009f2c <arm_cfft_f32>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	2a01      	cmp	r2, #1
 8009f32:	4606      	mov	r6, r0
 8009f34:	4617      	mov	r7, r2
 8009f36:	460c      	mov	r4, r1
 8009f38:	4698      	mov	r8, r3
 8009f3a:	8805      	ldrh	r5, [r0, #0]
 8009f3c:	d056      	beq.n	8009fec <arm_cfft_f32+0xc0>
 8009f3e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009f42:	d063      	beq.n	800a00c <arm_cfft_f32+0xe0>
 8009f44:	d916      	bls.n	8009f74 <arm_cfft_f32+0x48>
 8009f46:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009f4a:	d01a      	beq.n	8009f82 <arm_cfft_f32+0x56>
 8009f4c:	d947      	bls.n	8009fde <arm_cfft_f32+0xb2>
 8009f4e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009f52:	d05b      	beq.n	800a00c <arm_cfft_f32+0xe0>
 8009f54:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009f58:	d105      	bne.n	8009f66 <arm_cfft_f32+0x3a>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	6872      	ldr	r2, [r6, #4]
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 f99f 	bl	800a2a4 <arm_radix8_butterfly_f32>
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	d111      	bne.n	8009f90 <arm_cfft_f32+0x64>
 8009f6c:	2f01      	cmp	r7, #1
 8009f6e:	d016      	beq.n	8009f9e <arm_cfft_f32+0x72>
 8009f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f74:	2d20      	cmp	r5, #32
 8009f76:	d049      	beq.n	800a00c <arm_cfft_f32+0xe0>
 8009f78:	d935      	bls.n	8009fe6 <arm_cfft_f32+0xba>
 8009f7a:	2d40      	cmp	r5, #64	@ 0x40
 8009f7c:	d0ed      	beq.n	8009f5a <arm_cfft_f32+0x2e>
 8009f7e:	2d80      	cmp	r5, #128	@ 0x80
 8009f80:	d1f1      	bne.n	8009f66 <arm_cfft_f32+0x3a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff fcab 	bl	80098e0 <arm_cfft_radix8by2_f32>
 8009f8a:	f1b8 0f00 	cmp.w	r8, #0
 8009f8e:	d0ed      	beq.n	8009f6c <arm_cfft_f32+0x40>
 8009f90:	68b2      	ldr	r2, [r6, #8]
 8009f92:	89b1      	ldrh	r1, [r6, #12]
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 f841 	bl	800a01c <arm_bitreversal_32>
 8009f9a:	2f01      	cmp	r7, #1
 8009f9c:	d1e8      	bne.n	8009f70 <arm_cfft_f32+0x44>
 8009f9e:	ee07 5a90 	vmov	s15, r5
 8009fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	d0de      	beq.n	8009f70 <arm_cfft_f32+0x44>
 8009fb2:	f104 0108 	add.w	r1, r4, #8
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	3301      	adds	r3, #1
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	f101 0108 	add.w	r1, r1, #8
 8009fc0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009fc4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009fc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009fcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009fd0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009fd4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009fd8:	d1ee      	bne.n	8009fb8 <arm_cfft_f32+0x8c>
 8009fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fde:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009fe2:	d0ba      	beq.n	8009f5a <arm_cfft_f32+0x2e>
 8009fe4:	e7bf      	b.n	8009f66 <arm_cfft_f32+0x3a>
 8009fe6:	2d10      	cmp	r5, #16
 8009fe8:	d0cb      	beq.n	8009f82 <arm_cfft_f32+0x56>
 8009fea:	e7bc      	b.n	8009f66 <arm_cfft_f32+0x3a>
 8009fec:	b19d      	cbz	r5, 800a016 <arm_cfft_f32+0xea>
 8009fee:	f101 030c 	add.w	r3, r1, #12
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009ff8:	3201      	adds	r2, #1
 8009ffa:	eef1 7a67 	vneg.f32	s15, s15
 8009ffe:	4295      	cmp	r5, r2
 800a000:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a004:	f103 0308 	add.w	r3, r3, #8
 800a008:	d1f4      	bne.n	8009ff4 <arm_cfft_f32+0xc8>
 800a00a:	e798      	b.n	8009f3e <arm_cfft_f32+0x12>
 800a00c:	4621      	mov	r1, r4
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff fd36 	bl	8009a80 <arm_cfft_radix8by4_f32>
 800a014:	e7a7      	b.n	8009f66 <arm_cfft_f32+0x3a>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0aa      	beq.n	8009f70 <arm_cfft_f32+0x44>
 800a01a:	e7b9      	b.n	8009f90 <arm_cfft_f32+0x64>

0800a01c <arm_bitreversal_32>:
 800a01c:	b1e9      	cbz	r1, 800a05a <arm_bitreversal_32+0x3e>
 800a01e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a020:	2500      	movs	r5, #0
 800a022:	f102 0e02 	add.w	lr, r2, #2
 800a026:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800a02a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800a02e:	08a4      	lsrs	r4, r4, #2
 800a030:	089b      	lsrs	r3, r3, #2
 800a032:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800a036:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800a03a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a03e:	00a6      	lsls	r6, r4, #2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800a046:	3304      	adds	r3, #4
 800a048:	1d34      	adds	r4, r6, #4
 800a04a:	3502      	adds	r5, #2
 800a04c:	58c6      	ldr	r6, [r0, r3]
 800a04e:	5907      	ldr	r7, [r0, r4]
 800a050:	50c7      	str	r7, [r0, r3]
 800a052:	428d      	cmp	r5, r1
 800a054:	5106      	str	r6, [r0, r4]
 800a056:	d3e6      	bcc.n	800a026 <arm_bitreversal_32+0xa>
 800a058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05a:	4770      	bx	lr

0800a05c <arm_cmplx_mag_f32>:
 800a05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a060:	ed2d 8b02 	vpush	{d8}
 800a064:	0897      	lsrs	r7, r2, #2
 800a066:	b084      	sub	sp, #16
 800a068:	d077      	beq.n	800a15a <arm_cmplx_mag_f32+0xfe>
 800a06a:	f04f 0800 	mov.w	r8, #0
 800a06e:	f100 0420 	add.w	r4, r0, #32
 800a072:	f101 0510 	add.w	r5, r1, #16
 800a076:	463e      	mov	r6, r7
 800a078:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800a07c:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800a080:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a084:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a088:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a08c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a094:	f2c0 80c5 	blt.w	800a222 <arm_cmplx_mag_f32+0x1c6>
 800a098:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a0a4:	f100 80cb 	bmi.w	800a23e <arm_cmplx_mag_f32+0x1e2>
 800a0a8:	ed05 8a04 	vstr	s16, [r5, #-16]
 800a0ac:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800a0b0:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800a0b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a0b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a0bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c8:	f2c0 80a8 	blt.w	800a21c <arm_cmplx_mag_f32+0x1c0>
 800a0cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a0d8:	f100 80a8 	bmi.w	800a22c <arm_cmplx_mag_f32+0x1d0>
 800a0dc:	ed05 8a03 	vstr	s16, [r5, #-12]
 800a0e0:	ed14 0a04 	vldr	s0, [r4, #-16]
 800a0e4:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a0e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a0ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a0f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fc:	f2c0 808b 	blt.w	800a216 <arm_cmplx_mag_f32+0x1ba>
 800a100:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a108:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a10c:	f100 80a9 	bmi.w	800a262 <arm_cmplx_mag_f32+0x206>
 800a110:	ed05 8a02 	vstr	s16, [r5, #-8]
 800a114:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a118:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a11c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a120:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a124:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a128:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a130:	db6e      	blt.n	800a210 <arm_cmplx_mag_f32+0x1b4>
 800a132:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a13e:	f100 8087 	bmi.w	800a250 <arm_cmplx_mag_f32+0x1f4>
 800a142:	ed05 8a01 	vstr	s16, [r5, #-4]
 800a146:	3e01      	subs	r6, #1
 800a148:	f104 0420 	add.w	r4, r4, #32
 800a14c:	f105 0510 	add.w	r5, r5, #16
 800a150:	d192      	bne.n	800a078 <arm_cmplx_mag_f32+0x1c>
 800a152:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800a156:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a15a:	f012 0203 	ands.w	r2, r2, #3
 800a15e:	d052      	beq.n	800a206 <arm_cmplx_mag_f32+0x1aa>
 800a160:	ed90 0a00 	vldr	s0, [r0]
 800a164:	edd0 7a01 	vldr	s15, [r0, #4]
 800a168:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a16c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a170:	2300      	movs	r3, #0
 800a172:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a176:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	bfb8      	it	lt
 800a180:	600b      	strlt	r3, [r1, #0]
 800a182:	db08      	blt.n	800a196 <arm_cmplx_mag_f32+0x13a>
 800a184:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a190:	d479      	bmi.n	800a286 <arm_cmplx_mag_f32+0x22a>
 800a192:	ed81 8a00 	vstr	s16, [r1]
 800a196:	3a01      	subs	r2, #1
 800a198:	d035      	beq.n	800a206 <arm_cmplx_mag_f32+0x1aa>
 800a19a:	ed90 0a02 	vldr	s0, [r0, #8]
 800a19e:	edd0 7a03 	vldr	s15, [r0, #12]
 800a1a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a1b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b8:	bfb8      	it	lt
 800a1ba:	604b      	strlt	r3, [r1, #4]
 800a1bc:	db08      	blt.n	800a1d0 <arm_cmplx_mag_f32+0x174>
 800a1be:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a1ca:	d453      	bmi.n	800a274 <arm_cmplx_mag_f32+0x218>
 800a1cc:	ed81 8a01 	vstr	s16, [r1, #4]
 800a1d0:	2a01      	cmp	r2, #1
 800a1d2:	d018      	beq.n	800a206 <arm_cmplx_mag_f32+0x1aa>
 800a1d4:	ed90 0a04 	vldr	s0, [r0, #16]
 800a1d8:	edd0 7a05 	vldr	s15, [r0, #20]
 800a1dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a1ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f2:	db19      	blt.n	800a228 <arm_cmplx_mag_f32+0x1cc>
 800a1f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a200:	d44a      	bmi.n	800a298 <arm_cmplx_mag_f32+0x23c>
 800a202:	ed81 8a02 	vstr	s16, [r1, #8]
 800a206:	b004      	add	sp, #16
 800a208:	ecbd 8b02 	vpop	{d8}
 800a20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a210:	f845 8c04 	str.w	r8, [r5, #-4]
 800a214:	e797      	b.n	800a146 <arm_cmplx_mag_f32+0xea>
 800a216:	f845 8c08 	str.w	r8, [r5, #-8]
 800a21a:	e77b      	b.n	800a114 <arm_cmplx_mag_f32+0xb8>
 800a21c:	f845 8c0c 	str.w	r8, [r5, #-12]
 800a220:	e75e      	b.n	800a0e0 <arm_cmplx_mag_f32+0x84>
 800a222:	f845 8c10 	str.w	r8, [r5, #-16]
 800a226:	e741      	b.n	800a0ac <arm_cmplx_mag_f32+0x50>
 800a228:	608b      	str	r3, [r1, #8]
 800a22a:	e7ec      	b.n	800a206 <arm_cmplx_mag_f32+0x1aa>
 800a22c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a230:	9001      	str	r0, [sp, #4]
 800a232:	f000 faf7 	bl	800a824 <sqrtf>
 800a236:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a23a:	9801      	ldr	r0, [sp, #4]
 800a23c:	e74e      	b.n	800a0dc <arm_cmplx_mag_f32+0x80>
 800a23e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a242:	9001      	str	r0, [sp, #4]
 800a244:	f000 faee 	bl	800a824 <sqrtf>
 800a248:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a24c:	9801      	ldr	r0, [sp, #4]
 800a24e:	e72b      	b.n	800a0a8 <arm_cmplx_mag_f32+0x4c>
 800a250:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a254:	9001      	str	r0, [sp, #4]
 800a256:	f000 fae5 	bl	800a824 <sqrtf>
 800a25a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a25e:	9801      	ldr	r0, [sp, #4]
 800a260:	e76f      	b.n	800a142 <arm_cmplx_mag_f32+0xe6>
 800a262:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a266:	9001      	str	r0, [sp, #4]
 800a268:	f000 fadc 	bl	800a824 <sqrtf>
 800a26c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a270:	9801      	ldr	r0, [sp, #4]
 800a272:	e74d      	b.n	800a110 <arm_cmplx_mag_f32+0xb4>
 800a274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a278:	9201      	str	r2, [sp, #4]
 800a27a:	f000 fad3 	bl	800a824 <sqrtf>
 800a27e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a282:	9903      	ldr	r1, [sp, #12]
 800a284:	e7a2      	b.n	800a1cc <arm_cmplx_mag_f32+0x170>
 800a286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a28a:	9201      	str	r2, [sp, #4]
 800a28c:	f000 faca 	bl	800a824 <sqrtf>
 800a290:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a294:	9903      	ldr	r1, [sp, #12]
 800a296:	e77c      	b.n	800a192 <arm_cmplx_mag_f32+0x136>
 800a298:	9101      	str	r1, [sp, #4]
 800a29a:	f000 fac3 	bl	800a824 <sqrtf>
 800a29e:	9901      	ldr	r1, [sp, #4]
 800a2a0:	e7af      	b.n	800a202 <arm_cmplx_mag_f32+0x1a6>
 800a2a2:	bf00      	nop

0800a2a4 <arm_radix8_butterfly_f32>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	ed2d 8b10 	vpush	{d8-d15}
 800a2ac:	b095      	sub	sp, #84	@ 0x54
 800a2ae:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800a59c <arm_radix8_butterfly_f32+0x2f8>
 800a2ba:	9012      	str	r0, [sp, #72]	@ 0x48
 800a2bc:	468b      	mov	fp, r1
 800a2be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a2c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a2c8:	960f      	str	r6, [sp, #60]	@ 0x3c
 800a2ca:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a2ce:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a2d2:	eb03 0508 	add.w	r5, r3, r8
 800a2d6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a2da:	eb05 040e 	add.w	r4, r5, lr
 800a2de:	0137      	lsls	r7, r6, #4
 800a2e0:	eba6 030a 	sub.w	r3, r6, sl
 800a2e4:	eb04 000e 	add.w	r0, r4, lr
 800a2e8:	44b2      	add	sl, r6
 800a2ea:	1d3a      	adds	r2, r7, #4
 800a2ec:	9702      	str	r7, [sp, #8]
 800a2ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a2f2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a2f6:	ebae 0c06 	sub.w	ip, lr, r6
 800a2fa:	9703      	str	r7, [sp, #12]
 800a2fc:	eb03 0708 	add.w	r7, r3, r8
 800a300:	9701      	str	r7, [sp, #4]
 800a302:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a306:	9706      	str	r7, [sp, #24]
 800a308:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800a30a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a30e:	f10e 0104 	add.w	r1, lr, #4
 800a312:	4439      	add	r1, r7
 800a314:	443a      	add	r2, r7
 800a316:	0137      	lsls	r7, r6, #4
 800a318:	00f6      	lsls	r6, r6, #3
 800a31a:	9704      	str	r7, [sp, #16]
 800a31c:	9605      	str	r6, [sp, #20]
 800a31e:	9f01      	ldr	r7, [sp, #4]
 800a320:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a322:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a326:	f04f 0c00 	mov.w	ip, #0
 800a32a:	edd4 6a00 	vldr	s13, [r4]
 800a32e:	edd7 1a00 	vldr	s3, [r7]
 800a332:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a336:	edd5 5a00 	vldr	s11, [r5]
 800a33a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a33e:	ed90 6a00 	vldr	s12, [r0]
 800a342:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a346:	ed93 3a00 	vldr	s6, [r3]
 800a34a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a34e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a352:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a356:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a35a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a35e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a362:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a366:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a36a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a36e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a372:	ed85 4a00 	vstr	s8, [r5]
 800a376:	edd1 6a00 	vldr	s13, [r1]
 800a37a:	ed94 9a01 	vldr	s18, [r4, #4]
 800a37e:	edd3 2a01 	vldr	s5, [r3, #4]
 800a382:	edd7 8a01 	vldr	s17, [r7, #4]
 800a386:	edd6 0a00 	vldr	s1, [r6]
 800a38a:	edd5 3a01 	vldr	s7, [r5, #4]
 800a38e:	ed90 8a01 	vldr	s16, [r0, #4]
 800a392:	ed92 7a00 	vldr	s14, [r2]
 800a396:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a39a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a39e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a3a2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a3a6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a3aa:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a3ae:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a3b2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a3b6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a3ba:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a3be:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a3c2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a3c6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a3ca:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a3ce:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a3d2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a3d6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a3da:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800a3de:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a3e2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a3e6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a3ea:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800a3ee:	ee33 2a20 	vadd.f32	s4, s6, s1
 800a3f2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a3f6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a3fa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800a3fe:	ee77 0a01 	vadd.f32	s1, s14, s2
 800a402:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800a406:	ee37 7a41 	vsub.f32	s14, s14, s2
 800a40a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800a40e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a412:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a416:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a41a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800a41e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800a422:	ee32 2a40 	vsub.f32	s4, s4, s0
 800a426:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a42a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800a42e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800a432:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a436:	ee34 6a67 	vsub.f32	s12, s8, s15
 800a43a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800a43e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800a442:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a446:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a44a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800a44e:	44dc      	add	ip, fp
 800a450:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a454:	45e1      	cmp	r9, ip
 800a456:	ed86 8a00 	vstr	s16, [r6]
 800a45a:	ed85 2a01 	vstr	s4, [r5, #4]
 800a45e:	4456      	add	r6, sl
 800a460:	ed02 0a01 	vstr	s0, [r2, #-4]
 800a464:	4455      	add	r5, sl
 800a466:	edc0 6a00 	vstr	s13, [r0]
 800a46a:	ed82 1a00 	vstr	s2, [r2]
 800a46e:	ed80 5a01 	vstr	s10, [r0, #4]
 800a472:	4452      	add	r2, sl
 800a474:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a478:	4450      	add	r0, sl
 800a47a:	edc7 2a00 	vstr	s5, [r7]
 800a47e:	edc4 4a00 	vstr	s9, [r4]
 800a482:	ed83 7a00 	vstr	s14, [r3]
 800a486:	edc1 5a00 	vstr	s11, [r1]
 800a48a:	edc7 3a01 	vstr	s7, [r7, #4]
 800a48e:	4451      	add	r1, sl
 800a490:	ed84 6a01 	vstr	s12, [r4, #4]
 800a494:	4457      	add	r7, sl
 800a496:	edc3 7a01 	vstr	s15, [r3, #4]
 800a49a:	4454      	add	r4, sl
 800a49c:	4453      	add	r3, sl
 800a49e:	f63f af44 	bhi.w	800a32a <arm_radix8_butterfly_f32+0x86>
 800a4a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4a4:	2b07      	cmp	r3, #7
 800a4a6:	f240 81b7 	bls.w	800a818 <arm_radix8_butterfly_f32+0x574>
 800a4aa:	9b06      	ldr	r3, [sp, #24]
 800a4ac:	9903      	ldr	r1, [sp, #12]
 800a4ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a4b0:	9e05      	ldr	r6, [sp, #20]
 800a4b2:	9a04      	ldr	r2, [sp, #16]
 800a4b4:	f103 0c08 	add.w	ip, r3, #8
 800a4b8:	9b02      	ldr	r3, [sp, #8]
 800a4ba:	3108      	adds	r1, #8
 800a4bc:	f108 0808 	add.w	r8, r8, #8
 800a4c0:	1841      	adds	r1, r0, r1
 800a4c2:	3608      	adds	r6, #8
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4444      	add	r4, r8
 800a4ca:	18c3      	adds	r3, r0, r3
 800a4cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4ce:	1981      	adds	r1, r0, r6
 800a4d0:	f10e 0e08 	add.w	lr, lr, #8
 800a4d4:	3208      	adds	r2, #8
 800a4d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4d8:	9107      	str	r1, [sp, #28]
 800a4da:	4604      	mov	r4, r0
 800a4dc:	4601      	mov	r1, r0
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	f100 030c 	add.w	r3, r0, #12
 800a4e4:	4474      	add	r4, lr
 800a4e6:	f04f 0801 	mov.w	r8, #1
 800a4ea:	1882      	adds	r2, r0, r2
 800a4ec:	4461      	add	r1, ip
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4f4:	46c1      	mov	r9, r8
 800a4f6:	9208      	str	r2, [sp, #32]
 800a4f8:	46d8      	mov	r8, fp
 800a4fa:	9106      	str	r1, [sp, #24]
 800a4fc:	f04f 0e00 	mov.w	lr, #0
 800a500:	469b      	mov	fp, r3
 800a502:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a504:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a506:	449e      	add	lr, r3
 800a508:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800a50c:	441a      	add	r2, r3
 800a50e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a510:	441a      	add	r2, r3
 800a512:	18d4      	adds	r4, r2, r3
 800a514:	18e5      	adds	r5, r4, r3
 800a516:	18ee      	adds	r6, r5, r3
 800a518:	18f7      	adds	r7, r6, r3
 800a51a:	eb07 0c03 	add.w	ip, r7, r3
 800a51e:	920d      	str	r2, [sp, #52]	@ 0x34
 800a520:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800a524:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800a528:	910c      	str	r1, [sp, #48]	@ 0x30
 800a52a:	4419      	add	r1, r3
 800a52c:	9103      	str	r1, [sp, #12]
 800a52e:	4419      	add	r1, r3
 800a530:	18ca      	adds	r2, r1, r3
 800a532:	9202      	str	r2, [sp, #8]
 800a534:	441a      	add	r2, r3
 800a536:	18d0      	adds	r0, r2, r3
 800a538:	ed92 ea01 	vldr	s28, [r2, #4]
 800a53c:	9a02      	ldr	r2, [sp, #8]
 800a53e:	edd4 7a00 	vldr	s15, [r4]
 800a542:	edd2 da01 	vldr	s27, [r2, #4]
 800a546:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a548:	ed91 da01 	vldr	s26, [r1, #4]
 800a54c:	ed92 ca01 	vldr	s24, [r2, #4]
 800a550:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a552:	9903      	ldr	r1, [sp, #12]
 800a554:	edcd 7a03 	vstr	s15, [sp, #12]
 800a558:	edd2 7a00 	vldr	s15, [r2]
 800a55c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a55e:	edcd 7a02 	vstr	s15, [sp, #8]
 800a562:	edd2 7a00 	vldr	s15, [r2]
 800a566:	edd0 ea01 	vldr	s29, [r0, #4]
 800a56a:	edd1 ca01 	vldr	s25, [r1, #4]
 800a56e:	eddc ba00 	vldr	s23, [ip]
 800a572:	edd7 aa00 	vldr	s21, [r7]
 800a576:	ed96 aa00 	vldr	s20, [r6]
 800a57a:	edd5 9a00 	vldr	s19, [r5]
 800a57e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a582:	4403      	add	r3, r0
 800a584:	ed93 fa01 	vldr	s30, [r3, #4]
 800a588:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a58c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a590:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800a598:	46cc      	mov	ip, r9
 800a59a:	e001      	b.n	800a5a0 <arm_radix8_butterfly_f32+0x2fc>
 800a59c:	3f3504f3 	.word	0x3f3504f3
 800a5a0:	ed91 6a00 	vldr	s12, [r1]
 800a5a4:	ed93 5a00 	vldr	s10, [r3]
 800a5a8:	edd0 fa00 	vldr	s31, [r0]
 800a5ac:	edd4 7a00 	vldr	s15, [r4]
 800a5b0:	ed95 7a00 	vldr	s14, [r5]
 800a5b4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a5b8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a5bc:	ed92 2a00 	vldr	s4, [r2]
 800a5c0:	ed96 0a00 	vldr	s0, [r6]
 800a5c4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a5c8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a5cc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a5d0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a5d4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a5d8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a5dc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a5e0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a5e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5e8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a5ec:	edd4 8a01 	vldr	s17, [r4, #4]
 800a5f0:	ed92 9a01 	vldr	s18, [r2, #4]
 800a5f4:	edd7 0a00 	vldr	s1, [r7]
 800a5f8:	edd1 2a01 	vldr	s5, [r1, #4]
 800a5fc:	ed95 7a01 	vldr	s14, [r5, #4]
 800a600:	ed93 6a01 	vldr	s12, [r3, #4]
 800a604:	edd0 5a01 	vldr	s11, [r0, #4]
 800a608:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a60c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a610:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a614:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a618:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a61c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a620:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a624:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a628:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a62c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a630:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a634:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a638:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a63c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a640:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a644:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a648:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a64c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a650:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a654:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a658:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a65c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a660:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a664:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a668:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a66c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a670:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a674:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a678:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a67c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a680:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a684:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a688:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a68c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a690:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a694:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a698:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a69c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a6a0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a6a4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a6a8:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a6ac:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a6b0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a6b4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a6b8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a6bc:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a6c0:	eddd 1a02 	vldr	s3, [sp, #8]
 800a6c4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a6c8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a6cc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a6d0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a6d4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a6d8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a6dc:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a6e0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a6e4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a6e8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a6ec:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a6f0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a6f4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a6f8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a6fc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a700:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a704:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a708:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a70c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a710:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a714:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a718:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a71c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a720:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a724:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a728:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a72c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a730:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a734:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a738:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a73c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a740:	eddd 5a03 	vldr	s11, [sp, #12]
 800a744:	edc6 fa00 	vstr	s31, [r6]
 800a748:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a74c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a750:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a754:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a758:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a75c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a760:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a764:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a768:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a76c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a770:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a774:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a778:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a77c:	44c4      	add	ip, r8
 800a77e:	45e3      	cmp	fp, ip
 800a780:	edc3 3a00 	vstr	s7, [r3]
 800a784:	edc3 6a01 	vstr	s13, [r3, #4]
 800a788:	4456      	add	r6, sl
 800a78a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a78e:	edc7 0a00 	vstr	s1, [r7]
 800a792:	4453      	add	r3, sl
 800a794:	ed80 2a00 	vstr	s4, [r0]
 800a798:	edc0 2a01 	vstr	s5, [r0, #4]
 800a79c:	4457      	add	r7, sl
 800a79e:	edc2 1a00 	vstr	s3, [r2]
 800a7a2:	ed82 7a01 	vstr	s14, [r2, #4]
 800a7a6:	4450      	add	r0, sl
 800a7a8:	ed85 8a00 	vstr	s16, [r5]
 800a7ac:	ed85 0a01 	vstr	s0, [r5, #4]
 800a7b0:	4452      	add	r2, sl
 800a7b2:	edc1 4a00 	vstr	s9, [r1]
 800a7b6:	4455      	add	r5, sl
 800a7b8:	ed81 3a01 	vstr	s6, [r1, #4]
 800a7bc:	edc4 8a00 	vstr	s17, [r4]
 800a7c0:	ed84 6a01 	vstr	s12, [r4, #4]
 800a7c4:	4451      	add	r1, sl
 800a7c6:	4454      	add	r4, sl
 800a7c8:	f63f aeea 	bhi.w	800a5a0 <arm_radix8_butterfly_f32+0x2fc>
 800a7cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7da:	3308      	adds	r3, #8
 800a7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	9308      	str	r3, [sp, #32]
 800a7e4:	9b07      	ldr	r3, [sp, #28]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	9307      	str	r3, [sp, #28]
 800a7ea:	9b06      	ldr	r3, [sp, #24]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	9306      	str	r3, [sp, #24]
 800a7f0:	9b05      	ldr	r3, [sp, #20]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7fe:	f109 0901 	add.w	r9, r9, #1
 800a802:	454b      	cmp	r3, r9
 800a804:	f47f ae7d 	bne.w	800a502 <arm_radix8_butterfly_f32+0x25e>
 800a808:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	46d9      	mov	r9, fp
 800a810:	9310      	str	r3, [sp, #64]	@ 0x40
 800a812:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800a816:	e554      	b.n	800a2c2 <arm_radix8_butterfly_f32+0x1e>
 800a818:	b015      	add	sp, #84	@ 0x54
 800a81a:	ecbd 8b10 	vpop	{d8-d15}
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	bf00      	nop

0800a824 <sqrtf>:
 800a824:	b508      	push	{r3, lr}
 800a826:	ed2d 8b02 	vpush	{d8}
 800a82a:	eeb0 8a40 	vmov.f32	s16, s0
 800a82e:	f000 f817 	bl	800a860 <__ieee754_sqrtf>
 800a832:	eeb4 8a48 	vcmp.f32	s16, s16
 800a836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a83a:	d60c      	bvs.n	800a856 <sqrtf+0x32>
 800a83c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a85c <sqrtf+0x38>
 800a840:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a848:	d505      	bpl.n	800a856 <sqrtf+0x32>
 800a84a:	f000 fe39 	bl	800b4c0 <__errno>
 800a84e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a852:	2321      	movs	r3, #33	@ 0x21
 800a854:	6003      	str	r3, [r0, #0]
 800a856:	ecbd 8b02 	vpop	{d8}
 800a85a:	bd08      	pop	{r3, pc}
 800a85c:	00000000 	.word	0x00000000

0800a860 <__ieee754_sqrtf>:
 800a860:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a864:	4770      	bx	lr
	...

0800a868 <round>:
 800a868:	ec51 0b10 	vmov	r0, r1, d0
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a872:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a876:	2a13      	cmp	r2, #19
 800a878:	460b      	mov	r3, r1
 800a87a:	4605      	mov	r5, r0
 800a87c:	dc1b      	bgt.n	800a8b6 <round+0x4e>
 800a87e:	2a00      	cmp	r2, #0
 800a880:	da0b      	bge.n	800a89a <round+0x32>
 800a882:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a886:	3201      	adds	r2, #1
 800a888:	bf04      	itt	eq
 800a88a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a88e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a892:	2200      	movs	r2, #0
 800a894:	4619      	mov	r1, r3
 800a896:	4610      	mov	r0, r2
 800a898:	e015      	b.n	800a8c6 <round+0x5e>
 800a89a:	4c15      	ldr	r4, [pc, #84]	@ (800a8f0 <round+0x88>)
 800a89c:	4114      	asrs	r4, r2
 800a89e:	ea04 0601 	and.w	r6, r4, r1
 800a8a2:	4306      	orrs	r6, r0
 800a8a4:	d00f      	beq.n	800a8c6 <round+0x5e>
 800a8a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a8aa:	fa41 f202 	asr.w	r2, r1, r2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	ea23 0304 	bic.w	r3, r3, r4
 800a8b4:	e7ed      	b.n	800a892 <round+0x2a>
 800a8b6:	2a33      	cmp	r2, #51	@ 0x33
 800a8b8:	dd08      	ble.n	800a8cc <round+0x64>
 800a8ba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a8be:	d102      	bne.n	800a8c6 <round+0x5e>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	f7f5 fce3 	bl	800028c <__adddf3>
 800a8c6:	ec41 0b10 	vmov	d0, r0, r1
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a8d0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a8d4:	40f4      	lsrs	r4, r6
 800a8d6:	4204      	tst	r4, r0
 800a8d8:	d0f5      	beq.n	800a8c6 <round+0x5e>
 800a8da:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a8de:	2201      	movs	r2, #1
 800a8e0:	408a      	lsls	r2, r1
 800a8e2:	1952      	adds	r2, r2, r5
 800a8e4:	bf28      	it	cs
 800a8e6:	3301      	addcs	r3, #1
 800a8e8:	ea22 0204 	bic.w	r2, r2, r4
 800a8ec:	e7d2      	b.n	800a894 <round+0x2c>
 800a8ee:	bf00      	nop
 800a8f0:	000fffff 	.word	0x000fffff

0800a8f4 <realloc>:
 800a8f4:	4b02      	ldr	r3, [pc, #8]	@ (800a900 <realloc+0xc>)
 800a8f6:	460a      	mov	r2, r1
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	f000 b802 	b.w	800a904 <_realloc_r>
 800a900:	20000018 	.word	0x20000018

0800a904 <_realloc_r>:
 800a904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a908:	4680      	mov	r8, r0
 800a90a:	4615      	mov	r5, r2
 800a90c:	460c      	mov	r4, r1
 800a90e:	b921      	cbnz	r1, 800a91a <_realloc_r+0x16>
 800a910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	4611      	mov	r1, r2
 800a916:	f001 bccf 	b.w	800c2b8 <_malloc_r>
 800a91a:	b92a      	cbnz	r2, 800a928 <_realloc_r+0x24>
 800a91c:	f001 fc58 	bl	800c1d0 <_free_r>
 800a920:	2400      	movs	r4, #0
 800a922:	4620      	mov	r0, r4
 800a924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a928:	f002 f8d4 	bl	800cad4 <_malloc_usable_size_r>
 800a92c:	4285      	cmp	r5, r0
 800a92e:	4606      	mov	r6, r0
 800a930:	d802      	bhi.n	800a938 <_realloc_r+0x34>
 800a932:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a936:	d8f4      	bhi.n	800a922 <_realloc_r+0x1e>
 800a938:	4629      	mov	r1, r5
 800a93a:	4640      	mov	r0, r8
 800a93c:	f001 fcbc 	bl	800c2b8 <_malloc_r>
 800a940:	4607      	mov	r7, r0
 800a942:	2800      	cmp	r0, #0
 800a944:	d0ec      	beq.n	800a920 <_realloc_r+0x1c>
 800a946:	42b5      	cmp	r5, r6
 800a948:	462a      	mov	r2, r5
 800a94a:	4621      	mov	r1, r4
 800a94c:	bf28      	it	cs
 800a94e:	4632      	movcs	r2, r6
 800a950:	f000 fde3 	bl	800b51a <memcpy>
 800a954:	4621      	mov	r1, r4
 800a956:	4640      	mov	r0, r8
 800a958:	f001 fc3a 	bl	800c1d0 <_free_r>
 800a95c:	463c      	mov	r4, r7
 800a95e:	e7e0      	b.n	800a922 <_realloc_r+0x1e>

0800a960 <__cvt>:
 800a960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a964:	ec57 6b10 	vmov	r6, r7, d0
 800a968:	2f00      	cmp	r7, #0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4619      	mov	r1, r3
 800a96e:	463b      	mov	r3, r7
 800a970:	bfbb      	ittet	lt
 800a972:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a976:	461f      	movlt	r7, r3
 800a978:	2300      	movge	r3, #0
 800a97a:	232d      	movlt	r3, #45	@ 0x2d
 800a97c:	700b      	strb	r3, [r1, #0]
 800a97e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a980:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a984:	4691      	mov	r9, r2
 800a986:	f023 0820 	bic.w	r8, r3, #32
 800a98a:	bfbc      	itt	lt
 800a98c:	4632      	movlt	r2, r6
 800a98e:	4616      	movlt	r6, r2
 800a990:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a994:	d005      	beq.n	800a9a2 <__cvt+0x42>
 800a996:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a99a:	d100      	bne.n	800a99e <__cvt+0x3e>
 800a99c:	3401      	adds	r4, #1
 800a99e:	2102      	movs	r1, #2
 800a9a0:	e000      	b.n	800a9a4 <__cvt+0x44>
 800a9a2:	2103      	movs	r1, #3
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	ab02      	add	r3, sp, #8
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	ec47 6b10 	vmov	d0, r6, r7
 800a9b0:	4653      	mov	r3, sl
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	f000 fe48 	bl	800b648 <_dtoa_r>
 800a9b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a9bc:	4605      	mov	r5, r0
 800a9be:	d119      	bne.n	800a9f4 <__cvt+0x94>
 800a9c0:	f019 0f01 	tst.w	r9, #1
 800a9c4:	d00e      	beq.n	800a9e4 <__cvt+0x84>
 800a9c6:	eb00 0904 	add.w	r9, r0, r4
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f6 f879 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9d6:	b108      	cbz	r0, 800a9dc <__cvt+0x7c>
 800a9d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a9dc:	2230      	movs	r2, #48	@ 0x30
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	454b      	cmp	r3, r9
 800a9e2:	d31e      	bcc.n	800aa22 <__cvt+0xc2>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9e8:	1b5b      	subs	r3, r3, r5
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	b004      	add	sp, #16
 800a9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9f8:	eb00 0904 	add.w	r9, r0, r4
 800a9fc:	d1e5      	bne.n	800a9ca <__cvt+0x6a>
 800a9fe:	7803      	ldrb	r3, [r0, #0]
 800aa00:	2b30      	cmp	r3, #48	@ 0x30
 800aa02:	d10a      	bne.n	800aa1a <__cvt+0xba>
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	4630      	mov	r0, r6
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	f7f6 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa10:	b918      	cbnz	r0, 800aa1a <__cvt+0xba>
 800aa12:	f1c4 0401 	rsb	r4, r4, #1
 800aa16:	f8ca 4000 	str.w	r4, [sl]
 800aa1a:	f8da 3000 	ldr.w	r3, [sl]
 800aa1e:	4499      	add	r9, r3
 800aa20:	e7d3      	b.n	800a9ca <__cvt+0x6a>
 800aa22:	1c59      	adds	r1, r3, #1
 800aa24:	9103      	str	r1, [sp, #12]
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e7d9      	b.n	800a9de <__cvt+0x7e>

0800aa2a <__exponent>:
 800aa2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa2c:	2900      	cmp	r1, #0
 800aa2e:	bfba      	itte	lt
 800aa30:	4249      	neglt	r1, r1
 800aa32:	232d      	movlt	r3, #45	@ 0x2d
 800aa34:	232b      	movge	r3, #43	@ 0x2b
 800aa36:	2909      	cmp	r1, #9
 800aa38:	7002      	strb	r2, [r0, #0]
 800aa3a:	7043      	strb	r3, [r0, #1]
 800aa3c:	dd29      	ble.n	800aa92 <__exponent+0x68>
 800aa3e:	f10d 0307 	add.w	r3, sp, #7
 800aa42:	461d      	mov	r5, r3
 800aa44:	270a      	movs	r7, #10
 800aa46:	461a      	mov	r2, r3
 800aa48:	fbb1 f6f7 	udiv	r6, r1, r7
 800aa4c:	fb07 1416 	mls	r4, r7, r6, r1
 800aa50:	3430      	adds	r4, #48	@ 0x30
 800aa52:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aa56:	460c      	mov	r4, r1
 800aa58:	2c63      	cmp	r4, #99	@ 0x63
 800aa5a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800aa5e:	4631      	mov	r1, r6
 800aa60:	dcf1      	bgt.n	800aa46 <__exponent+0x1c>
 800aa62:	3130      	adds	r1, #48	@ 0x30
 800aa64:	1e94      	subs	r4, r2, #2
 800aa66:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa6a:	1c41      	adds	r1, r0, #1
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	42ab      	cmp	r3, r5
 800aa70:	d30a      	bcc.n	800aa88 <__exponent+0x5e>
 800aa72:	f10d 0309 	add.w	r3, sp, #9
 800aa76:	1a9b      	subs	r3, r3, r2
 800aa78:	42ac      	cmp	r4, r5
 800aa7a:	bf88      	it	hi
 800aa7c:	2300      	movhi	r3, #0
 800aa7e:	3302      	adds	r3, #2
 800aa80:	4403      	add	r3, r0
 800aa82:	1a18      	subs	r0, r3, r0
 800aa84:	b003      	add	sp, #12
 800aa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa88:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa90:	e7ed      	b.n	800aa6e <__exponent+0x44>
 800aa92:	2330      	movs	r3, #48	@ 0x30
 800aa94:	3130      	adds	r1, #48	@ 0x30
 800aa96:	7083      	strb	r3, [r0, #2]
 800aa98:	70c1      	strb	r1, [r0, #3]
 800aa9a:	1d03      	adds	r3, r0, #4
 800aa9c:	e7f1      	b.n	800aa82 <__exponent+0x58>
	...

0800aaa0 <_printf_float>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	b08d      	sub	sp, #52	@ 0x34
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aaac:	4616      	mov	r6, r2
 800aaae:	461f      	mov	r7, r3
 800aab0:	4605      	mov	r5, r0
 800aab2:	f000 fcbb 	bl	800b42c <_localeconv_r>
 800aab6:	6803      	ldr	r3, [r0, #0]
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7f5 fbd8 	bl	8000270 <strlen>
 800aac0:	2300      	movs	r3, #0
 800aac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac4:	f8d8 3000 	ldr.w	r3, [r8]
 800aac8:	9005      	str	r0, [sp, #20]
 800aaca:	3307      	adds	r3, #7
 800aacc:	f023 0307 	bic.w	r3, r3, #7
 800aad0:	f103 0208 	add.w	r2, r3, #8
 800aad4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aad8:	f8d4 b000 	ldr.w	fp, [r4]
 800aadc:	f8c8 2000 	str.w	r2, [r8]
 800aae0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aae4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aae8:	9307      	str	r3, [sp, #28]
 800aaea:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aaf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaf6:	4b9c      	ldr	r3, [pc, #624]	@ (800ad68 <_printf_float+0x2c8>)
 800aaf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aafc:	f7f6 f816 	bl	8000b2c <__aeabi_dcmpun>
 800ab00:	bb70      	cbnz	r0, 800ab60 <_printf_float+0xc0>
 800ab02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab06:	4b98      	ldr	r3, [pc, #608]	@ (800ad68 <_printf_float+0x2c8>)
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab0c:	f7f5 fff0 	bl	8000af0 <__aeabi_dcmple>
 800ab10:	bb30      	cbnz	r0, 800ab60 <_printf_float+0xc0>
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	4640      	mov	r0, r8
 800ab18:	4649      	mov	r1, r9
 800ab1a:	f7f5 ffdf 	bl	8000adc <__aeabi_dcmplt>
 800ab1e:	b110      	cbz	r0, 800ab26 <_printf_float+0x86>
 800ab20:	232d      	movs	r3, #45	@ 0x2d
 800ab22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab26:	4a91      	ldr	r2, [pc, #580]	@ (800ad6c <_printf_float+0x2cc>)
 800ab28:	4b91      	ldr	r3, [pc, #580]	@ (800ad70 <_printf_float+0x2d0>)
 800ab2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ab2e:	bf94      	ite	ls
 800ab30:	4690      	movls	r8, r2
 800ab32:	4698      	movhi	r8, r3
 800ab34:	2303      	movs	r3, #3
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	f02b 0304 	bic.w	r3, fp, #4
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	f04f 0900 	mov.w	r9, #0
 800ab42:	9700      	str	r7, [sp, #0]
 800ab44:	4633      	mov	r3, r6
 800ab46:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f000 f9d2 	bl	800aef4 <_printf_common>
 800ab50:	3001      	adds	r0, #1
 800ab52:	f040 808d 	bne.w	800ac70 <_printf_float+0x1d0>
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab5a:	b00d      	add	sp, #52	@ 0x34
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 ffe0 	bl	8000b2c <__aeabi_dcmpun>
 800ab6c:	b140      	cbz	r0, 800ab80 <_printf_float+0xe0>
 800ab6e:	464b      	mov	r3, r9
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bfbc      	itt	lt
 800ab74:	232d      	movlt	r3, #45	@ 0x2d
 800ab76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab7a:	4a7e      	ldr	r2, [pc, #504]	@ (800ad74 <_printf_float+0x2d4>)
 800ab7c:	4b7e      	ldr	r3, [pc, #504]	@ (800ad78 <_printf_float+0x2d8>)
 800ab7e:	e7d4      	b.n	800ab2a <_printf_float+0x8a>
 800ab80:	6863      	ldr	r3, [r4, #4]
 800ab82:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab86:	9206      	str	r2, [sp, #24]
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	d13b      	bne.n	800ac04 <_printf_float+0x164>
 800ab8c:	2306      	movs	r3, #6
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab94:	2300      	movs	r3, #0
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	9303      	str	r3, [sp, #12]
 800ab9a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab9c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aba0:	ab09      	add	r3, sp, #36	@ 0x24
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	6861      	ldr	r1, [r4, #4]
 800aba6:	ec49 8b10 	vmov	d0, r8, r9
 800abaa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800abae:	4628      	mov	r0, r5
 800abb0:	f7ff fed6 	bl	800a960 <__cvt>
 800abb4:	9b06      	ldr	r3, [sp, #24]
 800abb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abb8:	2b47      	cmp	r3, #71	@ 0x47
 800abba:	4680      	mov	r8, r0
 800abbc:	d129      	bne.n	800ac12 <_printf_float+0x172>
 800abbe:	1cc8      	adds	r0, r1, #3
 800abc0:	db02      	blt.n	800abc8 <_printf_float+0x128>
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	4299      	cmp	r1, r3
 800abc6:	dd41      	ble.n	800ac4c <_printf_float+0x1ac>
 800abc8:	f1aa 0a02 	sub.w	sl, sl, #2
 800abcc:	fa5f fa8a 	uxtb.w	sl, sl
 800abd0:	3901      	subs	r1, #1
 800abd2:	4652      	mov	r2, sl
 800abd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800abd8:	9109      	str	r1, [sp, #36]	@ 0x24
 800abda:	f7ff ff26 	bl	800aa2a <__exponent>
 800abde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abe0:	1813      	adds	r3, r2, r0
 800abe2:	2a01      	cmp	r2, #1
 800abe4:	4681      	mov	r9, r0
 800abe6:	6123      	str	r3, [r4, #16]
 800abe8:	dc02      	bgt.n	800abf0 <_printf_float+0x150>
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	07d2      	lsls	r2, r2, #31
 800abee:	d501      	bpl.n	800abf4 <_printf_float+0x154>
 800abf0:	3301      	adds	r3, #1
 800abf2:	6123      	str	r3, [r4, #16]
 800abf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d0a2      	beq.n	800ab42 <_printf_float+0xa2>
 800abfc:	232d      	movs	r3, #45	@ 0x2d
 800abfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac02:	e79e      	b.n	800ab42 <_printf_float+0xa2>
 800ac04:	9a06      	ldr	r2, [sp, #24]
 800ac06:	2a47      	cmp	r2, #71	@ 0x47
 800ac08:	d1c2      	bne.n	800ab90 <_printf_float+0xf0>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1c0      	bne.n	800ab90 <_printf_float+0xf0>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e7bd      	b.n	800ab8e <_printf_float+0xee>
 800ac12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac16:	d9db      	bls.n	800abd0 <_printf_float+0x130>
 800ac18:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac1c:	d118      	bne.n	800ac50 <_printf_float+0x1b0>
 800ac1e:	2900      	cmp	r1, #0
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	dd0b      	ble.n	800ac3c <_printf_float+0x19c>
 800ac24:	6121      	str	r1, [r4, #16]
 800ac26:	b913      	cbnz	r3, 800ac2e <_printf_float+0x18e>
 800ac28:	6822      	ldr	r2, [r4, #0]
 800ac2a:	07d0      	lsls	r0, r2, #31
 800ac2c:	d502      	bpl.n	800ac34 <_printf_float+0x194>
 800ac2e:	3301      	adds	r3, #1
 800ac30:	440b      	add	r3, r1
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac36:	f04f 0900 	mov.w	r9, #0
 800ac3a:	e7db      	b.n	800abf4 <_printf_float+0x154>
 800ac3c:	b913      	cbnz	r3, 800ac44 <_printf_float+0x1a4>
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	07d2      	lsls	r2, r2, #31
 800ac42:	d501      	bpl.n	800ac48 <_printf_float+0x1a8>
 800ac44:	3302      	adds	r3, #2
 800ac46:	e7f4      	b.n	800ac32 <_printf_float+0x192>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e7f2      	b.n	800ac32 <_printf_float+0x192>
 800ac4c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ac50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac52:	4299      	cmp	r1, r3
 800ac54:	db05      	blt.n	800ac62 <_printf_float+0x1c2>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	6121      	str	r1, [r4, #16]
 800ac5a:	07d8      	lsls	r0, r3, #31
 800ac5c:	d5ea      	bpl.n	800ac34 <_printf_float+0x194>
 800ac5e:	1c4b      	adds	r3, r1, #1
 800ac60:	e7e7      	b.n	800ac32 <_printf_float+0x192>
 800ac62:	2900      	cmp	r1, #0
 800ac64:	bfd4      	ite	le
 800ac66:	f1c1 0202 	rsble	r2, r1, #2
 800ac6a:	2201      	movgt	r2, #1
 800ac6c:	4413      	add	r3, r2
 800ac6e:	e7e0      	b.n	800ac32 <_printf_float+0x192>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	055a      	lsls	r2, r3, #21
 800ac74:	d407      	bmi.n	800ac86 <_printf_float+0x1e6>
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	4642      	mov	r2, r8
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b8      	blx	r7
 800ac80:	3001      	adds	r0, #1
 800ac82:	d12b      	bne.n	800acdc <_printf_float+0x23c>
 800ac84:	e767      	b.n	800ab56 <_printf_float+0xb6>
 800ac86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac8a:	f240 80dd 	bls.w	800ae48 <_printf_float+0x3a8>
 800ac8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac92:	2200      	movs	r2, #0
 800ac94:	2300      	movs	r3, #0
 800ac96:	f7f5 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d033      	beq.n	800ad06 <_printf_float+0x266>
 800ac9e:	4a37      	ldr	r2, [pc, #220]	@ (800ad7c <_printf_float+0x2dc>)
 800aca0:	2301      	movs	r3, #1
 800aca2:	4631      	mov	r1, r6
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b8      	blx	r7
 800aca8:	3001      	adds	r0, #1
 800acaa:	f43f af54 	beq.w	800ab56 <_printf_float+0xb6>
 800acae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800acb2:	4543      	cmp	r3, r8
 800acb4:	db02      	blt.n	800acbc <_printf_float+0x21c>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	07d8      	lsls	r0, r3, #31
 800acba:	d50f      	bpl.n	800acdc <_printf_float+0x23c>
 800acbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc0:	4631      	mov	r1, r6
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	f43f af45 	beq.w	800ab56 <_printf_float+0xb6>
 800accc:	f04f 0900 	mov.w	r9, #0
 800acd0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800acd4:	f104 0a1a 	add.w	sl, r4, #26
 800acd8:	45c8      	cmp	r8, r9
 800acda:	dc09      	bgt.n	800acf0 <_printf_float+0x250>
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	079b      	lsls	r3, r3, #30
 800ace0:	f100 8103 	bmi.w	800aeea <_printf_float+0x44a>
 800ace4:	68e0      	ldr	r0, [r4, #12]
 800ace6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace8:	4298      	cmp	r0, r3
 800acea:	bfb8      	it	lt
 800acec:	4618      	movlt	r0, r3
 800acee:	e734      	b.n	800ab5a <_printf_float+0xba>
 800acf0:	2301      	movs	r3, #1
 800acf2:	4652      	mov	r2, sl
 800acf4:	4631      	mov	r1, r6
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b8      	blx	r7
 800acfa:	3001      	adds	r0, #1
 800acfc:	f43f af2b 	beq.w	800ab56 <_printf_float+0xb6>
 800ad00:	f109 0901 	add.w	r9, r9, #1
 800ad04:	e7e8      	b.n	800acd8 <_printf_float+0x238>
 800ad06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	dc39      	bgt.n	800ad80 <_printf_float+0x2e0>
 800ad0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ad7c <_printf_float+0x2dc>)
 800ad0e:	2301      	movs	r3, #1
 800ad10:	4631      	mov	r1, r6
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	f43f af1d 	beq.w	800ab56 <_printf_float+0xb6>
 800ad1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad20:	ea59 0303 	orrs.w	r3, r9, r3
 800ad24:	d102      	bne.n	800ad2c <_printf_float+0x28c>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	07d9      	lsls	r1, r3, #31
 800ad2a:	d5d7      	bpl.n	800acdc <_printf_float+0x23c>
 800ad2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad30:	4631      	mov	r1, r6
 800ad32:	4628      	mov	r0, r5
 800ad34:	47b8      	blx	r7
 800ad36:	3001      	adds	r0, #1
 800ad38:	f43f af0d 	beq.w	800ab56 <_printf_float+0xb6>
 800ad3c:	f04f 0a00 	mov.w	sl, #0
 800ad40:	f104 0b1a 	add.w	fp, r4, #26
 800ad44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad46:	425b      	negs	r3, r3
 800ad48:	4553      	cmp	r3, sl
 800ad4a:	dc01      	bgt.n	800ad50 <_printf_float+0x2b0>
 800ad4c:	464b      	mov	r3, r9
 800ad4e:	e793      	b.n	800ac78 <_printf_float+0x1d8>
 800ad50:	2301      	movs	r3, #1
 800ad52:	465a      	mov	r2, fp
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f aefb 	beq.w	800ab56 <_printf_float+0xb6>
 800ad60:	f10a 0a01 	add.w	sl, sl, #1
 800ad64:	e7ee      	b.n	800ad44 <_printf_float+0x2a4>
 800ad66:	bf00      	nop
 800ad68:	7fefffff 	.word	0x7fefffff
 800ad6c:	0800ea14 	.word	0x0800ea14
 800ad70:	0800ea18 	.word	0x0800ea18
 800ad74:	0800ea1c 	.word	0x0800ea1c
 800ad78:	0800ea20 	.word	0x0800ea20
 800ad7c:	0800ea24 	.word	0x0800ea24
 800ad80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad86:	4553      	cmp	r3, sl
 800ad88:	bfa8      	it	ge
 800ad8a:	4653      	movge	r3, sl
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	4699      	mov	r9, r3
 800ad90:	dc36      	bgt.n	800ae00 <_printf_float+0x360>
 800ad92:	f04f 0b00 	mov.w	fp, #0
 800ad96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad9a:	f104 021a 	add.w	r2, r4, #26
 800ad9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ada0:	9306      	str	r3, [sp, #24]
 800ada2:	eba3 0309 	sub.w	r3, r3, r9
 800ada6:	455b      	cmp	r3, fp
 800ada8:	dc31      	bgt.n	800ae0e <_printf_float+0x36e>
 800adaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adac:	459a      	cmp	sl, r3
 800adae:	dc3a      	bgt.n	800ae26 <_printf_float+0x386>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	07da      	lsls	r2, r3, #31
 800adb4:	d437      	bmi.n	800ae26 <_printf_float+0x386>
 800adb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb8:	ebaa 0903 	sub.w	r9, sl, r3
 800adbc:	9b06      	ldr	r3, [sp, #24]
 800adbe:	ebaa 0303 	sub.w	r3, sl, r3
 800adc2:	4599      	cmp	r9, r3
 800adc4:	bfa8      	it	ge
 800adc6:	4699      	movge	r9, r3
 800adc8:	f1b9 0f00 	cmp.w	r9, #0
 800adcc:	dc33      	bgt.n	800ae36 <_printf_float+0x396>
 800adce:	f04f 0800 	mov.w	r8, #0
 800add2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800add6:	f104 0b1a 	add.w	fp, r4, #26
 800adda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800addc:	ebaa 0303 	sub.w	r3, sl, r3
 800ade0:	eba3 0309 	sub.w	r3, r3, r9
 800ade4:	4543      	cmp	r3, r8
 800ade6:	f77f af79 	ble.w	800acdc <_printf_float+0x23c>
 800adea:	2301      	movs	r3, #1
 800adec:	465a      	mov	r2, fp
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	f43f aeae 	beq.w	800ab56 <_printf_float+0xb6>
 800adfa:	f108 0801 	add.w	r8, r8, #1
 800adfe:	e7ec      	b.n	800adda <_printf_float+0x33a>
 800ae00:	4642      	mov	r2, r8
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d1c2      	bne.n	800ad92 <_printf_float+0x2f2>
 800ae0c:	e6a3      	b.n	800ab56 <_printf_float+0xb6>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4631      	mov	r1, r6
 800ae12:	4628      	mov	r0, r5
 800ae14:	9206      	str	r2, [sp, #24]
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f ae9c 	beq.w	800ab56 <_printf_float+0xb6>
 800ae1e:	9a06      	ldr	r2, [sp, #24]
 800ae20:	f10b 0b01 	add.w	fp, fp, #1
 800ae24:	e7bb      	b.n	800ad9e <_printf_float+0x2fe>
 800ae26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	47b8      	blx	r7
 800ae30:	3001      	adds	r0, #1
 800ae32:	d1c0      	bne.n	800adb6 <_printf_float+0x316>
 800ae34:	e68f      	b.n	800ab56 <_printf_float+0xb6>
 800ae36:	9a06      	ldr	r2, [sp, #24]
 800ae38:	464b      	mov	r3, r9
 800ae3a:	4442      	add	r2, r8
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	d1c3      	bne.n	800adce <_printf_float+0x32e>
 800ae46:	e686      	b.n	800ab56 <_printf_float+0xb6>
 800ae48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae4c:	f1ba 0f01 	cmp.w	sl, #1
 800ae50:	dc01      	bgt.n	800ae56 <_printf_float+0x3b6>
 800ae52:	07db      	lsls	r3, r3, #31
 800ae54:	d536      	bpl.n	800aec4 <_printf_float+0x424>
 800ae56:	2301      	movs	r3, #1
 800ae58:	4642      	mov	r2, r8
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	f43f ae78 	beq.w	800ab56 <_printf_float+0xb6>
 800ae66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b8      	blx	r7
 800ae70:	3001      	adds	r0, #1
 800ae72:	f43f ae70 	beq.w	800ab56 <_printf_float+0xb6>
 800ae76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ae82:	f7f5 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae86:	b9c0      	cbnz	r0, 800aeba <_printf_float+0x41a>
 800ae88:	4653      	mov	r3, sl
 800ae8a:	f108 0201 	add.w	r2, r8, #1
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	d10c      	bne.n	800aeb2 <_printf_float+0x412>
 800ae98:	e65d      	b.n	800ab56 <_printf_float+0xb6>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	465a      	mov	r2, fp
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	f43f ae56 	beq.w	800ab56 <_printf_float+0xb6>
 800aeaa:	f108 0801 	add.w	r8, r8, #1
 800aeae:	45d0      	cmp	r8, sl
 800aeb0:	dbf3      	blt.n	800ae9a <_printf_float+0x3fa>
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aeb8:	e6df      	b.n	800ac7a <_printf_float+0x1da>
 800aeba:	f04f 0800 	mov.w	r8, #0
 800aebe:	f104 0b1a 	add.w	fp, r4, #26
 800aec2:	e7f4      	b.n	800aeae <_printf_float+0x40e>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4642      	mov	r2, r8
 800aec8:	e7e1      	b.n	800ae8e <_printf_float+0x3ee>
 800aeca:	2301      	movs	r3, #1
 800aecc:	464a      	mov	r2, r9
 800aece:	4631      	mov	r1, r6
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b8      	blx	r7
 800aed4:	3001      	adds	r0, #1
 800aed6:	f43f ae3e 	beq.w	800ab56 <_printf_float+0xb6>
 800aeda:	f108 0801 	add.w	r8, r8, #1
 800aede:	68e3      	ldr	r3, [r4, #12]
 800aee0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aee2:	1a5b      	subs	r3, r3, r1
 800aee4:	4543      	cmp	r3, r8
 800aee6:	dcf0      	bgt.n	800aeca <_printf_float+0x42a>
 800aee8:	e6fc      	b.n	800ace4 <_printf_float+0x244>
 800aeea:	f04f 0800 	mov.w	r8, #0
 800aeee:	f104 0919 	add.w	r9, r4, #25
 800aef2:	e7f4      	b.n	800aede <_printf_float+0x43e>

0800aef4 <_printf_common>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	4616      	mov	r6, r2
 800aefa:	4698      	mov	r8, r3
 800aefc:	688a      	ldr	r2, [r1, #8]
 800aefe:	690b      	ldr	r3, [r1, #16]
 800af00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af04:	4293      	cmp	r3, r2
 800af06:	bfb8      	it	lt
 800af08:	4613      	movlt	r3, r2
 800af0a:	6033      	str	r3, [r6, #0]
 800af0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af10:	4607      	mov	r7, r0
 800af12:	460c      	mov	r4, r1
 800af14:	b10a      	cbz	r2, 800af1a <_printf_common+0x26>
 800af16:	3301      	adds	r3, #1
 800af18:	6033      	str	r3, [r6, #0]
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	0699      	lsls	r1, r3, #26
 800af1e:	bf42      	ittt	mi
 800af20:	6833      	ldrmi	r3, [r6, #0]
 800af22:	3302      	addmi	r3, #2
 800af24:	6033      	strmi	r3, [r6, #0]
 800af26:	6825      	ldr	r5, [r4, #0]
 800af28:	f015 0506 	ands.w	r5, r5, #6
 800af2c:	d106      	bne.n	800af3c <_printf_common+0x48>
 800af2e:	f104 0a19 	add.w	sl, r4, #25
 800af32:	68e3      	ldr	r3, [r4, #12]
 800af34:	6832      	ldr	r2, [r6, #0]
 800af36:	1a9b      	subs	r3, r3, r2
 800af38:	42ab      	cmp	r3, r5
 800af3a:	dc26      	bgt.n	800af8a <_printf_common+0x96>
 800af3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af40:	6822      	ldr	r2, [r4, #0]
 800af42:	3b00      	subs	r3, #0
 800af44:	bf18      	it	ne
 800af46:	2301      	movne	r3, #1
 800af48:	0692      	lsls	r2, r2, #26
 800af4a:	d42b      	bmi.n	800afa4 <_printf_common+0xb0>
 800af4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af50:	4641      	mov	r1, r8
 800af52:	4638      	mov	r0, r7
 800af54:	47c8      	blx	r9
 800af56:	3001      	adds	r0, #1
 800af58:	d01e      	beq.n	800af98 <_printf_common+0xa4>
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	6922      	ldr	r2, [r4, #16]
 800af5e:	f003 0306 	and.w	r3, r3, #6
 800af62:	2b04      	cmp	r3, #4
 800af64:	bf02      	ittt	eq
 800af66:	68e5      	ldreq	r5, [r4, #12]
 800af68:	6833      	ldreq	r3, [r6, #0]
 800af6a:	1aed      	subeq	r5, r5, r3
 800af6c:	68a3      	ldr	r3, [r4, #8]
 800af6e:	bf0c      	ite	eq
 800af70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af74:	2500      	movne	r5, #0
 800af76:	4293      	cmp	r3, r2
 800af78:	bfc4      	itt	gt
 800af7a:	1a9b      	subgt	r3, r3, r2
 800af7c:	18ed      	addgt	r5, r5, r3
 800af7e:	2600      	movs	r6, #0
 800af80:	341a      	adds	r4, #26
 800af82:	42b5      	cmp	r5, r6
 800af84:	d11a      	bne.n	800afbc <_printf_common+0xc8>
 800af86:	2000      	movs	r0, #0
 800af88:	e008      	b.n	800af9c <_printf_common+0xa8>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4652      	mov	r2, sl
 800af8e:	4641      	mov	r1, r8
 800af90:	4638      	mov	r0, r7
 800af92:	47c8      	blx	r9
 800af94:	3001      	adds	r0, #1
 800af96:	d103      	bne.n	800afa0 <_printf_common+0xac>
 800af98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	3501      	adds	r5, #1
 800afa2:	e7c6      	b.n	800af32 <_printf_common+0x3e>
 800afa4:	18e1      	adds	r1, r4, r3
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	2030      	movs	r0, #48	@ 0x30
 800afaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afae:	4422      	add	r2, r4
 800afb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800afb8:	3302      	adds	r3, #2
 800afba:	e7c7      	b.n	800af4c <_printf_common+0x58>
 800afbc:	2301      	movs	r3, #1
 800afbe:	4622      	mov	r2, r4
 800afc0:	4641      	mov	r1, r8
 800afc2:	4638      	mov	r0, r7
 800afc4:	47c8      	blx	r9
 800afc6:	3001      	adds	r0, #1
 800afc8:	d0e6      	beq.n	800af98 <_printf_common+0xa4>
 800afca:	3601      	adds	r6, #1
 800afcc:	e7d9      	b.n	800af82 <_printf_common+0x8e>
	...

0800afd0 <_printf_i>:
 800afd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afd4:	7e0f      	ldrb	r7, [r1, #24]
 800afd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afd8:	2f78      	cmp	r7, #120	@ 0x78
 800afda:	4691      	mov	r9, r2
 800afdc:	4680      	mov	r8, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	469a      	mov	sl, r3
 800afe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afe6:	d807      	bhi.n	800aff8 <_printf_i+0x28>
 800afe8:	2f62      	cmp	r7, #98	@ 0x62
 800afea:	d80a      	bhi.n	800b002 <_printf_i+0x32>
 800afec:	2f00      	cmp	r7, #0
 800afee:	f000 80d2 	beq.w	800b196 <_printf_i+0x1c6>
 800aff2:	2f58      	cmp	r7, #88	@ 0x58
 800aff4:	f000 80b9 	beq.w	800b16a <_printf_i+0x19a>
 800aff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800affc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b000:	e03a      	b.n	800b078 <_printf_i+0xa8>
 800b002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b006:	2b15      	cmp	r3, #21
 800b008:	d8f6      	bhi.n	800aff8 <_printf_i+0x28>
 800b00a:	a101      	add	r1, pc, #4	@ (adr r1, 800b010 <_printf_i+0x40>)
 800b00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b07d 	.word	0x0800b07d
 800b018:	0800aff9 	.word	0x0800aff9
 800b01c:	0800aff9 	.word	0x0800aff9
 800b020:	0800aff9 	.word	0x0800aff9
 800b024:	0800aff9 	.word	0x0800aff9
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800aff9 	.word	0x0800aff9
 800b030:	0800aff9 	.word	0x0800aff9
 800b034:	0800aff9 	.word	0x0800aff9
 800b038:	0800aff9 	.word	0x0800aff9
 800b03c:	0800b17d 	.word	0x0800b17d
 800b040:	0800b0a7 	.word	0x0800b0a7
 800b044:	0800b137 	.word	0x0800b137
 800b048:	0800aff9 	.word	0x0800aff9
 800b04c:	0800aff9 	.word	0x0800aff9
 800b050:	0800b19f 	.word	0x0800b19f
 800b054:	0800aff9 	.word	0x0800aff9
 800b058:	0800b0a7 	.word	0x0800b0a7
 800b05c:	0800aff9 	.word	0x0800aff9
 800b060:	0800aff9 	.word	0x0800aff9
 800b064:	0800b13f 	.word	0x0800b13f
 800b068:	6833      	ldr	r3, [r6, #0]
 800b06a:	1d1a      	adds	r2, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6032      	str	r2, [r6, #0]
 800b070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b078:	2301      	movs	r3, #1
 800b07a:	e09d      	b.n	800b1b8 <_printf_i+0x1e8>
 800b07c:	6833      	ldr	r3, [r6, #0]
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	6031      	str	r1, [r6, #0]
 800b084:	0606      	lsls	r6, r0, #24
 800b086:	d501      	bpl.n	800b08c <_printf_i+0xbc>
 800b088:	681d      	ldr	r5, [r3, #0]
 800b08a:	e003      	b.n	800b094 <_printf_i+0xc4>
 800b08c:	0645      	lsls	r5, r0, #25
 800b08e:	d5fb      	bpl.n	800b088 <_printf_i+0xb8>
 800b090:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b094:	2d00      	cmp	r5, #0
 800b096:	da03      	bge.n	800b0a0 <_printf_i+0xd0>
 800b098:	232d      	movs	r3, #45	@ 0x2d
 800b09a:	426d      	negs	r5, r5
 800b09c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0a0:	4859      	ldr	r0, [pc, #356]	@ (800b208 <_printf_i+0x238>)
 800b0a2:	230a      	movs	r3, #10
 800b0a4:	e011      	b.n	800b0ca <_printf_i+0xfa>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	6833      	ldr	r3, [r6, #0]
 800b0aa:	0608      	lsls	r0, r1, #24
 800b0ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0b0:	d402      	bmi.n	800b0b8 <_printf_i+0xe8>
 800b0b2:	0649      	lsls	r1, r1, #25
 800b0b4:	bf48      	it	mi
 800b0b6:	b2ad      	uxthmi	r5, r5
 800b0b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0ba:	4853      	ldr	r0, [pc, #332]	@ (800b208 <_printf_i+0x238>)
 800b0bc:	6033      	str	r3, [r6, #0]
 800b0be:	bf14      	ite	ne
 800b0c0:	230a      	movne	r3, #10
 800b0c2:	2308      	moveq	r3, #8
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b0ca:	6866      	ldr	r6, [r4, #4]
 800b0cc:	60a6      	str	r6, [r4, #8]
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	bfa2      	ittt	ge
 800b0d2:	6821      	ldrge	r1, [r4, #0]
 800b0d4:	f021 0104 	bicge.w	r1, r1, #4
 800b0d8:	6021      	strge	r1, [r4, #0]
 800b0da:	b90d      	cbnz	r5, 800b0e0 <_printf_i+0x110>
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	d04b      	beq.n	800b178 <_printf_i+0x1a8>
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0e6:	fb03 5711 	mls	r7, r3, r1, r5
 800b0ea:	5dc7      	ldrb	r7, [r0, r7]
 800b0ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0f0:	462f      	mov	r7, r5
 800b0f2:	42bb      	cmp	r3, r7
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	d9f4      	bls.n	800b0e2 <_printf_i+0x112>
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d10b      	bne.n	800b114 <_printf_i+0x144>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	07df      	lsls	r7, r3, #31
 800b100:	d508      	bpl.n	800b114 <_printf_i+0x144>
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	6861      	ldr	r1, [r4, #4]
 800b106:	4299      	cmp	r1, r3
 800b108:	bfde      	ittt	le
 800b10a:	2330      	movle	r3, #48	@ 0x30
 800b10c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b110:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b114:	1b92      	subs	r2, r2, r6
 800b116:	6122      	str	r2, [r4, #16]
 800b118:	f8cd a000 	str.w	sl, [sp]
 800b11c:	464b      	mov	r3, r9
 800b11e:	aa03      	add	r2, sp, #12
 800b120:	4621      	mov	r1, r4
 800b122:	4640      	mov	r0, r8
 800b124:	f7ff fee6 	bl	800aef4 <_printf_common>
 800b128:	3001      	adds	r0, #1
 800b12a:	d14a      	bne.n	800b1c2 <_printf_i+0x1f2>
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b130:	b004      	add	sp, #16
 800b132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	f043 0320 	orr.w	r3, r3, #32
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	4833      	ldr	r0, [pc, #204]	@ (800b20c <_printf_i+0x23c>)
 800b140:	2778      	movs	r7, #120	@ 0x78
 800b142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	6831      	ldr	r1, [r6, #0]
 800b14a:	061f      	lsls	r7, r3, #24
 800b14c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b150:	d402      	bmi.n	800b158 <_printf_i+0x188>
 800b152:	065f      	lsls	r7, r3, #25
 800b154:	bf48      	it	mi
 800b156:	b2ad      	uxthmi	r5, r5
 800b158:	6031      	str	r1, [r6, #0]
 800b15a:	07d9      	lsls	r1, r3, #31
 800b15c:	bf44      	itt	mi
 800b15e:	f043 0320 	orrmi.w	r3, r3, #32
 800b162:	6023      	strmi	r3, [r4, #0]
 800b164:	b11d      	cbz	r5, 800b16e <_printf_i+0x19e>
 800b166:	2310      	movs	r3, #16
 800b168:	e7ac      	b.n	800b0c4 <_printf_i+0xf4>
 800b16a:	4827      	ldr	r0, [pc, #156]	@ (800b208 <_printf_i+0x238>)
 800b16c:	e7e9      	b.n	800b142 <_printf_i+0x172>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	f023 0320 	bic.w	r3, r3, #32
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	e7f6      	b.n	800b166 <_printf_i+0x196>
 800b178:	4616      	mov	r6, r2
 800b17a:	e7bd      	b.n	800b0f8 <_printf_i+0x128>
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	6825      	ldr	r5, [r4, #0]
 800b180:	6961      	ldr	r1, [r4, #20]
 800b182:	1d18      	adds	r0, r3, #4
 800b184:	6030      	str	r0, [r6, #0]
 800b186:	062e      	lsls	r6, r5, #24
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	d501      	bpl.n	800b190 <_printf_i+0x1c0>
 800b18c:	6019      	str	r1, [r3, #0]
 800b18e:	e002      	b.n	800b196 <_printf_i+0x1c6>
 800b190:	0668      	lsls	r0, r5, #25
 800b192:	d5fb      	bpl.n	800b18c <_printf_i+0x1bc>
 800b194:	8019      	strh	r1, [r3, #0]
 800b196:	2300      	movs	r3, #0
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	4616      	mov	r6, r2
 800b19c:	e7bc      	b.n	800b118 <_printf_i+0x148>
 800b19e:	6833      	ldr	r3, [r6, #0]
 800b1a0:	1d1a      	adds	r2, r3, #4
 800b1a2:	6032      	str	r2, [r6, #0]
 800b1a4:	681e      	ldr	r6, [r3, #0]
 800b1a6:	6862      	ldr	r2, [r4, #4]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7f5 f810 	bl	80001d0 <memchr>
 800b1b0:	b108      	cbz	r0, 800b1b6 <_printf_i+0x1e6>
 800b1b2:	1b80      	subs	r0, r0, r6
 800b1b4:	6060      	str	r0, [r4, #4]
 800b1b6:	6863      	ldr	r3, [r4, #4]
 800b1b8:	6123      	str	r3, [r4, #16]
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1c0:	e7aa      	b.n	800b118 <_printf_i+0x148>
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	47d0      	blx	sl
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d0ad      	beq.n	800b12c <_printf_i+0x15c>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	079b      	lsls	r3, r3, #30
 800b1d4:	d413      	bmi.n	800b1fe <_printf_i+0x22e>
 800b1d6:	68e0      	ldr	r0, [r4, #12]
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	4298      	cmp	r0, r3
 800b1dc:	bfb8      	it	lt
 800b1de:	4618      	movlt	r0, r3
 800b1e0:	e7a6      	b.n	800b130 <_printf_i+0x160>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	47d0      	blx	sl
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d09d      	beq.n	800b12c <_printf_i+0x15c>
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	68e3      	ldr	r3, [r4, #12]
 800b1f4:	9903      	ldr	r1, [sp, #12]
 800b1f6:	1a5b      	subs	r3, r3, r1
 800b1f8:	42ab      	cmp	r3, r5
 800b1fa:	dcf2      	bgt.n	800b1e2 <_printf_i+0x212>
 800b1fc:	e7eb      	b.n	800b1d6 <_printf_i+0x206>
 800b1fe:	2500      	movs	r5, #0
 800b200:	f104 0619 	add.w	r6, r4, #25
 800b204:	e7f5      	b.n	800b1f2 <_printf_i+0x222>
 800b206:	bf00      	nop
 800b208:	0800ea26 	.word	0x0800ea26
 800b20c:	0800ea37 	.word	0x0800ea37

0800b210 <std>:
 800b210:	2300      	movs	r3, #0
 800b212:	b510      	push	{r4, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	e9c0 3300 	strd	r3, r3, [r0]
 800b21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b21e:	6083      	str	r3, [r0, #8]
 800b220:	8181      	strh	r1, [r0, #12]
 800b222:	6643      	str	r3, [r0, #100]	@ 0x64
 800b224:	81c2      	strh	r2, [r0, #14]
 800b226:	6183      	str	r3, [r0, #24]
 800b228:	4619      	mov	r1, r3
 800b22a:	2208      	movs	r2, #8
 800b22c:	305c      	adds	r0, #92	@ 0x5c
 800b22e:	f000 f8f4 	bl	800b41a <memset>
 800b232:	4b0d      	ldr	r3, [pc, #52]	@ (800b268 <std+0x58>)
 800b234:	6263      	str	r3, [r4, #36]	@ 0x24
 800b236:	4b0d      	ldr	r3, [pc, #52]	@ (800b26c <std+0x5c>)
 800b238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b23a:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <std+0x60>)
 800b23c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b23e:	4b0d      	ldr	r3, [pc, #52]	@ (800b274 <std+0x64>)
 800b240:	6323      	str	r3, [r4, #48]	@ 0x30
 800b242:	4b0d      	ldr	r3, [pc, #52]	@ (800b278 <std+0x68>)
 800b244:	6224      	str	r4, [r4, #32]
 800b246:	429c      	cmp	r4, r3
 800b248:	d006      	beq.n	800b258 <std+0x48>
 800b24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b24e:	4294      	cmp	r4, r2
 800b250:	d002      	beq.n	800b258 <std+0x48>
 800b252:	33d0      	adds	r3, #208	@ 0xd0
 800b254:	429c      	cmp	r4, r3
 800b256:	d105      	bne.n	800b264 <std+0x54>
 800b258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b260:	f000 b958 	b.w	800b514 <__retarget_lock_init_recursive>
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	0800b395 	.word	0x0800b395
 800b26c:	0800b3b7 	.word	0x0800b3b7
 800b270:	0800b3ef 	.word	0x0800b3ef
 800b274:	0800b413 	.word	0x0800b413
 800b278:	20000ecc 	.word	0x20000ecc

0800b27c <stdio_exit_handler>:
 800b27c:	4a02      	ldr	r2, [pc, #8]	@ (800b288 <stdio_exit_handler+0xc>)
 800b27e:	4903      	ldr	r1, [pc, #12]	@ (800b28c <stdio_exit_handler+0x10>)
 800b280:	4803      	ldr	r0, [pc, #12]	@ (800b290 <stdio_exit_handler+0x14>)
 800b282:	f000 b869 	b.w	800b358 <_fwalk_sglue>
 800b286:	bf00      	nop
 800b288:	2000000c 	.word	0x2000000c
 800b28c:	0800ce71 	.word	0x0800ce71
 800b290:	2000001c 	.word	0x2000001c

0800b294 <cleanup_stdio>:
 800b294:	6841      	ldr	r1, [r0, #4]
 800b296:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c8 <cleanup_stdio+0x34>)
 800b298:	4299      	cmp	r1, r3
 800b29a:	b510      	push	{r4, lr}
 800b29c:	4604      	mov	r4, r0
 800b29e:	d001      	beq.n	800b2a4 <cleanup_stdio+0x10>
 800b2a0:	f001 fde6 	bl	800ce70 <_fflush_r>
 800b2a4:	68a1      	ldr	r1, [r4, #8]
 800b2a6:	4b09      	ldr	r3, [pc, #36]	@ (800b2cc <cleanup_stdio+0x38>)
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d002      	beq.n	800b2b2 <cleanup_stdio+0x1e>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 fddf 	bl	800ce70 <_fflush_r>
 800b2b2:	68e1      	ldr	r1, [r4, #12]
 800b2b4:	4b06      	ldr	r3, [pc, #24]	@ (800b2d0 <cleanup_stdio+0x3c>)
 800b2b6:	4299      	cmp	r1, r3
 800b2b8:	d004      	beq.n	800b2c4 <cleanup_stdio+0x30>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f001 bdd6 	b.w	800ce70 <_fflush_r>
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000ecc 	.word	0x20000ecc
 800b2cc:	20000f34 	.word	0x20000f34
 800b2d0:	20000f9c 	.word	0x20000f9c

0800b2d4 <global_stdio_init.part.0>:
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b304 <global_stdio_init.part.0+0x30>)
 800b2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800b308 <global_stdio_init.part.0+0x34>)
 800b2da:	4a0c      	ldr	r2, [pc, #48]	@ (800b30c <global_stdio_init.part.0+0x38>)
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2104      	movs	r1, #4
 800b2e4:	f7ff ff94 	bl	800b210 <std>
 800b2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	2109      	movs	r1, #9
 800b2f0:	f7ff ff8e 	bl	800b210 <std>
 800b2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2fe:	2112      	movs	r1, #18
 800b300:	f7ff bf86 	b.w	800b210 <std>
 800b304:	20001004 	.word	0x20001004
 800b308:	20000ecc 	.word	0x20000ecc
 800b30c:	0800b27d 	.word	0x0800b27d

0800b310 <__sfp_lock_acquire>:
 800b310:	4801      	ldr	r0, [pc, #4]	@ (800b318 <__sfp_lock_acquire+0x8>)
 800b312:	f000 b900 	b.w	800b516 <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	2000100d 	.word	0x2000100d

0800b31c <__sfp_lock_release>:
 800b31c:	4801      	ldr	r0, [pc, #4]	@ (800b324 <__sfp_lock_release+0x8>)
 800b31e:	f000 b8fb 	b.w	800b518 <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	2000100d 	.word	0x2000100d

0800b328 <__sinit>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4604      	mov	r4, r0
 800b32c:	f7ff fff0 	bl	800b310 <__sfp_lock_acquire>
 800b330:	6a23      	ldr	r3, [r4, #32]
 800b332:	b11b      	cbz	r3, 800b33c <__sinit+0x14>
 800b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b338:	f7ff bff0 	b.w	800b31c <__sfp_lock_release>
 800b33c:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <__sinit+0x28>)
 800b33e:	6223      	str	r3, [r4, #32]
 800b340:	4b04      	ldr	r3, [pc, #16]	@ (800b354 <__sinit+0x2c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1f5      	bne.n	800b334 <__sinit+0xc>
 800b348:	f7ff ffc4 	bl	800b2d4 <global_stdio_init.part.0>
 800b34c:	e7f2      	b.n	800b334 <__sinit+0xc>
 800b34e:	bf00      	nop
 800b350:	0800b295 	.word	0x0800b295
 800b354:	20001004 	.word	0x20001004

0800b358 <_fwalk_sglue>:
 800b358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b35c:	4607      	mov	r7, r0
 800b35e:	4688      	mov	r8, r1
 800b360:	4614      	mov	r4, r2
 800b362:	2600      	movs	r6, #0
 800b364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b368:	f1b9 0901 	subs.w	r9, r9, #1
 800b36c:	d505      	bpl.n	800b37a <_fwalk_sglue+0x22>
 800b36e:	6824      	ldr	r4, [r4, #0]
 800b370:	2c00      	cmp	r4, #0
 800b372:	d1f7      	bne.n	800b364 <_fwalk_sglue+0xc>
 800b374:	4630      	mov	r0, r6
 800b376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d907      	bls.n	800b390 <_fwalk_sglue+0x38>
 800b380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b384:	3301      	adds	r3, #1
 800b386:	d003      	beq.n	800b390 <_fwalk_sglue+0x38>
 800b388:	4629      	mov	r1, r5
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c0      	blx	r8
 800b38e:	4306      	orrs	r6, r0
 800b390:	3568      	adds	r5, #104	@ 0x68
 800b392:	e7e9      	b.n	800b368 <_fwalk_sglue+0x10>

0800b394 <__sread>:
 800b394:	b510      	push	{r4, lr}
 800b396:	460c      	mov	r4, r1
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 f86c 	bl	800b478 <_read_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	bfab      	itete	ge
 800b3a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a8:	181b      	addge	r3, r3, r0
 800b3aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ae:	bfac      	ite	ge
 800b3b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3b2:	81a3      	strhlt	r3, [r4, #12]
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <__swrite>:
 800b3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	898b      	ldrh	r3, [r1, #12]
 800b3be:	05db      	lsls	r3, r3, #23
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	d505      	bpl.n	800b3d4 <__swrite+0x1e>
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f000 f840 	bl	800b454 <_lseek_r>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	f000 b857 	b.w	800b49c <_write_r>

0800b3ee <__sseek>:
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f6:	f000 f82d 	bl	800b454 <_lseek_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	bf15      	itete	ne
 800b400:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b40a:	81a3      	strheq	r3, [r4, #12]
 800b40c:	bf18      	it	ne
 800b40e:	81a3      	strhne	r3, [r4, #12]
 800b410:	bd10      	pop	{r4, pc}

0800b412 <__sclose>:
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 b80d 	b.w	800b434 <_close_r>

0800b41a <memset>:
 800b41a:	4402      	add	r2, r0
 800b41c:	4603      	mov	r3, r0
 800b41e:	4293      	cmp	r3, r2
 800b420:	d100      	bne.n	800b424 <memset+0xa>
 800b422:	4770      	bx	lr
 800b424:	f803 1b01 	strb.w	r1, [r3], #1
 800b428:	e7f9      	b.n	800b41e <memset+0x4>
	...

0800b42c <_localeconv_r>:
 800b42c:	4800      	ldr	r0, [pc, #0]	@ (800b430 <_localeconv_r+0x4>)
 800b42e:	4770      	bx	lr
 800b430:	20000158 	.word	0x20000158

0800b434 <_close_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	@ (800b450 <_close_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f9 f96e 	bl	8004720 <_close>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_close_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_close_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	20001008 	.word	0x20001008

0800b454 <_lseek_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	@ (800b474 <_lseek_r+0x20>)
 800b458:	4604      	mov	r4, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	602a      	str	r2, [r5, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f9 f983 	bl	800476e <_lseek>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_lseek_r+0x1e>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_lseek_r+0x1e>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20001008 	.word	0x20001008

0800b478 <_read_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d07      	ldr	r5, [pc, #28]	@ (800b498 <_read_r+0x20>)
 800b47c:	4604      	mov	r4, r0
 800b47e:	4608      	mov	r0, r1
 800b480:	4611      	mov	r1, r2
 800b482:	2200      	movs	r2, #0
 800b484:	602a      	str	r2, [r5, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	f7f9 f911 	bl	80046ae <_read>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d102      	bne.n	800b496 <_read_r+0x1e>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	b103      	cbz	r3, 800b496 <_read_r+0x1e>
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	20001008 	.word	0x20001008

0800b49c <_write_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	@ (800b4bc <_write_r+0x20>)
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	4608      	mov	r0, r1
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	602a      	str	r2, [r5, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f7f9 f91c 	bl	80046e8 <_write>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_write_r+0x1e>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_write_r+0x1e>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	20001008 	.word	0x20001008

0800b4c0 <__errno>:
 800b4c0:	4b01      	ldr	r3, [pc, #4]	@ (800b4c8 <__errno+0x8>)
 800b4c2:	6818      	ldr	r0, [r3, #0]
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20000018 	.word	0x20000018

0800b4cc <__libc_init_array>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	4d0d      	ldr	r5, [pc, #52]	@ (800b504 <__libc_init_array+0x38>)
 800b4d0:	4c0d      	ldr	r4, [pc, #52]	@ (800b508 <__libc_init_array+0x3c>)
 800b4d2:	1b64      	subs	r4, r4, r5
 800b4d4:	10a4      	asrs	r4, r4, #2
 800b4d6:	2600      	movs	r6, #0
 800b4d8:	42a6      	cmp	r6, r4
 800b4da:	d109      	bne.n	800b4f0 <__libc_init_array+0x24>
 800b4dc:	4d0b      	ldr	r5, [pc, #44]	@ (800b50c <__libc_init_array+0x40>)
 800b4de:	4c0c      	ldr	r4, [pc, #48]	@ (800b510 <__libc_init_array+0x44>)
 800b4e0:	f001 fec6 	bl	800d270 <_init>
 800b4e4:	1b64      	subs	r4, r4, r5
 800b4e6:	10a4      	asrs	r4, r4, #2
 800b4e8:	2600      	movs	r6, #0
 800b4ea:	42a6      	cmp	r6, r4
 800b4ec:	d105      	bne.n	800b4fa <__libc_init_array+0x2e>
 800b4ee:	bd70      	pop	{r4, r5, r6, pc}
 800b4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4f4:	4798      	blx	r3
 800b4f6:	3601      	adds	r6, #1
 800b4f8:	e7ee      	b.n	800b4d8 <__libc_init_array+0xc>
 800b4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4fe:	4798      	blx	r3
 800b500:	3601      	adds	r6, #1
 800b502:	e7f2      	b.n	800b4ea <__libc_init_array+0x1e>
 800b504:	0800ed90 	.word	0x0800ed90
 800b508:	0800ed90 	.word	0x0800ed90
 800b50c:	0800ed90 	.word	0x0800ed90
 800b510:	0800ed98 	.word	0x0800ed98

0800b514 <__retarget_lock_init_recursive>:
 800b514:	4770      	bx	lr

0800b516 <__retarget_lock_acquire_recursive>:
 800b516:	4770      	bx	lr

0800b518 <__retarget_lock_release_recursive>:
 800b518:	4770      	bx	lr

0800b51a <memcpy>:
 800b51a:	440a      	add	r2, r1
 800b51c:	4291      	cmp	r1, r2
 800b51e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b522:	d100      	bne.n	800b526 <memcpy+0xc>
 800b524:	4770      	bx	lr
 800b526:	b510      	push	{r4, lr}
 800b528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b52c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b530:	4291      	cmp	r1, r2
 800b532:	d1f9      	bne.n	800b528 <memcpy+0xe>
 800b534:	bd10      	pop	{r4, pc}

0800b536 <quorem>:
 800b536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53a:	6903      	ldr	r3, [r0, #16]
 800b53c:	690c      	ldr	r4, [r1, #16]
 800b53e:	42a3      	cmp	r3, r4
 800b540:	4607      	mov	r7, r0
 800b542:	db7e      	blt.n	800b642 <quorem+0x10c>
 800b544:	3c01      	subs	r4, #1
 800b546:	f101 0814 	add.w	r8, r1, #20
 800b54a:	00a3      	lsls	r3, r4, #2
 800b54c:	f100 0514 	add.w	r5, r0, #20
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b55c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b560:	3301      	adds	r3, #1
 800b562:	429a      	cmp	r2, r3
 800b564:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b568:	fbb2 f6f3 	udiv	r6, r2, r3
 800b56c:	d32e      	bcc.n	800b5cc <quorem+0x96>
 800b56e:	f04f 0a00 	mov.w	sl, #0
 800b572:	46c4      	mov	ip, r8
 800b574:	46ae      	mov	lr, r5
 800b576:	46d3      	mov	fp, sl
 800b578:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b57c:	b298      	uxth	r0, r3
 800b57e:	fb06 a000 	mla	r0, r6, r0, sl
 800b582:	0c02      	lsrs	r2, r0, #16
 800b584:	0c1b      	lsrs	r3, r3, #16
 800b586:	fb06 2303 	mla	r3, r6, r3, r2
 800b58a:	f8de 2000 	ldr.w	r2, [lr]
 800b58e:	b280      	uxth	r0, r0
 800b590:	b292      	uxth	r2, r2
 800b592:	1a12      	subs	r2, r2, r0
 800b594:	445a      	add	r2, fp
 800b596:	f8de 0000 	ldr.w	r0, [lr]
 800b59a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5a8:	b292      	uxth	r2, r2
 800b5aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5ae:	45e1      	cmp	r9, ip
 800b5b0:	f84e 2b04 	str.w	r2, [lr], #4
 800b5b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5b8:	d2de      	bcs.n	800b578 <quorem+0x42>
 800b5ba:	9b00      	ldr	r3, [sp, #0]
 800b5bc:	58eb      	ldr	r3, [r5, r3]
 800b5be:	b92b      	cbnz	r3, 800b5cc <quorem+0x96>
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	3b04      	subs	r3, #4
 800b5c4:	429d      	cmp	r5, r3
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	d32f      	bcc.n	800b62a <quorem+0xf4>
 800b5ca:	613c      	str	r4, [r7, #16]
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f001 f979 	bl	800c8c4 <__mcmp>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	db25      	blt.n	800b622 <quorem+0xec>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	2000      	movs	r0, #0
 800b5da:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5de:	f8d1 c000 	ldr.w	ip, [r1]
 800b5e2:	fa1f fe82 	uxth.w	lr, r2
 800b5e6:	fa1f f38c 	uxth.w	r3, ip
 800b5ea:	eba3 030e 	sub.w	r3, r3, lr
 800b5ee:	4403      	add	r3, r0
 800b5f0:	0c12      	lsrs	r2, r2, #16
 800b5f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b600:	45c1      	cmp	r9, r8
 800b602:	f841 3b04 	str.w	r3, [r1], #4
 800b606:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b60a:	d2e6      	bcs.n	800b5da <quorem+0xa4>
 800b60c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b614:	b922      	cbnz	r2, 800b620 <quorem+0xea>
 800b616:	3b04      	subs	r3, #4
 800b618:	429d      	cmp	r5, r3
 800b61a:	461a      	mov	r2, r3
 800b61c:	d30b      	bcc.n	800b636 <quorem+0x100>
 800b61e:	613c      	str	r4, [r7, #16]
 800b620:	3601      	adds	r6, #1
 800b622:	4630      	mov	r0, r6
 800b624:	b003      	add	sp, #12
 800b626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	3b04      	subs	r3, #4
 800b62e:	2a00      	cmp	r2, #0
 800b630:	d1cb      	bne.n	800b5ca <quorem+0x94>
 800b632:	3c01      	subs	r4, #1
 800b634:	e7c6      	b.n	800b5c4 <quorem+0x8e>
 800b636:	6812      	ldr	r2, [r2, #0]
 800b638:	3b04      	subs	r3, #4
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	d1ef      	bne.n	800b61e <quorem+0xe8>
 800b63e:	3c01      	subs	r4, #1
 800b640:	e7ea      	b.n	800b618 <quorem+0xe2>
 800b642:	2000      	movs	r0, #0
 800b644:	e7ee      	b.n	800b624 <quorem+0xee>
	...

0800b648 <_dtoa_r>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	69c7      	ldr	r7, [r0, #28]
 800b64e:	b099      	sub	sp, #100	@ 0x64
 800b650:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b654:	ec55 4b10 	vmov	r4, r5, d0
 800b658:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b65a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b65c:	4683      	mov	fp, r0
 800b65e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b660:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b662:	b97f      	cbnz	r7, 800b684 <_dtoa_r+0x3c>
 800b664:	2010      	movs	r0, #16
 800b666:	f000 fdfd 	bl	800c264 <malloc>
 800b66a:	4602      	mov	r2, r0
 800b66c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b670:	b920      	cbnz	r0, 800b67c <_dtoa_r+0x34>
 800b672:	4ba7      	ldr	r3, [pc, #668]	@ (800b910 <_dtoa_r+0x2c8>)
 800b674:	21ef      	movs	r1, #239	@ 0xef
 800b676:	48a7      	ldr	r0, [pc, #668]	@ (800b914 <_dtoa_r+0x2cc>)
 800b678:	f001 fcc6 	bl	800d008 <__assert_func>
 800b67c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b680:	6007      	str	r7, [r0, #0]
 800b682:	60c7      	str	r7, [r0, #12]
 800b684:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b688:	6819      	ldr	r1, [r3, #0]
 800b68a:	b159      	cbz	r1, 800b6a4 <_dtoa_r+0x5c>
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	604a      	str	r2, [r1, #4]
 800b690:	2301      	movs	r3, #1
 800b692:	4093      	lsls	r3, r2
 800b694:	608b      	str	r3, [r1, #8]
 800b696:	4658      	mov	r0, fp
 800b698:	f000 feda 	bl	800c450 <_Bfree>
 800b69c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	1e2b      	subs	r3, r5, #0
 800b6a6:	bfb9      	ittee	lt
 800b6a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6ac:	9303      	strlt	r3, [sp, #12]
 800b6ae:	2300      	movge	r3, #0
 800b6b0:	6033      	strge	r3, [r6, #0]
 800b6b2:	9f03      	ldr	r7, [sp, #12]
 800b6b4:	4b98      	ldr	r3, [pc, #608]	@ (800b918 <_dtoa_r+0x2d0>)
 800b6b6:	bfbc      	itt	lt
 800b6b8:	2201      	movlt	r2, #1
 800b6ba:	6032      	strlt	r2, [r6, #0]
 800b6bc:	43bb      	bics	r3, r7
 800b6be:	d112      	bne.n	800b6e6 <_dtoa_r+0x9e>
 800b6c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6cc:	4323      	orrs	r3, r4
 800b6ce:	f000 854d 	beq.w	800c16c <_dtoa_r+0xb24>
 800b6d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b92c <_dtoa_r+0x2e4>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 854f 	beq.w	800c17c <_dtoa_r+0xb34>
 800b6de:	f10a 0303 	add.w	r3, sl, #3
 800b6e2:	f000 bd49 	b.w	800c178 <_dtoa_r+0xb30>
 800b6e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	ec51 0b17 	vmov	r0, r1, d7
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b6f6:	f7f5 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	b158      	cbz	r0, 800b716 <_dtoa_r+0xce>
 800b6fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b700:	2301      	movs	r3, #1
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b706:	b113      	cbz	r3, 800b70e <_dtoa_r+0xc6>
 800b708:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b70a:	4b84      	ldr	r3, [pc, #528]	@ (800b91c <_dtoa_r+0x2d4>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b930 <_dtoa_r+0x2e8>
 800b712:	f000 bd33 	b.w	800c17c <_dtoa_r+0xb34>
 800b716:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b71a:	aa16      	add	r2, sp, #88	@ 0x58
 800b71c:	a917      	add	r1, sp, #92	@ 0x5c
 800b71e:	4658      	mov	r0, fp
 800b720:	f001 f980 	bl	800ca24 <__d2b>
 800b724:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b728:	4681      	mov	r9, r0
 800b72a:	2e00      	cmp	r6, #0
 800b72c:	d077      	beq.n	800b81e <_dtoa_r+0x1d6>
 800b72e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b730:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b73c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b740:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b744:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b748:	4619      	mov	r1, r3
 800b74a:	2200      	movs	r2, #0
 800b74c:	4b74      	ldr	r3, [pc, #464]	@ (800b920 <_dtoa_r+0x2d8>)
 800b74e:	f7f4 fd9b 	bl	8000288 <__aeabi_dsub>
 800b752:	a369      	add	r3, pc, #420	@ (adr r3, 800b8f8 <_dtoa_r+0x2b0>)
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f7f4 ff4e 	bl	80005f8 <__aeabi_dmul>
 800b75c:	a368      	add	r3, pc, #416	@ (adr r3, 800b900 <_dtoa_r+0x2b8>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fd93 	bl	800028c <__adddf3>
 800b766:	4604      	mov	r4, r0
 800b768:	4630      	mov	r0, r6
 800b76a:	460d      	mov	r5, r1
 800b76c:	f7f4 feda 	bl	8000524 <__aeabi_i2d>
 800b770:	a365      	add	r3, pc, #404	@ (adr r3, 800b908 <_dtoa_r+0x2c0>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 ff3f 	bl	80005f8 <__aeabi_dmul>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4620      	mov	r0, r4
 800b780:	4629      	mov	r1, r5
 800b782:	f7f4 fd83 	bl	800028c <__adddf3>
 800b786:	4604      	mov	r4, r0
 800b788:	460d      	mov	r5, r1
 800b78a:	f7f5 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800b78e:	2200      	movs	r2, #0
 800b790:	4607      	mov	r7, r0
 800b792:	2300      	movs	r3, #0
 800b794:	4620      	mov	r0, r4
 800b796:	4629      	mov	r1, r5
 800b798:	f7f5 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800b79c:	b140      	cbz	r0, 800b7b0 <_dtoa_r+0x168>
 800b79e:	4638      	mov	r0, r7
 800b7a0:	f7f4 fec0 	bl	8000524 <__aeabi_i2d>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	f7f5 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7ac:	b900      	cbnz	r0, 800b7b0 <_dtoa_r+0x168>
 800b7ae:	3f01      	subs	r7, #1
 800b7b0:	2f16      	cmp	r7, #22
 800b7b2:	d851      	bhi.n	800b858 <_dtoa_r+0x210>
 800b7b4:	4b5b      	ldr	r3, [pc, #364]	@ (800b924 <_dtoa_r+0x2dc>)
 800b7b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7c2:	f7f5 f98b 	bl	8000adc <__aeabi_dcmplt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d048      	beq.n	800b85c <_dtoa_r+0x214>
 800b7ca:	3f01      	subs	r7, #1
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800b7d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7d2:	1b9b      	subs	r3, r3, r6
 800b7d4:	1e5a      	subs	r2, r3, #1
 800b7d6:	bf44      	itt	mi
 800b7d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b7dc:	2300      	movmi	r3, #0
 800b7de:	9208      	str	r2, [sp, #32]
 800b7e0:	bf54      	ite	pl
 800b7e2:	f04f 0800 	movpl.w	r8, #0
 800b7e6:	9308      	strmi	r3, [sp, #32]
 800b7e8:	2f00      	cmp	r7, #0
 800b7ea:	db39      	blt.n	800b860 <_dtoa_r+0x218>
 800b7ec:	9b08      	ldr	r3, [sp, #32]
 800b7ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b7f0:	443b      	add	r3, r7
 800b7f2:	9308      	str	r3, [sp, #32]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	d864      	bhi.n	800b8c8 <_dtoa_r+0x280>
 800b7fe:	2b05      	cmp	r3, #5
 800b800:	bfc4      	itt	gt
 800b802:	3b04      	subgt	r3, #4
 800b804:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	f1a3 0302 	sub.w	r3, r3, #2
 800b80c:	bfcc      	ite	gt
 800b80e:	2400      	movgt	r4, #0
 800b810:	2401      	movle	r4, #1
 800b812:	2b03      	cmp	r3, #3
 800b814:	d863      	bhi.n	800b8de <_dtoa_r+0x296>
 800b816:	e8df f003 	tbb	[pc, r3]
 800b81a:	372a      	.short	0x372a
 800b81c:	5535      	.short	0x5535
 800b81e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b822:	441e      	add	r6, r3
 800b824:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b828:	2b20      	cmp	r3, #32
 800b82a:	bfc1      	itttt	gt
 800b82c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b830:	409f      	lslgt	r7, r3
 800b832:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b836:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b83a:	bfd6      	itet	le
 800b83c:	f1c3 0320 	rsble	r3, r3, #32
 800b840:	ea47 0003 	orrgt.w	r0, r7, r3
 800b844:	fa04 f003 	lslle.w	r0, r4, r3
 800b848:	f7f4 fe5c 	bl	8000504 <__aeabi_ui2d>
 800b84c:	2201      	movs	r2, #1
 800b84e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b852:	3e01      	subs	r6, #1
 800b854:	9214      	str	r2, [sp, #80]	@ 0x50
 800b856:	e777      	b.n	800b748 <_dtoa_r+0x100>
 800b858:	2301      	movs	r3, #1
 800b85a:	e7b8      	b.n	800b7ce <_dtoa_r+0x186>
 800b85c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b85e:	e7b7      	b.n	800b7d0 <_dtoa_r+0x188>
 800b860:	427b      	negs	r3, r7
 800b862:	930a      	str	r3, [sp, #40]	@ 0x28
 800b864:	2300      	movs	r3, #0
 800b866:	eba8 0807 	sub.w	r8, r8, r7
 800b86a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b86c:	e7c4      	b.n	800b7f8 <_dtoa_r+0x1b0>
 800b86e:	2300      	movs	r3, #0
 800b870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b874:	2b00      	cmp	r3, #0
 800b876:	dc35      	bgt.n	800b8e4 <_dtoa_r+0x29c>
 800b878:	2301      	movs	r3, #1
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	9307      	str	r3, [sp, #28]
 800b87e:	461a      	mov	r2, r3
 800b880:	920e      	str	r2, [sp, #56]	@ 0x38
 800b882:	e00b      	b.n	800b89c <_dtoa_r+0x254>
 800b884:	2301      	movs	r3, #1
 800b886:	e7f3      	b.n	800b870 <_dtoa_r+0x228>
 800b888:	2300      	movs	r3, #0
 800b88a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b88e:	18fb      	adds	r3, r7, r3
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	3301      	adds	r3, #1
 800b894:	2b01      	cmp	r3, #1
 800b896:	9307      	str	r3, [sp, #28]
 800b898:	bfb8      	it	lt
 800b89a:	2301      	movlt	r3, #1
 800b89c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	f102 0514 	add.w	r5, r2, #20
 800b8a8:	429d      	cmp	r5, r3
 800b8aa:	d91f      	bls.n	800b8ec <_dtoa_r+0x2a4>
 800b8ac:	6041      	str	r1, [r0, #4]
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	f000 fd8e 	bl	800c3d0 <_Balloc>
 800b8b4:	4682      	mov	sl, r0
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d13c      	bne.n	800b934 <_dtoa_r+0x2ec>
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b928 <_dtoa_r+0x2e0>)
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8c2:	e6d8      	b.n	800b676 <_dtoa_r+0x2e>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e7e0      	b.n	800b88a <_dtoa_r+0x242>
 800b8c8:	2401      	movs	r4, #1
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	9307      	str	r3, [sp, #28]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	2312      	movs	r3, #18
 800b8dc:	e7d0      	b.n	800b880 <_dtoa_r+0x238>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8e2:	e7f5      	b.n	800b8d0 <_dtoa_r+0x288>
 800b8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	9307      	str	r3, [sp, #28]
 800b8ea:	e7d7      	b.n	800b89c <_dtoa_r+0x254>
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	0052      	lsls	r2, r2, #1
 800b8f0:	e7d8      	b.n	800b8a4 <_dtoa_r+0x25c>
 800b8f2:	bf00      	nop
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	636f4361 	.word	0x636f4361
 800b8fc:	3fd287a7 	.word	0x3fd287a7
 800b900:	8b60c8b3 	.word	0x8b60c8b3
 800b904:	3fc68a28 	.word	0x3fc68a28
 800b908:	509f79fb 	.word	0x509f79fb
 800b90c:	3fd34413 	.word	0x3fd34413
 800b910:	0800ea55 	.word	0x0800ea55
 800b914:	0800ea6c 	.word	0x0800ea6c
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	0800ea25 	.word	0x0800ea25
 800b920:	3ff80000 	.word	0x3ff80000
 800b924:	0800eb68 	.word	0x0800eb68
 800b928:	0800eac4 	.word	0x0800eac4
 800b92c:	0800ea51 	.word	0x0800ea51
 800b930:	0800ea24 	.word	0x0800ea24
 800b934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b938:	6018      	str	r0, [r3, #0]
 800b93a:	9b07      	ldr	r3, [sp, #28]
 800b93c:	2b0e      	cmp	r3, #14
 800b93e:	f200 80a4 	bhi.w	800ba8a <_dtoa_r+0x442>
 800b942:	2c00      	cmp	r4, #0
 800b944:	f000 80a1 	beq.w	800ba8a <_dtoa_r+0x442>
 800b948:	2f00      	cmp	r7, #0
 800b94a:	dd33      	ble.n	800b9b4 <_dtoa_r+0x36c>
 800b94c:	4bad      	ldr	r3, [pc, #692]	@ (800bc04 <_dtoa_r+0x5bc>)
 800b94e:	f007 020f 	and.w	r2, r7, #15
 800b952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b956:	ed93 7b00 	vldr	d7, [r3]
 800b95a:	05f8      	lsls	r0, r7, #23
 800b95c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b960:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b964:	d516      	bpl.n	800b994 <_dtoa_r+0x34c>
 800b966:	4ba8      	ldr	r3, [pc, #672]	@ (800bc08 <_dtoa_r+0x5c0>)
 800b968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b96c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b970:	f7f4 ff6c 	bl	800084c <__aeabi_ddiv>
 800b974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b978:	f004 040f 	and.w	r4, r4, #15
 800b97c:	2603      	movs	r6, #3
 800b97e:	4da2      	ldr	r5, [pc, #648]	@ (800bc08 <_dtoa_r+0x5c0>)
 800b980:	b954      	cbnz	r4, 800b998 <_dtoa_r+0x350>
 800b982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b98a:	f7f4 ff5f 	bl	800084c <__aeabi_ddiv>
 800b98e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b992:	e028      	b.n	800b9e6 <_dtoa_r+0x39e>
 800b994:	2602      	movs	r6, #2
 800b996:	e7f2      	b.n	800b97e <_dtoa_r+0x336>
 800b998:	07e1      	lsls	r1, r4, #31
 800b99a:	d508      	bpl.n	800b9ae <_dtoa_r+0x366>
 800b99c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9a4:	f7f4 fe28 	bl	80005f8 <__aeabi_dmul>
 800b9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9ac:	3601      	adds	r6, #1
 800b9ae:	1064      	asrs	r4, r4, #1
 800b9b0:	3508      	adds	r5, #8
 800b9b2:	e7e5      	b.n	800b980 <_dtoa_r+0x338>
 800b9b4:	f000 80d2 	beq.w	800bb5c <_dtoa_r+0x514>
 800b9b8:	427c      	negs	r4, r7
 800b9ba:	4b92      	ldr	r3, [pc, #584]	@ (800bc04 <_dtoa_r+0x5bc>)
 800b9bc:	4d92      	ldr	r5, [pc, #584]	@ (800bc08 <_dtoa_r+0x5c0>)
 800b9be:	f004 020f 	and.w	r2, r4, #15
 800b9c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9ce:	f7f4 fe13 	bl	80005f8 <__aeabi_dmul>
 800b9d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d6:	1124      	asrs	r4, r4, #4
 800b9d8:	2300      	movs	r3, #0
 800b9da:	2602      	movs	r6, #2
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	f040 80b2 	bne.w	800bb46 <_dtoa_r+0x4fe>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1d3      	bne.n	800b98e <_dtoa_r+0x346>
 800b9e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 80b7 	beq.w	800bb60 <_dtoa_r+0x518>
 800b9f2:	4b86      	ldr	r3, [pc, #536]	@ (800bc0c <_dtoa_r+0x5c4>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f7f5 f86f 	bl	8000adc <__aeabi_dcmplt>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	f000 80ae 	beq.w	800bb60 <_dtoa_r+0x518>
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 80aa 	beq.w	800bb60 <_dtoa_r+0x518>
 800ba0c:	9b00      	ldr	r3, [sp, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	dd37      	ble.n	800ba82 <_dtoa_r+0x43a>
 800ba12:	1e7b      	subs	r3, r7, #1
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	4620      	mov	r0, r4
 800ba18:	4b7d      	ldr	r3, [pc, #500]	@ (800bc10 <_dtoa_r+0x5c8>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	f7f4 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ba22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba26:	9c00      	ldr	r4, [sp, #0]
 800ba28:	3601      	adds	r6, #1
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7f4 fd7a 	bl	8000524 <__aeabi_i2d>
 800ba30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba34:	f7f4 fde0 	bl	80005f8 <__aeabi_dmul>
 800ba38:	4b76      	ldr	r3, [pc, #472]	@ (800bc14 <_dtoa_r+0x5cc>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f7f4 fc26 	bl	800028c <__adddf3>
 800ba40:	4605      	mov	r5, r0
 800ba42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	f040 808d 	bne.w	800bb66 <_dtoa_r+0x51e>
 800ba4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba50:	4b71      	ldr	r3, [pc, #452]	@ (800bc18 <_dtoa_r+0x5d0>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	f7f4 fc18 	bl	8000288 <__aeabi_dsub>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba60:	462a      	mov	r2, r5
 800ba62:	4633      	mov	r3, r6
 800ba64:	f7f5 f858 	bl	8000b18 <__aeabi_dcmpgt>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	f040 828b 	bne.w	800bf84 <_dtoa_r+0x93c>
 800ba6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba72:	462a      	mov	r2, r5
 800ba74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba78:	f7f5 f830 	bl	8000adc <__aeabi_dcmplt>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f040 8128 	bne.w	800bcd2 <_dtoa_r+0x68a>
 800ba82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f2c0 815a 	blt.w	800bd46 <_dtoa_r+0x6fe>
 800ba92:	2f0e      	cmp	r7, #14
 800ba94:	f300 8157 	bgt.w	800bd46 <_dtoa_r+0x6fe>
 800ba98:	4b5a      	ldr	r3, [pc, #360]	@ (800bc04 <_dtoa_r+0x5bc>)
 800ba9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba9e:	ed93 7b00 	vldr	d7, [r3]
 800baa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	ed8d 7b00 	vstr	d7, [sp]
 800baaa:	da03      	bge.n	800bab4 <_dtoa_r+0x46c>
 800baac:	9b07      	ldr	r3, [sp, #28]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f340 8101 	ble.w	800bcb6 <_dtoa_r+0x66e>
 800bab4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bab8:	4656      	mov	r6, sl
 800baba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800babe:	4620      	mov	r0, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7f4 fec3 	bl	800084c <__aeabi_ddiv>
 800bac6:	f7f5 f847 	bl	8000b58 <__aeabi_d2iz>
 800baca:	4680      	mov	r8, r0
 800bacc:	f7f4 fd2a 	bl	8000524 <__aeabi_i2d>
 800bad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bad4:	f7f4 fd90 	bl	80005f8 <__aeabi_dmul>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bae4:	f7f4 fbd0 	bl	8000288 <__aeabi_dsub>
 800bae8:	f806 4b01 	strb.w	r4, [r6], #1
 800baec:	9d07      	ldr	r5, [sp, #28]
 800baee:	eba6 040a 	sub.w	r4, r6, sl
 800baf2:	42a5      	cmp	r5, r4
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	f040 8117 	bne.w	800bd2a <_dtoa_r+0x6e2>
 800bafc:	f7f4 fbc6 	bl	800028c <__adddf3>
 800bb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	f7f5 f806 	bl	8000b18 <__aeabi_dcmpgt>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	f040 80f9 	bne.w	800bd04 <_dtoa_r+0x6bc>
 800bb12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f4 ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb1e:	b118      	cbz	r0, 800bb28 <_dtoa_r+0x4e0>
 800bb20:	f018 0f01 	tst.w	r8, #1
 800bb24:	f040 80ee 	bne.w	800bd04 <_dtoa_r+0x6bc>
 800bb28:	4649      	mov	r1, r9
 800bb2a:	4658      	mov	r0, fp
 800bb2c:	f000 fc90 	bl	800c450 <_Bfree>
 800bb30:	2300      	movs	r3, #0
 800bb32:	7033      	strb	r3, [r6, #0]
 800bb34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb36:	3701      	adds	r7, #1
 800bb38:	601f      	str	r7, [r3, #0]
 800bb3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 831d 	beq.w	800c17c <_dtoa_r+0xb34>
 800bb42:	601e      	str	r6, [r3, #0]
 800bb44:	e31a      	b.n	800c17c <_dtoa_r+0xb34>
 800bb46:	07e2      	lsls	r2, r4, #31
 800bb48:	d505      	bpl.n	800bb56 <_dtoa_r+0x50e>
 800bb4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	3601      	adds	r6, #1
 800bb54:	2301      	movs	r3, #1
 800bb56:	1064      	asrs	r4, r4, #1
 800bb58:	3508      	adds	r5, #8
 800bb5a:	e73f      	b.n	800b9dc <_dtoa_r+0x394>
 800bb5c:	2602      	movs	r6, #2
 800bb5e:	e742      	b.n	800b9e6 <_dtoa_r+0x39e>
 800bb60:	9c07      	ldr	r4, [sp, #28]
 800bb62:	9704      	str	r7, [sp, #16]
 800bb64:	e761      	b.n	800ba2a <_dtoa_r+0x3e2>
 800bb66:	4b27      	ldr	r3, [pc, #156]	@ (800bc04 <_dtoa_r+0x5bc>)
 800bb68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb72:	4454      	add	r4, sl
 800bb74:	2900      	cmp	r1, #0
 800bb76:	d053      	beq.n	800bc20 <_dtoa_r+0x5d8>
 800bb78:	4928      	ldr	r1, [pc, #160]	@ (800bc1c <_dtoa_r+0x5d4>)
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f7f4 fe66 	bl	800084c <__aeabi_ddiv>
 800bb80:	4633      	mov	r3, r6
 800bb82:	462a      	mov	r2, r5
 800bb84:	f7f4 fb80 	bl	8000288 <__aeabi_dsub>
 800bb88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb8c:	4656      	mov	r6, sl
 800bb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb92:	f7f4 ffe1 	bl	8000b58 <__aeabi_d2iz>
 800bb96:	4605      	mov	r5, r0
 800bb98:	f7f4 fcc4 	bl	8000524 <__aeabi_i2d>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba4:	f7f4 fb70 	bl	8000288 <__aeabi_dsub>
 800bba8:	3530      	adds	r5, #48	@ 0x30
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbb2:	f806 5b01 	strb.w	r5, [r6], #1
 800bbb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbba:	f7f4 ff8f 	bl	8000adc <__aeabi_dcmplt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d171      	bne.n	800bca6 <_dtoa_r+0x65e>
 800bbc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbc6:	4911      	ldr	r1, [pc, #68]	@ (800bc0c <_dtoa_r+0x5c4>)
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f7f4 fb5d 	bl	8000288 <__aeabi_dsub>
 800bbce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbd2:	f7f4 ff83 	bl	8000adc <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f040 8095 	bne.w	800bd06 <_dtoa_r+0x6be>
 800bbdc:	42a6      	cmp	r6, r4
 800bbde:	f43f af50 	beq.w	800ba82 <_dtoa_r+0x43a>
 800bbe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc10 <_dtoa_r+0x5c8>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f7f4 fd05 	bl	80005f8 <__aeabi_dmul>
 800bbee:	4b08      	ldr	r3, [pc, #32]	@ (800bc10 <_dtoa_r+0x5c8>)
 800bbf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbfa:	f7f4 fcfd 	bl	80005f8 <__aeabi_dmul>
 800bbfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc02:	e7c4      	b.n	800bb8e <_dtoa_r+0x546>
 800bc04:	0800eb68 	.word	0x0800eb68
 800bc08:	0800eb40 	.word	0x0800eb40
 800bc0c:	3ff00000 	.word	0x3ff00000
 800bc10:	40240000 	.word	0x40240000
 800bc14:	401c0000 	.word	0x401c0000
 800bc18:	40140000 	.word	0x40140000
 800bc1c:	3fe00000 	.word	0x3fe00000
 800bc20:	4631      	mov	r1, r6
 800bc22:	4628      	mov	r0, r5
 800bc24:	f7f4 fce8 	bl	80005f8 <__aeabi_dmul>
 800bc28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc2c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc2e:	4656      	mov	r6, sl
 800bc30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc34:	f7f4 ff90 	bl	8000b58 <__aeabi_d2iz>
 800bc38:	4605      	mov	r5, r0
 800bc3a:	f7f4 fc73 	bl	8000524 <__aeabi_i2d>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc46:	f7f4 fb1f 	bl	8000288 <__aeabi_dsub>
 800bc4a:	3530      	adds	r5, #48	@ 0x30
 800bc4c:	f806 5b01 	strb.w	r5, [r6], #1
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	42a6      	cmp	r6, r4
 800bc56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc5a:	f04f 0200 	mov.w	r2, #0
 800bc5e:	d124      	bne.n	800bcaa <_dtoa_r+0x662>
 800bc60:	4bac      	ldr	r3, [pc, #688]	@ (800bf14 <_dtoa_r+0x8cc>)
 800bc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc66:	f7f4 fb11 	bl	800028c <__adddf3>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc72:	f7f4 ff51 	bl	8000b18 <__aeabi_dcmpgt>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d145      	bne.n	800bd06 <_dtoa_r+0x6be>
 800bc7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc7e:	49a5      	ldr	r1, [pc, #660]	@ (800bf14 <_dtoa_r+0x8cc>)
 800bc80:	2000      	movs	r0, #0
 800bc82:	f7f4 fb01 	bl	8000288 <__aeabi_dsub>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc8e:	f7f4 ff25 	bl	8000adc <__aeabi_dcmplt>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f43f aef5 	beq.w	800ba82 <_dtoa_r+0x43a>
 800bc98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bc9a:	1e73      	subs	r3, r6, #1
 800bc9c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bca2:	2b30      	cmp	r3, #48	@ 0x30
 800bca4:	d0f8      	beq.n	800bc98 <_dtoa_r+0x650>
 800bca6:	9f04      	ldr	r7, [sp, #16]
 800bca8:	e73e      	b.n	800bb28 <_dtoa_r+0x4e0>
 800bcaa:	4b9b      	ldr	r3, [pc, #620]	@ (800bf18 <_dtoa_r+0x8d0>)
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb4:	e7bc      	b.n	800bc30 <_dtoa_r+0x5e8>
 800bcb6:	d10c      	bne.n	800bcd2 <_dtoa_r+0x68a>
 800bcb8:	4b98      	ldr	r3, [pc, #608]	@ (800bf1c <_dtoa_r+0x8d4>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc0:	f7f4 fc9a 	bl	80005f8 <__aeabi_dmul>
 800bcc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcc8:	f7f4 ff1c 	bl	8000b04 <__aeabi_dcmpge>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	f000 8157 	beq.w	800bf80 <_dtoa_r+0x938>
 800bcd2:	2400      	movs	r4, #0
 800bcd4:	4625      	mov	r5, r4
 800bcd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd8:	43db      	mvns	r3, r3
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	4656      	mov	r6, sl
 800bcde:	2700      	movs	r7, #0
 800bce0:	4621      	mov	r1, r4
 800bce2:	4658      	mov	r0, fp
 800bce4:	f000 fbb4 	bl	800c450 <_Bfree>
 800bce8:	2d00      	cmp	r5, #0
 800bcea:	d0dc      	beq.n	800bca6 <_dtoa_r+0x65e>
 800bcec:	b12f      	cbz	r7, 800bcfa <_dtoa_r+0x6b2>
 800bcee:	42af      	cmp	r7, r5
 800bcf0:	d003      	beq.n	800bcfa <_dtoa_r+0x6b2>
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	4658      	mov	r0, fp
 800bcf6:	f000 fbab 	bl	800c450 <_Bfree>
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	4658      	mov	r0, fp
 800bcfe:	f000 fba7 	bl	800c450 <_Bfree>
 800bd02:	e7d0      	b.n	800bca6 <_dtoa_r+0x65e>
 800bd04:	9704      	str	r7, [sp, #16]
 800bd06:	4633      	mov	r3, r6
 800bd08:	461e      	mov	r6, r3
 800bd0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd0e:	2a39      	cmp	r2, #57	@ 0x39
 800bd10:	d107      	bne.n	800bd22 <_dtoa_r+0x6da>
 800bd12:	459a      	cmp	sl, r3
 800bd14:	d1f8      	bne.n	800bd08 <_dtoa_r+0x6c0>
 800bd16:	9a04      	ldr	r2, [sp, #16]
 800bd18:	3201      	adds	r2, #1
 800bd1a:	9204      	str	r2, [sp, #16]
 800bd1c:	2230      	movs	r2, #48	@ 0x30
 800bd1e:	f88a 2000 	strb.w	r2, [sl]
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	3201      	adds	r2, #1
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	e7bd      	b.n	800bca6 <_dtoa_r+0x65e>
 800bd2a:	4b7b      	ldr	r3, [pc, #492]	@ (800bf18 <_dtoa_r+0x8d0>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	2200      	movs	r2, #0
 800bd34:	2300      	movs	r3, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	f7f4 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f aebb 	beq.w	800baba <_dtoa_r+0x472>
 800bd44:	e6f0      	b.n	800bb28 <_dtoa_r+0x4e0>
 800bd46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	f000 80db 	beq.w	800bf04 <_dtoa_r+0x8bc>
 800bd4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd50:	2a01      	cmp	r2, #1
 800bd52:	f300 80bf 	bgt.w	800bed4 <_dtoa_r+0x88c>
 800bd56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	f000 80b7 	beq.w	800becc <_dtoa_r+0x884>
 800bd5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd64:	4646      	mov	r6, r8
 800bd66:	9a08      	ldr	r2, [sp, #32]
 800bd68:	2101      	movs	r1, #1
 800bd6a:	441a      	add	r2, r3
 800bd6c:	4658      	mov	r0, fp
 800bd6e:	4498      	add	r8, r3
 800bd70:	9208      	str	r2, [sp, #32]
 800bd72:	f000 fc21 	bl	800c5b8 <__i2b>
 800bd76:	4605      	mov	r5, r0
 800bd78:	b15e      	cbz	r6, 800bd92 <_dtoa_r+0x74a>
 800bd7a:	9b08      	ldr	r3, [sp, #32]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	dd08      	ble.n	800bd92 <_dtoa_r+0x74a>
 800bd80:	42b3      	cmp	r3, r6
 800bd82:	9a08      	ldr	r2, [sp, #32]
 800bd84:	bfa8      	it	ge
 800bd86:	4633      	movge	r3, r6
 800bd88:	eba8 0803 	sub.w	r8, r8, r3
 800bd8c:	1af6      	subs	r6, r6, r3
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	9308      	str	r3, [sp, #32]
 800bd92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd94:	b1f3      	cbz	r3, 800bdd4 <_dtoa_r+0x78c>
 800bd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 80b7 	beq.w	800bf0c <_dtoa_r+0x8c4>
 800bd9e:	b18c      	cbz	r4, 800bdc4 <_dtoa_r+0x77c>
 800bda0:	4629      	mov	r1, r5
 800bda2:	4622      	mov	r2, r4
 800bda4:	4658      	mov	r0, fp
 800bda6:	f000 fcc7 	bl	800c738 <__pow5mult>
 800bdaa:	464a      	mov	r2, r9
 800bdac:	4601      	mov	r1, r0
 800bdae:	4605      	mov	r5, r0
 800bdb0:	4658      	mov	r0, fp
 800bdb2:	f000 fc17 	bl	800c5e4 <__multiply>
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	9004      	str	r0, [sp, #16]
 800bdba:	4658      	mov	r0, fp
 800bdbc:	f000 fb48 	bl	800c450 <_Bfree>
 800bdc0:	9b04      	ldr	r3, [sp, #16]
 800bdc2:	4699      	mov	r9, r3
 800bdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdc6:	1b1a      	subs	r2, r3, r4
 800bdc8:	d004      	beq.n	800bdd4 <_dtoa_r+0x78c>
 800bdca:	4649      	mov	r1, r9
 800bdcc:	4658      	mov	r0, fp
 800bdce:	f000 fcb3 	bl	800c738 <__pow5mult>
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	4658      	mov	r0, fp
 800bdd8:	f000 fbee 	bl	800c5b8 <__i2b>
 800bddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdde:	4604      	mov	r4, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 81cf 	beq.w	800c184 <_dtoa_r+0xb3c>
 800bde6:	461a      	mov	r2, r3
 800bde8:	4601      	mov	r1, r0
 800bdea:	4658      	mov	r0, fp
 800bdec:	f000 fca4 	bl	800c738 <__pow5mult>
 800bdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	f300 8095 	bgt.w	800bf24 <_dtoa_r+0x8dc>
 800bdfa:	9b02      	ldr	r3, [sp, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f040 8087 	bne.w	800bf10 <_dtoa_r+0x8c8>
 800be02:	9b03      	ldr	r3, [sp, #12]
 800be04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f040 8089 	bne.w	800bf20 <_dtoa_r+0x8d8>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be14:	0d1b      	lsrs	r3, r3, #20
 800be16:	051b      	lsls	r3, r3, #20
 800be18:	b12b      	cbz	r3, 800be26 <_dtoa_r+0x7de>
 800be1a:	9b08      	ldr	r3, [sp, #32]
 800be1c:	3301      	adds	r3, #1
 800be1e:	9308      	str	r3, [sp, #32]
 800be20:	f108 0801 	add.w	r8, r8, #1
 800be24:	2301      	movs	r3, #1
 800be26:	930a      	str	r3, [sp, #40]	@ 0x28
 800be28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 81b0 	beq.w	800c190 <_dtoa_r+0xb48>
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be36:	6918      	ldr	r0, [r3, #16]
 800be38:	f000 fb72 	bl	800c520 <__hi0bits>
 800be3c:	f1c0 0020 	rsb	r0, r0, #32
 800be40:	9b08      	ldr	r3, [sp, #32]
 800be42:	4418      	add	r0, r3
 800be44:	f010 001f 	ands.w	r0, r0, #31
 800be48:	d077      	beq.n	800bf3a <_dtoa_r+0x8f2>
 800be4a:	f1c0 0320 	rsb	r3, r0, #32
 800be4e:	2b04      	cmp	r3, #4
 800be50:	dd6b      	ble.n	800bf2a <_dtoa_r+0x8e2>
 800be52:	9b08      	ldr	r3, [sp, #32]
 800be54:	f1c0 001c 	rsb	r0, r0, #28
 800be58:	4403      	add	r3, r0
 800be5a:	4480      	add	r8, r0
 800be5c:	4406      	add	r6, r0
 800be5e:	9308      	str	r3, [sp, #32]
 800be60:	f1b8 0f00 	cmp.w	r8, #0
 800be64:	dd05      	ble.n	800be72 <_dtoa_r+0x82a>
 800be66:	4649      	mov	r1, r9
 800be68:	4642      	mov	r2, r8
 800be6a:	4658      	mov	r0, fp
 800be6c:	f000 fcbe 	bl	800c7ec <__lshift>
 800be70:	4681      	mov	r9, r0
 800be72:	9b08      	ldr	r3, [sp, #32]
 800be74:	2b00      	cmp	r3, #0
 800be76:	dd05      	ble.n	800be84 <_dtoa_r+0x83c>
 800be78:	4621      	mov	r1, r4
 800be7a:	461a      	mov	r2, r3
 800be7c:	4658      	mov	r0, fp
 800be7e:	f000 fcb5 	bl	800c7ec <__lshift>
 800be82:	4604      	mov	r4, r0
 800be84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be86:	2b00      	cmp	r3, #0
 800be88:	d059      	beq.n	800bf3e <_dtoa_r+0x8f6>
 800be8a:	4621      	mov	r1, r4
 800be8c:	4648      	mov	r0, r9
 800be8e:	f000 fd19 	bl	800c8c4 <__mcmp>
 800be92:	2800      	cmp	r0, #0
 800be94:	da53      	bge.n	800bf3e <_dtoa_r+0x8f6>
 800be96:	1e7b      	subs	r3, r7, #1
 800be98:	9304      	str	r3, [sp, #16]
 800be9a:	4649      	mov	r1, r9
 800be9c:	2300      	movs	r3, #0
 800be9e:	220a      	movs	r2, #10
 800bea0:	4658      	mov	r0, fp
 800bea2:	f000 faf7 	bl	800c494 <__multadd>
 800bea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bea8:	4681      	mov	r9, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 8172 	beq.w	800c194 <_dtoa_r+0xb4c>
 800beb0:	2300      	movs	r3, #0
 800beb2:	4629      	mov	r1, r5
 800beb4:	220a      	movs	r2, #10
 800beb6:	4658      	mov	r0, fp
 800beb8:	f000 faec 	bl	800c494 <__multadd>
 800bebc:	9b00      	ldr	r3, [sp, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	4605      	mov	r5, r0
 800bec2:	dc67      	bgt.n	800bf94 <_dtoa_r+0x94c>
 800bec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	dc41      	bgt.n	800bf4e <_dtoa_r+0x906>
 800beca:	e063      	b.n	800bf94 <_dtoa_r+0x94c>
 800becc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bece:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bed2:	e746      	b.n	800bd62 <_dtoa_r+0x71a>
 800bed4:	9b07      	ldr	r3, [sp, #28]
 800bed6:	1e5c      	subs	r4, r3, #1
 800bed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beda:	42a3      	cmp	r3, r4
 800bedc:	bfbf      	itttt	lt
 800bede:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bee0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bee2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bee4:	1ae3      	sublt	r3, r4, r3
 800bee6:	bfb4      	ite	lt
 800bee8:	18d2      	addlt	r2, r2, r3
 800beea:	1b1c      	subge	r4, r3, r4
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	bfbc      	itt	lt
 800bef0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bef2:	2400      	movlt	r4, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bfb5      	itete	lt
 800bef8:	eba8 0603 	sublt.w	r6, r8, r3
 800befc:	9b07      	ldrge	r3, [sp, #28]
 800befe:	2300      	movlt	r3, #0
 800bf00:	4646      	movge	r6, r8
 800bf02:	e730      	b.n	800bd66 <_dtoa_r+0x71e>
 800bf04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf08:	4646      	mov	r6, r8
 800bf0a:	e735      	b.n	800bd78 <_dtoa_r+0x730>
 800bf0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf0e:	e75c      	b.n	800bdca <_dtoa_r+0x782>
 800bf10:	2300      	movs	r3, #0
 800bf12:	e788      	b.n	800be26 <_dtoa_r+0x7de>
 800bf14:	3fe00000 	.word	0x3fe00000
 800bf18:	40240000 	.word	0x40240000
 800bf1c:	40140000 	.word	0x40140000
 800bf20:	9b02      	ldr	r3, [sp, #8]
 800bf22:	e780      	b.n	800be26 <_dtoa_r+0x7de>
 800bf24:	2300      	movs	r3, #0
 800bf26:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf28:	e782      	b.n	800be30 <_dtoa_r+0x7e8>
 800bf2a:	d099      	beq.n	800be60 <_dtoa_r+0x818>
 800bf2c:	9a08      	ldr	r2, [sp, #32]
 800bf2e:	331c      	adds	r3, #28
 800bf30:	441a      	add	r2, r3
 800bf32:	4498      	add	r8, r3
 800bf34:	441e      	add	r6, r3
 800bf36:	9208      	str	r2, [sp, #32]
 800bf38:	e792      	b.n	800be60 <_dtoa_r+0x818>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	e7f6      	b.n	800bf2c <_dtoa_r+0x8e4>
 800bf3e:	9b07      	ldr	r3, [sp, #28]
 800bf40:	9704      	str	r7, [sp, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dc20      	bgt.n	800bf88 <_dtoa_r+0x940>
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	dd1e      	ble.n	800bf8c <_dtoa_r+0x944>
 800bf4e:	9b00      	ldr	r3, [sp, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f47f aec0 	bne.w	800bcd6 <_dtoa_r+0x68e>
 800bf56:	4621      	mov	r1, r4
 800bf58:	2205      	movs	r2, #5
 800bf5a:	4658      	mov	r0, fp
 800bf5c:	f000 fa9a 	bl	800c494 <__multadd>
 800bf60:	4601      	mov	r1, r0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4648      	mov	r0, r9
 800bf66:	f000 fcad 	bl	800c8c4 <__mcmp>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	f77f aeb3 	ble.w	800bcd6 <_dtoa_r+0x68e>
 800bf70:	4656      	mov	r6, sl
 800bf72:	2331      	movs	r3, #49	@ 0x31
 800bf74:	f806 3b01 	strb.w	r3, [r6], #1
 800bf78:	9b04      	ldr	r3, [sp, #16]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	9304      	str	r3, [sp, #16]
 800bf7e:	e6ae      	b.n	800bcde <_dtoa_r+0x696>
 800bf80:	9c07      	ldr	r4, [sp, #28]
 800bf82:	9704      	str	r7, [sp, #16]
 800bf84:	4625      	mov	r5, r4
 800bf86:	e7f3      	b.n	800bf70 <_dtoa_r+0x928>
 800bf88:	9b07      	ldr	r3, [sp, #28]
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 8104 	beq.w	800c19c <_dtoa_r+0xb54>
 800bf94:	2e00      	cmp	r6, #0
 800bf96:	dd05      	ble.n	800bfa4 <_dtoa_r+0x95c>
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	4658      	mov	r0, fp
 800bf9e:	f000 fc25 	bl	800c7ec <__lshift>
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d05a      	beq.n	800c060 <_dtoa_r+0xa18>
 800bfaa:	6869      	ldr	r1, [r5, #4]
 800bfac:	4658      	mov	r0, fp
 800bfae:	f000 fa0f 	bl	800c3d0 <_Balloc>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	b928      	cbnz	r0, 800bfc2 <_dtoa_r+0x97a>
 800bfb6:	4b84      	ldr	r3, [pc, #528]	@ (800c1c8 <_dtoa_r+0xb80>)
 800bfb8:	4602      	mov	r2, r0
 800bfba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfbe:	f7ff bb5a 	b.w	800b676 <_dtoa_r+0x2e>
 800bfc2:	692a      	ldr	r2, [r5, #16]
 800bfc4:	3202      	adds	r2, #2
 800bfc6:	0092      	lsls	r2, r2, #2
 800bfc8:	f105 010c 	add.w	r1, r5, #12
 800bfcc:	300c      	adds	r0, #12
 800bfce:	f7ff faa4 	bl	800b51a <memcpy>
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	f000 fc08 	bl	800c7ec <__lshift>
 800bfdc:	f10a 0301 	add.w	r3, sl, #1
 800bfe0:	9307      	str	r3, [sp, #28]
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	4453      	add	r3, sl
 800bfe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfe8:	9b02      	ldr	r3, [sp, #8]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	462f      	mov	r7, r5
 800bff0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff2:	4605      	mov	r5, r0
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	4621      	mov	r1, r4
 800bff8:	3b01      	subs	r3, #1
 800bffa:	4648      	mov	r0, r9
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	f7ff fa9a 	bl	800b536 <quorem>
 800c002:	4639      	mov	r1, r7
 800c004:	9002      	str	r0, [sp, #8]
 800c006:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c00a:	4648      	mov	r0, r9
 800c00c:	f000 fc5a 	bl	800c8c4 <__mcmp>
 800c010:	462a      	mov	r2, r5
 800c012:	9008      	str	r0, [sp, #32]
 800c014:	4621      	mov	r1, r4
 800c016:	4658      	mov	r0, fp
 800c018:	f000 fc70 	bl	800c8fc <__mdiff>
 800c01c:	68c2      	ldr	r2, [r0, #12]
 800c01e:	4606      	mov	r6, r0
 800c020:	bb02      	cbnz	r2, 800c064 <_dtoa_r+0xa1c>
 800c022:	4601      	mov	r1, r0
 800c024:	4648      	mov	r0, r9
 800c026:	f000 fc4d 	bl	800c8c4 <__mcmp>
 800c02a:	4602      	mov	r2, r0
 800c02c:	4631      	mov	r1, r6
 800c02e:	4658      	mov	r0, fp
 800c030:	920e      	str	r2, [sp, #56]	@ 0x38
 800c032:	f000 fa0d 	bl	800c450 <_Bfree>
 800c036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c03a:	9e07      	ldr	r6, [sp, #28]
 800c03c:	ea43 0102 	orr.w	r1, r3, r2
 800c040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c042:	4319      	orrs	r1, r3
 800c044:	d110      	bne.n	800c068 <_dtoa_r+0xa20>
 800c046:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c04a:	d029      	beq.n	800c0a0 <_dtoa_r+0xa58>
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dd02      	ble.n	800c058 <_dtoa_r+0xa10>
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c058:	9b00      	ldr	r3, [sp, #0]
 800c05a:	f883 8000 	strb.w	r8, [r3]
 800c05e:	e63f      	b.n	800bce0 <_dtoa_r+0x698>
 800c060:	4628      	mov	r0, r5
 800c062:	e7bb      	b.n	800bfdc <_dtoa_r+0x994>
 800c064:	2201      	movs	r2, #1
 800c066:	e7e1      	b.n	800c02c <_dtoa_r+0x9e4>
 800c068:	9b08      	ldr	r3, [sp, #32]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	db04      	blt.n	800c078 <_dtoa_r+0xa30>
 800c06e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c070:	430b      	orrs	r3, r1
 800c072:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c074:	430b      	orrs	r3, r1
 800c076:	d120      	bne.n	800c0ba <_dtoa_r+0xa72>
 800c078:	2a00      	cmp	r2, #0
 800c07a:	dded      	ble.n	800c058 <_dtoa_r+0xa10>
 800c07c:	4649      	mov	r1, r9
 800c07e:	2201      	movs	r2, #1
 800c080:	4658      	mov	r0, fp
 800c082:	f000 fbb3 	bl	800c7ec <__lshift>
 800c086:	4621      	mov	r1, r4
 800c088:	4681      	mov	r9, r0
 800c08a:	f000 fc1b 	bl	800c8c4 <__mcmp>
 800c08e:	2800      	cmp	r0, #0
 800c090:	dc03      	bgt.n	800c09a <_dtoa_r+0xa52>
 800c092:	d1e1      	bne.n	800c058 <_dtoa_r+0xa10>
 800c094:	f018 0f01 	tst.w	r8, #1
 800c098:	d0de      	beq.n	800c058 <_dtoa_r+0xa10>
 800c09a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c09e:	d1d8      	bne.n	800c052 <_dtoa_r+0xa0a>
 800c0a0:	9a00      	ldr	r2, [sp, #0]
 800c0a2:	2339      	movs	r3, #57	@ 0x39
 800c0a4:	7013      	strb	r3, [r2, #0]
 800c0a6:	4633      	mov	r3, r6
 800c0a8:	461e      	mov	r6, r3
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0b0:	2a39      	cmp	r2, #57	@ 0x39
 800c0b2:	d052      	beq.n	800c15a <_dtoa_r+0xb12>
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
 800c0b8:	e612      	b.n	800bce0 <_dtoa_r+0x698>
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	dd07      	ble.n	800c0ce <_dtoa_r+0xa86>
 800c0be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0c2:	d0ed      	beq.n	800c0a0 <_dtoa_r+0xa58>
 800c0c4:	9a00      	ldr	r2, [sp, #0]
 800c0c6:	f108 0301 	add.w	r3, r8, #1
 800c0ca:	7013      	strb	r3, [r2, #0]
 800c0cc:	e608      	b.n	800bce0 <_dtoa_r+0x698>
 800c0ce:	9b07      	ldr	r3, [sp, #28]
 800c0d0:	9a07      	ldr	r2, [sp, #28]
 800c0d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c0d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d028      	beq.n	800c12e <_dtoa_r+0xae6>
 800c0dc:	4649      	mov	r1, r9
 800c0de:	2300      	movs	r3, #0
 800c0e0:	220a      	movs	r2, #10
 800c0e2:	4658      	mov	r0, fp
 800c0e4:	f000 f9d6 	bl	800c494 <__multadd>
 800c0e8:	42af      	cmp	r7, r5
 800c0ea:	4681      	mov	r9, r0
 800c0ec:	f04f 0300 	mov.w	r3, #0
 800c0f0:	f04f 020a 	mov.w	r2, #10
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	4658      	mov	r0, fp
 800c0f8:	d107      	bne.n	800c10a <_dtoa_r+0xac2>
 800c0fa:	f000 f9cb 	bl	800c494 <__multadd>
 800c0fe:	4607      	mov	r7, r0
 800c100:	4605      	mov	r5, r0
 800c102:	9b07      	ldr	r3, [sp, #28]
 800c104:	3301      	adds	r3, #1
 800c106:	9307      	str	r3, [sp, #28]
 800c108:	e774      	b.n	800bff4 <_dtoa_r+0x9ac>
 800c10a:	f000 f9c3 	bl	800c494 <__multadd>
 800c10e:	4629      	mov	r1, r5
 800c110:	4607      	mov	r7, r0
 800c112:	2300      	movs	r3, #0
 800c114:	220a      	movs	r2, #10
 800c116:	4658      	mov	r0, fp
 800c118:	f000 f9bc 	bl	800c494 <__multadd>
 800c11c:	4605      	mov	r5, r0
 800c11e:	e7f0      	b.n	800c102 <_dtoa_r+0xaba>
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	bfcc      	ite	gt
 800c126:	461e      	movgt	r6, r3
 800c128:	2601      	movle	r6, #1
 800c12a:	4456      	add	r6, sl
 800c12c:	2700      	movs	r7, #0
 800c12e:	4649      	mov	r1, r9
 800c130:	2201      	movs	r2, #1
 800c132:	4658      	mov	r0, fp
 800c134:	f000 fb5a 	bl	800c7ec <__lshift>
 800c138:	4621      	mov	r1, r4
 800c13a:	4681      	mov	r9, r0
 800c13c:	f000 fbc2 	bl	800c8c4 <__mcmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	dcb0      	bgt.n	800c0a6 <_dtoa_r+0xa5e>
 800c144:	d102      	bne.n	800c14c <_dtoa_r+0xb04>
 800c146:	f018 0f01 	tst.w	r8, #1
 800c14a:	d1ac      	bne.n	800c0a6 <_dtoa_r+0xa5e>
 800c14c:	4633      	mov	r3, r6
 800c14e:	461e      	mov	r6, r3
 800c150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c154:	2a30      	cmp	r2, #48	@ 0x30
 800c156:	d0fa      	beq.n	800c14e <_dtoa_r+0xb06>
 800c158:	e5c2      	b.n	800bce0 <_dtoa_r+0x698>
 800c15a:	459a      	cmp	sl, r3
 800c15c:	d1a4      	bne.n	800c0a8 <_dtoa_r+0xa60>
 800c15e:	9b04      	ldr	r3, [sp, #16]
 800c160:	3301      	adds	r3, #1
 800c162:	9304      	str	r3, [sp, #16]
 800c164:	2331      	movs	r3, #49	@ 0x31
 800c166:	f88a 3000 	strb.w	r3, [sl]
 800c16a:	e5b9      	b.n	800bce0 <_dtoa_r+0x698>
 800c16c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c16e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c1cc <_dtoa_r+0xb84>
 800c172:	b11b      	cbz	r3, 800c17c <_dtoa_r+0xb34>
 800c174:	f10a 0308 	add.w	r3, sl, #8
 800c178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	4650      	mov	r0, sl
 800c17e:	b019      	add	sp, #100	@ 0x64
 800c180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c186:	2b01      	cmp	r3, #1
 800c188:	f77f ae37 	ble.w	800bdfa <_dtoa_r+0x7b2>
 800c18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c190:	2001      	movs	r0, #1
 800c192:	e655      	b.n	800be40 <_dtoa_r+0x7f8>
 800c194:	9b00      	ldr	r3, [sp, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f77f aed6 	ble.w	800bf48 <_dtoa_r+0x900>
 800c19c:	4656      	mov	r6, sl
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4648      	mov	r0, r9
 800c1a2:	f7ff f9c8 	bl	800b536 <quorem>
 800c1a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1aa:	f806 8b01 	strb.w	r8, [r6], #1
 800c1ae:	9b00      	ldr	r3, [sp, #0]
 800c1b0:	eba6 020a 	sub.w	r2, r6, sl
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	ddb3      	ble.n	800c120 <_dtoa_r+0xad8>
 800c1b8:	4649      	mov	r1, r9
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	220a      	movs	r2, #10
 800c1be:	4658      	mov	r0, fp
 800c1c0:	f000 f968 	bl	800c494 <__multadd>
 800c1c4:	4681      	mov	r9, r0
 800c1c6:	e7ea      	b.n	800c19e <_dtoa_r+0xb56>
 800c1c8:	0800eac4 	.word	0x0800eac4
 800c1cc:	0800ea48 	.word	0x0800ea48

0800c1d0 <_free_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	d041      	beq.n	800c25c <_free_r+0x8c>
 800c1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1dc:	1f0c      	subs	r4, r1, #4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfb8      	it	lt
 800c1e2:	18e4      	addlt	r4, r4, r3
 800c1e4:	f000 f8e8 	bl	800c3b8 <__malloc_lock>
 800c1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c260 <_free_r+0x90>)
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	b933      	cbnz	r3, 800c1fc <_free_r+0x2c>
 800c1ee:	6063      	str	r3, [r4, #4]
 800c1f0:	6014      	str	r4, [r2, #0]
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1f8:	f000 b8e4 	b.w	800c3c4 <__malloc_unlock>
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	d908      	bls.n	800c212 <_free_r+0x42>
 800c200:	6820      	ldr	r0, [r4, #0]
 800c202:	1821      	adds	r1, r4, r0
 800c204:	428b      	cmp	r3, r1
 800c206:	bf01      	itttt	eq
 800c208:	6819      	ldreq	r1, [r3, #0]
 800c20a:	685b      	ldreq	r3, [r3, #4]
 800c20c:	1809      	addeq	r1, r1, r0
 800c20e:	6021      	streq	r1, [r4, #0]
 800c210:	e7ed      	b.n	800c1ee <_free_r+0x1e>
 800c212:	461a      	mov	r2, r3
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	b10b      	cbz	r3, 800c21c <_free_r+0x4c>
 800c218:	42a3      	cmp	r3, r4
 800c21a:	d9fa      	bls.n	800c212 <_free_r+0x42>
 800c21c:	6811      	ldr	r1, [r2, #0]
 800c21e:	1850      	adds	r0, r2, r1
 800c220:	42a0      	cmp	r0, r4
 800c222:	d10b      	bne.n	800c23c <_free_r+0x6c>
 800c224:	6820      	ldr	r0, [r4, #0]
 800c226:	4401      	add	r1, r0
 800c228:	1850      	adds	r0, r2, r1
 800c22a:	4283      	cmp	r3, r0
 800c22c:	6011      	str	r1, [r2, #0]
 800c22e:	d1e0      	bne.n	800c1f2 <_free_r+0x22>
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	6053      	str	r3, [r2, #4]
 800c236:	4408      	add	r0, r1
 800c238:	6010      	str	r0, [r2, #0]
 800c23a:	e7da      	b.n	800c1f2 <_free_r+0x22>
 800c23c:	d902      	bls.n	800c244 <_free_r+0x74>
 800c23e:	230c      	movs	r3, #12
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	e7d6      	b.n	800c1f2 <_free_r+0x22>
 800c244:	6820      	ldr	r0, [r4, #0]
 800c246:	1821      	adds	r1, r4, r0
 800c248:	428b      	cmp	r3, r1
 800c24a:	bf04      	itt	eq
 800c24c:	6819      	ldreq	r1, [r3, #0]
 800c24e:	685b      	ldreq	r3, [r3, #4]
 800c250:	6063      	str	r3, [r4, #4]
 800c252:	bf04      	itt	eq
 800c254:	1809      	addeq	r1, r1, r0
 800c256:	6021      	streq	r1, [r4, #0]
 800c258:	6054      	str	r4, [r2, #4]
 800c25a:	e7ca      	b.n	800c1f2 <_free_r+0x22>
 800c25c:	bd38      	pop	{r3, r4, r5, pc}
 800c25e:	bf00      	nop
 800c260:	20001014 	.word	0x20001014

0800c264 <malloc>:
 800c264:	4b02      	ldr	r3, [pc, #8]	@ (800c270 <malloc+0xc>)
 800c266:	4601      	mov	r1, r0
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	f000 b825 	b.w	800c2b8 <_malloc_r>
 800c26e:	bf00      	nop
 800c270:	20000018 	.word	0x20000018

0800c274 <sbrk_aligned>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4e0f      	ldr	r6, [pc, #60]	@ (800c2b4 <sbrk_aligned+0x40>)
 800c278:	460c      	mov	r4, r1
 800c27a:	6831      	ldr	r1, [r6, #0]
 800c27c:	4605      	mov	r5, r0
 800c27e:	b911      	cbnz	r1, 800c286 <sbrk_aligned+0x12>
 800c280:	f000 feb2 	bl	800cfe8 <_sbrk_r>
 800c284:	6030      	str	r0, [r6, #0]
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f000 fead 	bl	800cfe8 <_sbrk_r>
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	d103      	bne.n	800c29a <sbrk_aligned+0x26>
 800c292:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c296:	4620      	mov	r0, r4
 800c298:	bd70      	pop	{r4, r5, r6, pc}
 800c29a:	1cc4      	adds	r4, r0, #3
 800c29c:	f024 0403 	bic.w	r4, r4, #3
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d0f8      	beq.n	800c296 <sbrk_aligned+0x22>
 800c2a4:	1a21      	subs	r1, r4, r0
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 fe9e 	bl	800cfe8 <_sbrk_r>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d1f2      	bne.n	800c296 <sbrk_aligned+0x22>
 800c2b0:	e7ef      	b.n	800c292 <sbrk_aligned+0x1e>
 800c2b2:	bf00      	nop
 800c2b4:	20001010 	.word	0x20001010

0800c2b8 <_malloc_r>:
 800c2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2bc:	1ccd      	adds	r5, r1, #3
 800c2be:	f025 0503 	bic.w	r5, r5, #3
 800c2c2:	3508      	adds	r5, #8
 800c2c4:	2d0c      	cmp	r5, #12
 800c2c6:	bf38      	it	cc
 800c2c8:	250c      	movcc	r5, #12
 800c2ca:	2d00      	cmp	r5, #0
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	db01      	blt.n	800c2d4 <_malloc_r+0x1c>
 800c2d0:	42a9      	cmp	r1, r5
 800c2d2:	d904      	bls.n	800c2de <_malloc_r+0x26>
 800c2d4:	230c      	movs	r3, #12
 800c2d6:	6033      	str	r3, [r6, #0]
 800c2d8:	2000      	movs	r0, #0
 800c2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3b4 <_malloc_r+0xfc>
 800c2e2:	f000 f869 	bl	800c3b8 <__malloc_lock>
 800c2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ea:	461c      	mov	r4, r3
 800c2ec:	bb44      	cbnz	r4, 800c340 <_malloc_r+0x88>
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff ffbf 	bl	800c274 <sbrk_aligned>
 800c2f6:	1c43      	adds	r3, r0, #1
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	d158      	bne.n	800c3ae <_malloc_r+0xf6>
 800c2fc:	f8d8 4000 	ldr.w	r4, [r8]
 800c300:	4627      	mov	r7, r4
 800c302:	2f00      	cmp	r7, #0
 800c304:	d143      	bne.n	800c38e <_malloc_r+0xd6>
 800c306:	2c00      	cmp	r4, #0
 800c308:	d04b      	beq.n	800c3a2 <_malloc_r+0xea>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	4639      	mov	r1, r7
 800c30e:	4630      	mov	r0, r6
 800c310:	eb04 0903 	add.w	r9, r4, r3
 800c314:	f000 fe68 	bl	800cfe8 <_sbrk_r>
 800c318:	4581      	cmp	r9, r0
 800c31a:	d142      	bne.n	800c3a2 <_malloc_r+0xea>
 800c31c:	6821      	ldr	r1, [r4, #0]
 800c31e:	1a6d      	subs	r5, r5, r1
 800c320:	4629      	mov	r1, r5
 800c322:	4630      	mov	r0, r6
 800c324:	f7ff ffa6 	bl	800c274 <sbrk_aligned>
 800c328:	3001      	adds	r0, #1
 800c32a:	d03a      	beq.n	800c3a2 <_malloc_r+0xea>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	442b      	add	r3, r5
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	f8d8 3000 	ldr.w	r3, [r8]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	bb62      	cbnz	r2, 800c394 <_malloc_r+0xdc>
 800c33a:	f8c8 7000 	str.w	r7, [r8]
 800c33e:	e00f      	b.n	800c360 <_malloc_r+0xa8>
 800c340:	6822      	ldr	r2, [r4, #0]
 800c342:	1b52      	subs	r2, r2, r5
 800c344:	d420      	bmi.n	800c388 <_malloc_r+0xd0>
 800c346:	2a0b      	cmp	r2, #11
 800c348:	d917      	bls.n	800c37a <_malloc_r+0xc2>
 800c34a:	1961      	adds	r1, r4, r5
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	6025      	str	r5, [r4, #0]
 800c350:	bf18      	it	ne
 800c352:	6059      	strne	r1, [r3, #4]
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	bf08      	it	eq
 800c358:	f8c8 1000 	streq.w	r1, [r8]
 800c35c:	5162      	str	r2, [r4, r5]
 800c35e:	604b      	str	r3, [r1, #4]
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f82f 	bl	800c3c4 <__malloc_unlock>
 800c366:	f104 000b 	add.w	r0, r4, #11
 800c36a:	1d23      	adds	r3, r4, #4
 800c36c:	f020 0007 	bic.w	r0, r0, #7
 800c370:	1ac2      	subs	r2, r0, r3
 800c372:	bf1c      	itt	ne
 800c374:	1a1b      	subne	r3, r3, r0
 800c376:	50a3      	strne	r3, [r4, r2]
 800c378:	e7af      	b.n	800c2da <_malloc_r+0x22>
 800c37a:	6862      	ldr	r2, [r4, #4]
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	bf0c      	ite	eq
 800c380:	f8c8 2000 	streq.w	r2, [r8]
 800c384:	605a      	strne	r2, [r3, #4]
 800c386:	e7eb      	b.n	800c360 <_malloc_r+0xa8>
 800c388:	4623      	mov	r3, r4
 800c38a:	6864      	ldr	r4, [r4, #4]
 800c38c:	e7ae      	b.n	800c2ec <_malloc_r+0x34>
 800c38e:	463c      	mov	r4, r7
 800c390:	687f      	ldr	r7, [r7, #4]
 800c392:	e7b6      	b.n	800c302 <_malloc_r+0x4a>
 800c394:	461a      	mov	r2, r3
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	42a3      	cmp	r3, r4
 800c39a:	d1fb      	bne.n	800c394 <_malloc_r+0xdc>
 800c39c:	2300      	movs	r3, #0
 800c39e:	6053      	str	r3, [r2, #4]
 800c3a0:	e7de      	b.n	800c360 <_malloc_r+0xa8>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	6033      	str	r3, [r6, #0]
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f000 f80c 	bl	800c3c4 <__malloc_unlock>
 800c3ac:	e794      	b.n	800c2d8 <_malloc_r+0x20>
 800c3ae:	6005      	str	r5, [r0, #0]
 800c3b0:	e7d6      	b.n	800c360 <_malloc_r+0xa8>
 800c3b2:	bf00      	nop
 800c3b4:	20001014 	.word	0x20001014

0800c3b8 <__malloc_lock>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	@ (800c3c0 <__malloc_lock+0x8>)
 800c3ba:	f7ff b8ac 	b.w	800b516 <__retarget_lock_acquire_recursive>
 800c3be:	bf00      	nop
 800c3c0:	2000100c 	.word	0x2000100c

0800c3c4 <__malloc_unlock>:
 800c3c4:	4801      	ldr	r0, [pc, #4]	@ (800c3cc <__malloc_unlock+0x8>)
 800c3c6:	f7ff b8a7 	b.w	800b518 <__retarget_lock_release_recursive>
 800c3ca:	bf00      	nop
 800c3cc:	2000100c 	.word	0x2000100c

0800c3d0 <_Balloc>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	69c6      	ldr	r6, [r0, #28]
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	b976      	cbnz	r6, 800c3f8 <_Balloc+0x28>
 800c3da:	2010      	movs	r0, #16
 800c3dc:	f7ff ff42 	bl	800c264 <malloc>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	61e0      	str	r0, [r4, #28]
 800c3e4:	b920      	cbnz	r0, 800c3f0 <_Balloc+0x20>
 800c3e6:	4b18      	ldr	r3, [pc, #96]	@ (800c448 <_Balloc+0x78>)
 800c3e8:	4818      	ldr	r0, [pc, #96]	@ (800c44c <_Balloc+0x7c>)
 800c3ea:	216b      	movs	r1, #107	@ 0x6b
 800c3ec:	f000 fe0c 	bl	800d008 <__assert_func>
 800c3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3f4:	6006      	str	r6, [r0, #0]
 800c3f6:	60c6      	str	r6, [r0, #12]
 800c3f8:	69e6      	ldr	r6, [r4, #28]
 800c3fa:	68f3      	ldr	r3, [r6, #12]
 800c3fc:	b183      	cbz	r3, 800c420 <_Balloc+0x50>
 800c3fe:	69e3      	ldr	r3, [r4, #28]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c406:	b9b8      	cbnz	r0, 800c438 <_Balloc+0x68>
 800c408:	2101      	movs	r1, #1
 800c40a:	fa01 f605 	lsl.w	r6, r1, r5
 800c40e:	1d72      	adds	r2, r6, #5
 800c410:	0092      	lsls	r2, r2, #2
 800c412:	4620      	mov	r0, r4
 800c414:	f000 fe16 	bl	800d044 <_calloc_r>
 800c418:	b160      	cbz	r0, 800c434 <_Balloc+0x64>
 800c41a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c41e:	e00e      	b.n	800c43e <_Balloc+0x6e>
 800c420:	2221      	movs	r2, #33	@ 0x21
 800c422:	2104      	movs	r1, #4
 800c424:	4620      	mov	r0, r4
 800c426:	f000 fe0d 	bl	800d044 <_calloc_r>
 800c42a:	69e3      	ldr	r3, [r4, #28]
 800c42c:	60f0      	str	r0, [r6, #12]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1e4      	bne.n	800c3fe <_Balloc+0x2e>
 800c434:	2000      	movs	r0, #0
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	6802      	ldr	r2, [r0, #0]
 800c43a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c43e:	2300      	movs	r3, #0
 800c440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c444:	e7f7      	b.n	800c436 <_Balloc+0x66>
 800c446:	bf00      	nop
 800c448:	0800ea55 	.word	0x0800ea55
 800c44c:	0800ead5 	.word	0x0800ead5

0800c450 <_Bfree>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	69c6      	ldr	r6, [r0, #28]
 800c454:	4605      	mov	r5, r0
 800c456:	460c      	mov	r4, r1
 800c458:	b976      	cbnz	r6, 800c478 <_Bfree+0x28>
 800c45a:	2010      	movs	r0, #16
 800c45c:	f7ff ff02 	bl	800c264 <malloc>
 800c460:	4602      	mov	r2, r0
 800c462:	61e8      	str	r0, [r5, #28]
 800c464:	b920      	cbnz	r0, 800c470 <_Bfree+0x20>
 800c466:	4b09      	ldr	r3, [pc, #36]	@ (800c48c <_Bfree+0x3c>)
 800c468:	4809      	ldr	r0, [pc, #36]	@ (800c490 <_Bfree+0x40>)
 800c46a:	218f      	movs	r1, #143	@ 0x8f
 800c46c:	f000 fdcc 	bl	800d008 <__assert_func>
 800c470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c474:	6006      	str	r6, [r0, #0]
 800c476:	60c6      	str	r6, [r0, #12]
 800c478:	b13c      	cbz	r4, 800c48a <_Bfree+0x3a>
 800c47a:	69eb      	ldr	r3, [r5, #28]
 800c47c:	6862      	ldr	r2, [r4, #4]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c484:	6021      	str	r1, [r4, #0]
 800c486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	0800ea55 	.word	0x0800ea55
 800c490:	0800ead5 	.word	0x0800ead5

0800c494 <__multadd>:
 800c494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c498:	690d      	ldr	r5, [r1, #16]
 800c49a:	4607      	mov	r7, r0
 800c49c:	460c      	mov	r4, r1
 800c49e:	461e      	mov	r6, r3
 800c4a0:	f101 0c14 	add.w	ip, r1, #20
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4aa:	b299      	uxth	r1, r3
 800c4ac:	fb02 6101 	mla	r1, r2, r1, r6
 800c4b0:	0c1e      	lsrs	r6, r3, #16
 800c4b2:	0c0b      	lsrs	r3, r1, #16
 800c4b4:	fb02 3306 	mla	r3, r2, r6, r3
 800c4b8:	b289      	uxth	r1, r1
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4c0:	4285      	cmp	r5, r0
 800c4c2:	f84c 1b04 	str.w	r1, [ip], #4
 800c4c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4ca:	dcec      	bgt.n	800c4a6 <__multadd+0x12>
 800c4cc:	b30e      	cbz	r6, 800c512 <__multadd+0x7e>
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	42ab      	cmp	r3, r5
 800c4d2:	dc19      	bgt.n	800c508 <__multadd+0x74>
 800c4d4:	6861      	ldr	r1, [r4, #4]
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	3101      	adds	r1, #1
 800c4da:	f7ff ff79 	bl	800c3d0 <_Balloc>
 800c4de:	4680      	mov	r8, r0
 800c4e0:	b928      	cbnz	r0, 800c4ee <__multadd+0x5a>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c518 <__multadd+0x84>)
 800c4e6:	480d      	ldr	r0, [pc, #52]	@ (800c51c <__multadd+0x88>)
 800c4e8:	21ba      	movs	r1, #186	@ 0xba
 800c4ea:	f000 fd8d 	bl	800d008 <__assert_func>
 800c4ee:	6922      	ldr	r2, [r4, #16]
 800c4f0:	3202      	adds	r2, #2
 800c4f2:	f104 010c 	add.w	r1, r4, #12
 800c4f6:	0092      	lsls	r2, r2, #2
 800c4f8:	300c      	adds	r0, #12
 800c4fa:	f7ff f80e 	bl	800b51a <memcpy>
 800c4fe:	4621      	mov	r1, r4
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ffa5 	bl	800c450 <_Bfree>
 800c506:	4644      	mov	r4, r8
 800c508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c50c:	3501      	adds	r5, #1
 800c50e:	615e      	str	r6, [r3, #20]
 800c510:	6125      	str	r5, [r4, #16]
 800c512:	4620      	mov	r0, r4
 800c514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c518:	0800eac4 	.word	0x0800eac4
 800c51c:	0800ead5 	.word	0x0800ead5

0800c520 <__hi0bits>:
 800c520:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c524:	4603      	mov	r3, r0
 800c526:	bf36      	itet	cc
 800c528:	0403      	lslcc	r3, r0, #16
 800c52a:	2000      	movcs	r0, #0
 800c52c:	2010      	movcc	r0, #16
 800c52e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c532:	bf3c      	itt	cc
 800c534:	021b      	lslcc	r3, r3, #8
 800c536:	3008      	addcc	r0, #8
 800c538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c53c:	bf3c      	itt	cc
 800c53e:	011b      	lslcc	r3, r3, #4
 800c540:	3004      	addcc	r0, #4
 800c542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c546:	bf3c      	itt	cc
 800c548:	009b      	lslcc	r3, r3, #2
 800c54a:	3002      	addcc	r0, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	db05      	blt.n	800c55c <__hi0bits+0x3c>
 800c550:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c554:	f100 0001 	add.w	r0, r0, #1
 800c558:	bf08      	it	eq
 800c55a:	2020      	moveq	r0, #32
 800c55c:	4770      	bx	lr

0800c55e <__lo0bits>:
 800c55e:	6803      	ldr	r3, [r0, #0]
 800c560:	4602      	mov	r2, r0
 800c562:	f013 0007 	ands.w	r0, r3, #7
 800c566:	d00b      	beq.n	800c580 <__lo0bits+0x22>
 800c568:	07d9      	lsls	r1, r3, #31
 800c56a:	d421      	bmi.n	800c5b0 <__lo0bits+0x52>
 800c56c:	0798      	lsls	r0, r3, #30
 800c56e:	bf49      	itett	mi
 800c570:	085b      	lsrmi	r3, r3, #1
 800c572:	089b      	lsrpl	r3, r3, #2
 800c574:	2001      	movmi	r0, #1
 800c576:	6013      	strmi	r3, [r2, #0]
 800c578:	bf5c      	itt	pl
 800c57a:	6013      	strpl	r3, [r2, #0]
 800c57c:	2002      	movpl	r0, #2
 800c57e:	4770      	bx	lr
 800c580:	b299      	uxth	r1, r3
 800c582:	b909      	cbnz	r1, 800c588 <__lo0bits+0x2a>
 800c584:	0c1b      	lsrs	r3, r3, #16
 800c586:	2010      	movs	r0, #16
 800c588:	b2d9      	uxtb	r1, r3
 800c58a:	b909      	cbnz	r1, 800c590 <__lo0bits+0x32>
 800c58c:	3008      	adds	r0, #8
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	0719      	lsls	r1, r3, #28
 800c592:	bf04      	itt	eq
 800c594:	091b      	lsreq	r3, r3, #4
 800c596:	3004      	addeq	r0, #4
 800c598:	0799      	lsls	r1, r3, #30
 800c59a:	bf04      	itt	eq
 800c59c:	089b      	lsreq	r3, r3, #2
 800c59e:	3002      	addeq	r0, #2
 800c5a0:	07d9      	lsls	r1, r3, #31
 800c5a2:	d403      	bmi.n	800c5ac <__lo0bits+0x4e>
 800c5a4:	085b      	lsrs	r3, r3, #1
 800c5a6:	f100 0001 	add.w	r0, r0, #1
 800c5aa:	d003      	beq.n	800c5b4 <__lo0bits+0x56>
 800c5ac:	6013      	str	r3, [r2, #0]
 800c5ae:	4770      	bx	lr
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	4770      	bx	lr
 800c5b4:	2020      	movs	r0, #32
 800c5b6:	4770      	bx	lr

0800c5b8 <__i2b>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	2101      	movs	r1, #1
 800c5be:	f7ff ff07 	bl	800c3d0 <_Balloc>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	b928      	cbnz	r0, 800c5d2 <__i2b+0x1a>
 800c5c6:	4b05      	ldr	r3, [pc, #20]	@ (800c5dc <__i2b+0x24>)
 800c5c8:	4805      	ldr	r0, [pc, #20]	@ (800c5e0 <__i2b+0x28>)
 800c5ca:	f240 1145 	movw	r1, #325	@ 0x145
 800c5ce:	f000 fd1b 	bl	800d008 <__assert_func>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	6144      	str	r4, [r0, #20]
 800c5d6:	6103      	str	r3, [r0, #16]
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	bf00      	nop
 800c5dc:	0800eac4 	.word	0x0800eac4
 800c5e0:	0800ead5 	.word	0x0800ead5

0800c5e4 <__multiply>:
 800c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	690a      	ldr	r2, [r1, #16]
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	bfa8      	it	ge
 800c5f2:	4623      	movge	r3, r4
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	bfa4      	itt	ge
 800c5f8:	460c      	movge	r4, r1
 800c5fa:	461f      	movge	r7, r3
 800c5fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c600:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	6861      	ldr	r1, [r4, #4]
 800c608:	eb0a 0609 	add.w	r6, sl, r9
 800c60c:	42b3      	cmp	r3, r6
 800c60e:	b085      	sub	sp, #20
 800c610:	bfb8      	it	lt
 800c612:	3101      	addlt	r1, #1
 800c614:	f7ff fedc 	bl	800c3d0 <_Balloc>
 800c618:	b930      	cbnz	r0, 800c628 <__multiply+0x44>
 800c61a:	4602      	mov	r2, r0
 800c61c:	4b44      	ldr	r3, [pc, #272]	@ (800c730 <__multiply+0x14c>)
 800c61e:	4845      	ldr	r0, [pc, #276]	@ (800c734 <__multiply+0x150>)
 800c620:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c624:	f000 fcf0 	bl	800d008 <__assert_func>
 800c628:	f100 0514 	add.w	r5, r0, #20
 800c62c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c630:	462b      	mov	r3, r5
 800c632:	2200      	movs	r2, #0
 800c634:	4543      	cmp	r3, r8
 800c636:	d321      	bcc.n	800c67c <__multiply+0x98>
 800c638:	f107 0114 	add.w	r1, r7, #20
 800c63c:	f104 0214 	add.w	r2, r4, #20
 800c640:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c644:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c648:	9302      	str	r3, [sp, #8]
 800c64a:	1b13      	subs	r3, r2, r4
 800c64c:	3b15      	subs	r3, #21
 800c64e:	f023 0303 	bic.w	r3, r3, #3
 800c652:	3304      	adds	r3, #4
 800c654:	f104 0715 	add.w	r7, r4, #21
 800c658:	42ba      	cmp	r2, r7
 800c65a:	bf38      	it	cc
 800c65c:	2304      	movcc	r3, #4
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	9b02      	ldr	r3, [sp, #8]
 800c662:	9103      	str	r1, [sp, #12]
 800c664:	428b      	cmp	r3, r1
 800c666:	d80c      	bhi.n	800c682 <__multiply+0x9e>
 800c668:	2e00      	cmp	r6, #0
 800c66a:	dd03      	ble.n	800c674 <__multiply+0x90>
 800c66c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c670:	2b00      	cmp	r3, #0
 800c672:	d05b      	beq.n	800c72c <__multiply+0x148>
 800c674:	6106      	str	r6, [r0, #16]
 800c676:	b005      	add	sp, #20
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67c:	f843 2b04 	str.w	r2, [r3], #4
 800c680:	e7d8      	b.n	800c634 <__multiply+0x50>
 800c682:	f8b1 a000 	ldrh.w	sl, [r1]
 800c686:	f1ba 0f00 	cmp.w	sl, #0
 800c68a:	d024      	beq.n	800c6d6 <__multiply+0xf2>
 800c68c:	f104 0e14 	add.w	lr, r4, #20
 800c690:	46a9      	mov	r9, r5
 800c692:	f04f 0c00 	mov.w	ip, #0
 800c696:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c69a:	f8d9 3000 	ldr.w	r3, [r9]
 800c69e:	fa1f fb87 	uxth.w	fp, r7
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c6ac:	f8d9 7000 	ldr.w	r7, [r9]
 800c6b0:	4463      	add	r3, ip
 800c6b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c6ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6c4:	4572      	cmp	r2, lr
 800c6c6:	f849 3b04 	str.w	r3, [r9], #4
 800c6ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6ce:	d8e2      	bhi.n	800c696 <__multiply+0xb2>
 800c6d0:	9b01      	ldr	r3, [sp, #4]
 800c6d2:	f845 c003 	str.w	ip, [r5, r3]
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6dc:	3104      	adds	r1, #4
 800c6de:	f1b9 0f00 	cmp.w	r9, #0
 800c6e2:	d021      	beq.n	800c728 <__multiply+0x144>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	f104 0c14 	add.w	ip, r4, #20
 800c6ea:	46ae      	mov	lr, r5
 800c6ec:	f04f 0a00 	mov.w	sl, #0
 800c6f0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6f8:	fb09 770b 	mla	r7, r9, fp, r7
 800c6fc:	4457      	add	r7, sl
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c704:	f84e 3b04 	str.w	r3, [lr], #4
 800c708:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c70c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c710:	f8be 3000 	ldrh.w	r3, [lr]
 800c714:	fb09 330a 	mla	r3, r9, sl, r3
 800c718:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c71c:	4562      	cmp	r2, ip
 800c71e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c722:	d8e5      	bhi.n	800c6f0 <__multiply+0x10c>
 800c724:	9f01      	ldr	r7, [sp, #4]
 800c726:	51eb      	str	r3, [r5, r7]
 800c728:	3504      	adds	r5, #4
 800c72a:	e799      	b.n	800c660 <__multiply+0x7c>
 800c72c:	3e01      	subs	r6, #1
 800c72e:	e79b      	b.n	800c668 <__multiply+0x84>
 800c730:	0800eac4 	.word	0x0800eac4
 800c734:	0800ead5 	.word	0x0800ead5

0800c738 <__pow5mult>:
 800c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c73c:	4615      	mov	r5, r2
 800c73e:	f012 0203 	ands.w	r2, r2, #3
 800c742:	4607      	mov	r7, r0
 800c744:	460e      	mov	r6, r1
 800c746:	d007      	beq.n	800c758 <__pow5mult+0x20>
 800c748:	4c25      	ldr	r4, [pc, #148]	@ (800c7e0 <__pow5mult+0xa8>)
 800c74a:	3a01      	subs	r2, #1
 800c74c:	2300      	movs	r3, #0
 800c74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c752:	f7ff fe9f 	bl	800c494 <__multadd>
 800c756:	4606      	mov	r6, r0
 800c758:	10ad      	asrs	r5, r5, #2
 800c75a:	d03d      	beq.n	800c7d8 <__pow5mult+0xa0>
 800c75c:	69fc      	ldr	r4, [r7, #28]
 800c75e:	b97c      	cbnz	r4, 800c780 <__pow5mult+0x48>
 800c760:	2010      	movs	r0, #16
 800c762:	f7ff fd7f 	bl	800c264 <malloc>
 800c766:	4602      	mov	r2, r0
 800c768:	61f8      	str	r0, [r7, #28]
 800c76a:	b928      	cbnz	r0, 800c778 <__pow5mult+0x40>
 800c76c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7e4 <__pow5mult+0xac>)
 800c76e:	481e      	ldr	r0, [pc, #120]	@ (800c7e8 <__pow5mult+0xb0>)
 800c770:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c774:	f000 fc48 	bl	800d008 <__assert_func>
 800c778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c77c:	6004      	str	r4, [r0, #0]
 800c77e:	60c4      	str	r4, [r0, #12]
 800c780:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c788:	b94c      	cbnz	r4, 800c79e <__pow5mult+0x66>
 800c78a:	f240 2171 	movw	r1, #625	@ 0x271
 800c78e:	4638      	mov	r0, r7
 800c790:	f7ff ff12 	bl	800c5b8 <__i2b>
 800c794:	2300      	movs	r3, #0
 800c796:	f8c8 0008 	str.w	r0, [r8, #8]
 800c79a:	4604      	mov	r4, r0
 800c79c:	6003      	str	r3, [r0, #0]
 800c79e:	f04f 0900 	mov.w	r9, #0
 800c7a2:	07eb      	lsls	r3, r5, #31
 800c7a4:	d50a      	bpl.n	800c7bc <__pow5mult+0x84>
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f7ff ff1a 	bl	800c5e4 <__multiply>
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff fe4b 	bl	800c450 <_Bfree>
 800c7ba:	4646      	mov	r6, r8
 800c7bc:	106d      	asrs	r5, r5, #1
 800c7be:	d00b      	beq.n	800c7d8 <__pow5mult+0xa0>
 800c7c0:	6820      	ldr	r0, [r4, #0]
 800c7c2:	b938      	cbnz	r0, 800c7d4 <__pow5mult+0x9c>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7ff ff0b 	bl	800c5e4 <__multiply>
 800c7ce:	6020      	str	r0, [r4, #0]
 800c7d0:	f8c0 9000 	str.w	r9, [r0]
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	e7e4      	b.n	800c7a2 <__pow5mult+0x6a>
 800c7d8:	4630      	mov	r0, r6
 800c7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7de:	bf00      	nop
 800c7e0:	0800eb30 	.word	0x0800eb30
 800c7e4:	0800ea55 	.word	0x0800ea55
 800c7e8:	0800ead5 	.word	0x0800ead5

0800c7ec <__lshift>:
 800c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	6849      	ldr	r1, [r1, #4]
 800c7f4:	6923      	ldr	r3, [r4, #16]
 800c7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	4691      	mov	r9, r2
 800c800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c804:	f108 0601 	add.w	r6, r8, #1
 800c808:	42b3      	cmp	r3, r6
 800c80a:	db0b      	blt.n	800c824 <__lshift+0x38>
 800c80c:	4638      	mov	r0, r7
 800c80e:	f7ff fddf 	bl	800c3d0 <_Balloc>
 800c812:	4605      	mov	r5, r0
 800c814:	b948      	cbnz	r0, 800c82a <__lshift+0x3e>
 800c816:	4602      	mov	r2, r0
 800c818:	4b28      	ldr	r3, [pc, #160]	@ (800c8bc <__lshift+0xd0>)
 800c81a:	4829      	ldr	r0, [pc, #164]	@ (800c8c0 <__lshift+0xd4>)
 800c81c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c820:	f000 fbf2 	bl	800d008 <__assert_func>
 800c824:	3101      	adds	r1, #1
 800c826:	005b      	lsls	r3, r3, #1
 800c828:	e7ee      	b.n	800c808 <__lshift+0x1c>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f100 0114 	add.w	r1, r0, #20
 800c830:	f100 0210 	add.w	r2, r0, #16
 800c834:	4618      	mov	r0, r3
 800c836:	4553      	cmp	r3, sl
 800c838:	db33      	blt.n	800c8a2 <__lshift+0xb6>
 800c83a:	6920      	ldr	r0, [r4, #16]
 800c83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c840:	f104 0314 	add.w	r3, r4, #20
 800c844:	f019 091f 	ands.w	r9, r9, #31
 800c848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c84c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c850:	d02b      	beq.n	800c8aa <__lshift+0xbe>
 800c852:	f1c9 0e20 	rsb	lr, r9, #32
 800c856:	468a      	mov	sl, r1
 800c858:	2200      	movs	r2, #0
 800c85a:	6818      	ldr	r0, [r3, #0]
 800c85c:	fa00 f009 	lsl.w	r0, r0, r9
 800c860:	4310      	orrs	r0, r2
 800c862:	f84a 0b04 	str.w	r0, [sl], #4
 800c866:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86a:	459c      	cmp	ip, r3
 800c86c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c870:	d8f3      	bhi.n	800c85a <__lshift+0x6e>
 800c872:	ebac 0304 	sub.w	r3, ip, r4
 800c876:	3b15      	subs	r3, #21
 800c878:	f023 0303 	bic.w	r3, r3, #3
 800c87c:	3304      	adds	r3, #4
 800c87e:	f104 0015 	add.w	r0, r4, #21
 800c882:	4584      	cmp	ip, r0
 800c884:	bf38      	it	cc
 800c886:	2304      	movcc	r3, #4
 800c888:	50ca      	str	r2, [r1, r3]
 800c88a:	b10a      	cbz	r2, 800c890 <__lshift+0xa4>
 800c88c:	f108 0602 	add.w	r6, r8, #2
 800c890:	3e01      	subs	r6, #1
 800c892:	4638      	mov	r0, r7
 800c894:	612e      	str	r6, [r5, #16]
 800c896:	4621      	mov	r1, r4
 800c898:	f7ff fdda 	bl	800c450 <_Bfree>
 800c89c:	4628      	mov	r0, r5
 800c89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	e7c5      	b.n	800c836 <__lshift+0x4a>
 800c8aa:	3904      	subs	r1, #4
 800c8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8b4:	459c      	cmp	ip, r3
 800c8b6:	d8f9      	bhi.n	800c8ac <__lshift+0xc0>
 800c8b8:	e7ea      	b.n	800c890 <__lshift+0xa4>
 800c8ba:	bf00      	nop
 800c8bc:	0800eac4 	.word	0x0800eac4
 800c8c0:	0800ead5 	.word	0x0800ead5

0800c8c4 <__mcmp>:
 800c8c4:	690a      	ldr	r2, [r1, #16]
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	6900      	ldr	r0, [r0, #16]
 800c8ca:	1a80      	subs	r0, r0, r2
 800c8cc:	b530      	push	{r4, r5, lr}
 800c8ce:	d10e      	bne.n	800c8ee <__mcmp+0x2a>
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	3114      	adds	r1, #20
 800c8d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8e4:	4295      	cmp	r5, r2
 800c8e6:	d003      	beq.n	800c8f0 <__mcmp+0x2c>
 800c8e8:	d205      	bcs.n	800c8f6 <__mcmp+0x32>
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ee:	bd30      	pop	{r4, r5, pc}
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	d3f3      	bcc.n	800c8dc <__mcmp+0x18>
 800c8f4:	e7fb      	b.n	800c8ee <__mcmp+0x2a>
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	e7f9      	b.n	800c8ee <__mcmp+0x2a>
	...

0800c8fc <__mdiff>:
 800c8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	4689      	mov	r9, r1
 800c902:	4606      	mov	r6, r0
 800c904:	4611      	mov	r1, r2
 800c906:	4648      	mov	r0, r9
 800c908:	4614      	mov	r4, r2
 800c90a:	f7ff ffdb 	bl	800c8c4 <__mcmp>
 800c90e:	1e05      	subs	r5, r0, #0
 800c910:	d112      	bne.n	800c938 <__mdiff+0x3c>
 800c912:	4629      	mov	r1, r5
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff fd5b 	bl	800c3d0 <_Balloc>
 800c91a:	4602      	mov	r2, r0
 800c91c:	b928      	cbnz	r0, 800c92a <__mdiff+0x2e>
 800c91e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca1c <__mdiff+0x120>)
 800c920:	f240 2137 	movw	r1, #567	@ 0x237
 800c924:	483e      	ldr	r0, [pc, #248]	@ (800ca20 <__mdiff+0x124>)
 800c926:	f000 fb6f 	bl	800d008 <__assert_func>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c930:	4610      	mov	r0, r2
 800c932:	b003      	add	sp, #12
 800c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c938:	bfbc      	itt	lt
 800c93a:	464b      	movlt	r3, r9
 800c93c:	46a1      	movlt	r9, r4
 800c93e:	4630      	mov	r0, r6
 800c940:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c944:	bfba      	itte	lt
 800c946:	461c      	movlt	r4, r3
 800c948:	2501      	movlt	r5, #1
 800c94a:	2500      	movge	r5, #0
 800c94c:	f7ff fd40 	bl	800c3d0 <_Balloc>
 800c950:	4602      	mov	r2, r0
 800c952:	b918      	cbnz	r0, 800c95c <__mdiff+0x60>
 800c954:	4b31      	ldr	r3, [pc, #196]	@ (800ca1c <__mdiff+0x120>)
 800c956:	f240 2145 	movw	r1, #581	@ 0x245
 800c95a:	e7e3      	b.n	800c924 <__mdiff+0x28>
 800c95c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c960:	6926      	ldr	r6, [r4, #16]
 800c962:	60c5      	str	r5, [r0, #12]
 800c964:	f109 0310 	add.w	r3, r9, #16
 800c968:	f109 0514 	add.w	r5, r9, #20
 800c96c:	f104 0e14 	add.w	lr, r4, #20
 800c970:	f100 0b14 	add.w	fp, r0, #20
 800c974:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c978:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	46d9      	mov	r9, fp
 800c980:	f04f 0c00 	mov.w	ip, #0
 800c984:	9b01      	ldr	r3, [sp, #4]
 800c986:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c98a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	fa1f f38a 	uxth.w	r3, sl
 800c994:	4619      	mov	r1, r3
 800c996:	b283      	uxth	r3, r0
 800c998:	1acb      	subs	r3, r1, r3
 800c99a:	0c00      	lsrs	r0, r0, #16
 800c99c:	4463      	add	r3, ip
 800c99e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9ac:	4576      	cmp	r6, lr
 800c9ae:	f849 3b04 	str.w	r3, [r9], #4
 800c9b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9b6:	d8e5      	bhi.n	800c984 <__mdiff+0x88>
 800c9b8:	1b33      	subs	r3, r6, r4
 800c9ba:	3b15      	subs	r3, #21
 800c9bc:	f023 0303 	bic.w	r3, r3, #3
 800c9c0:	3415      	adds	r4, #21
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	42a6      	cmp	r6, r4
 800c9c6:	bf38      	it	cc
 800c9c8:	2304      	movcc	r3, #4
 800c9ca:	441d      	add	r5, r3
 800c9cc:	445b      	add	r3, fp
 800c9ce:	461e      	mov	r6, r3
 800c9d0:	462c      	mov	r4, r5
 800c9d2:	4544      	cmp	r4, r8
 800c9d4:	d30e      	bcc.n	800c9f4 <__mdiff+0xf8>
 800c9d6:	f108 0103 	add.w	r1, r8, #3
 800c9da:	1b49      	subs	r1, r1, r5
 800c9dc:	f021 0103 	bic.w	r1, r1, #3
 800c9e0:	3d03      	subs	r5, #3
 800c9e2:	45a8      	cmp	r8, r5
 800c9e4:	bf38      	it	cc
 800c9e6:	2100      	movcc	r1, #0
 800c9e8:	440b      	add	r3, r1
 800c9ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9ee:	b191      	cbz	r1, 800ca16 <__mdiff+0x11a>
 800c9f0:	6117      	str	r7, [r2, #16]
 800c9f2:	e79d      	b.n	800c930 <__mdiff+0x34>
 800c9f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9f8:	46e6      	mov	lr, ip
 800c9fa:	0c08      	lsrs	r0, r1, #16
 800c9fc:	fa1c fc81 	uxtah	ip, ip, r1
 800ca00:	4471      	add	r1, lr
 800ca02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca06:	b289      	uxth	r1, r1
 800ca08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca0c:	f846 1b04 	str.w	r1, [r6], #4
 800ca10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca14:	e7dd      	b.n	800c9d2 <__mdiff+0xd6>
 800ca16:	3f01      	subs	r7, #1
 800ca18:	e7e7      	b.n	800c9ea <__mdiff+0xee>
 800ca1a:	bf00      	nop
 800ca1c:	0800eac4 	.word	0x0800eac4
 800ca20:	0800ead5 	.word	0x0800ead5

0800ca24 <__d2b>:
 800ca24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca28:	460f      	mov	r7, r1
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	ec59 8b10 	vmov	r8, r9, d0
 800ca30:	4616      	mov	r6, r2
 800ca32:	f7ff fccd 	bl	800c3d0 <_Balloc>
 800ca36:	4604      	mov	r4, r0
 800ca38:	b930      	cbnz	r0, 800ca48 <__d2b+0x24>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	4b23      	ldr	r3, [pc, #140]	@ (800cacc <__d2b+0xa8>)
 800ca3e:	4824      	ldr	r0, [pc, #144]	@ (800cad0 <__d2b+0xac>)
 800ca40:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca44:	f000 fae0 	bl	800d008 <__assert_func>
 800ca48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca50:	b10d      	cbz	r5, 800ca56 <__d2b+0x32>
 800ca52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	f1b8 0300 	subs.w	r3, r8, #0
 800ca5c:	d023      	beq.n	800caa6 <__d2b+0x82>
 800ca5e:	4668      	mov	r0, sp
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	f7ff fd7c 	bl	800c55e <__lo0bits>
 800ca66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca6a:	b1d0      	cbz	r0, 800caa2 <__d2b+0x7e>
 800ca6c:	f1c0 0320 	rsb	r3, r0, #32
 800ca70:	fa02 f303 	lsl.w	r3, r2, r3
 800ca74:	430b      	orrs	r3, r1
 800ca76:	40c2      	lsrs	r2, r0
 800ca78:	6163      	str	r3, [r4, #20]
 800ca7a:	9201      	str	r2, [sp, #4]
 800ca7c:	9b01      	ldr	r3, [sp, #4]
 800ca7e:	61a3      	str	r3, [r4, #24]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bf0c      	ite	eq
 800ca84:	2201      	moveq	r2, #1
 800ca86:	2202      	movne	r2, #2
 800ca88:	6122      	str	r2, [r4, #16]
 800ca8a:	b1a5      	cbz	r5, 800cab6 <__d2b+0x92>
 800ca8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca90:	4405      	add	r5, r0
 800ca92:	603d      	str	r5, [r7, #0]
 800ca94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca98:	6030      	str	r0, [r6, #0]
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	b003      	add	sp, #12
 800ca9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caa2:	6161      	str	r1, [r4, #20]
 800caa4:	e7ea      	b.n	800ca7c <__d2b+0x58>
 800caa6:	a801      	add	r0, sp, #4
 800caa8:	f7ff fd59 	bl	800c55e <__lo0bits>
 800caac:	9b01      	ldr	r3, [sp, #4]
 800caae:	6163      	str	r3, [r4, #20]
 800cab0:	3020      	adds	r0, #32
 800cab2:	2201      	movs	r2, #1
 800cab4:	e7e8      	b.n	800ca88 <__d2b+0x64>
 800cab6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800caba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cabe:	6038      	str	r0, [r7, #0]
 800cac0:	6918      	ldr	r0, [r3, #16]
 800cac2:	f7ff fd2d 	bl	800c520 <__hi0bits>
 800cac6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caca:	e7e5      	b.n	800ca98 <__d2b+0x74>
 800cacc:	0800eac4 	.word	0x0800eac4
 800cad0:	0800ead5 	.word	0x0800ead5

0800cad4 <_malloc_usable_size_r>:
 800cad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cad8:	1f18      	subs	r0, r3, #4
 800cada:	2b00      	cmp	r3, #0
 800cadc:	bfbc      	itt	lt
 800cade:	580b      	ldrlt	r3, [r1, r0]
 800cae0:	18c0      	addlt	r0, r0, r3
 800cae2:	4770      	bx	lr

0800cae4 <__sfputc_r>:
 800cae4:	6893      	ldr	r3, [r2, #8]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	b410      	push	{r4}
 800caec:	6093      	str	r3, [r2, #8]
 800caee:	da08      	bge.n	800cb02 <__sfputc_r+0x1e>
 800caf0:	6994      	ldr	r4, [r2, #24]
 800caf2:	42a3      	cmp	r3, r4
 800caf4:	db01      	blt.n	800cafa <__sfputc_r+0x16>
 800caf6:	290a      	cmp	r1, #10
 800caf8:	d103      	bne.n	800cb02 <__sfputc_r+0x1e>
 800cafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cafe:	f000 b9df 	b.w	800cec0 <__swbuf_r>
 800cb02:	6813      	ldr	r3, [r2, #0]
 800cb04:	1c58      	adds	r0, r3, #1
 800cb06:	6010      	str	r0, [r2, #0]
 800cb08:	7019      	strb	r1, [r3, #0]
 800cb0a:	4608      	mov	r0, r1
 800cb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb10:	4770      	bx	lr

0800cb12 <__sfputs_r>:
 800cb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	4614      	mov	r4, r2
 800cb1a:	18d5      	adds	r5, r2, r3
 800cb1c:	42ac      	cmp	r4, r5
 800cb1e:	d101      	bne.n	800cb24 <__sfputs_r+0x12>
 800cb20:	2000      	movs	r0, #0
 800cb22:	e007      	b.n	800cb34 <__sfputs_r+0x22>
 800cb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb28:	463a      	mov	r2, r7
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff ffda 	bl	800cae4 <__sfputc_r>
 800cb30:	1c43      	adds	r3, r0, #1
 800cb32:	d1f3      	bne.n	800cb1c <__sfputs_r+0xa>
 800cb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb38 <_vfiprintf_r>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	b09d      	sub	sp, #116	@ 0x74
 800cb40:	4614      	mov	r4, r2
 800cb42:	4698      	mov	r8, r3
 800cb44:	4606      	mov	r6, r0
 800cb46:	b118      	cbz	r0, 800cb50 <_vfiprintf_r+0x18>
 800cb48:	6a03      	ldr	r3, [r0, #32]
 800cb4a:	b90b      	cbnz	r3, 800cb50 <_vfiprintf_r+0x18>
 800cb4c:	f7fe fbec 	bl	800b328 <__sinit>
 800cb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb52:	07d9      	lsls	r1, r3, #31
 800cb54:	d405      	bmi.n	800cb62 <_vfiprintf_r+0x2a>
 800cb56:	89ab      	ldrh	r3, [r5, #12]
 800cb58:	059a      	lsls	r2, r3, #22
 800cb5a:	d402      	bmi.n	800cb62 <_vfiprintf_r+0x2a>
 800cb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb5e:	f7fe fcda 	bl	800b516 <__retarget_lock_acquire_recursive>
 800cb62:	89ab      	ldrh	r3, [r5, #12]
 800cb64:	071b      	lsls	r3, r3, #28
 800cb66:	d501      	bpl.n	800cb6c <_vfiprintf_r+0x34>
 800cb68:	692b      	ldr	r3, [r5, #16]
 800cb6a:	b99b      	cbnz	r3, 800cb94 <_vfiprintf_r+0x5c>
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f000 f9e4 	bl	800cf3c <__swsetup_r>
 800cb74:	b170      	cbz	r0, 800cb94 <_vfiprintf_r+0x5c>
 800cb76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb78:	07dc      	lsls	r4, r3, #31
 800cb7a:	d504      	bpl.n	800cb86 <_vfiprintf_r+0x4e>
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb80:	b01d      	add	sp, #116	@ 0x74
 800cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb86:	89ab      	ldrh	r3, [r5, #12]
 800cb88:	0598      	lsls	r0, r3, #22
 800cb8a:	d4f7      	bmi.n	800cb7c <_vfiprintf_r+0x44>
 800cb8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb8e:	f7fe fcc3 	bl	800b518 <__retarget_lock_release_recursive>
 800cb92:	e7f3      	b.n	800cb7c <_vfiprintf_r+0x44>
 800cb94:	2300      	movs	r3, #0
 800cb96:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb98:	2320      	movs	r3, #32
 800cb9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cba2:	2330      	movs	r3, #48	@ 0x30
 800cba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cd54 <_vfiprintf_r+0x21c>
 800cba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbac:	f04f 0901 	mov.w	r9, #1
 800cbb0:	4623      	mov	r3, r4
 800cbb2:	469a      	mov	sl, r3
 800cbb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbb8:	b10a      	cbz	r2, 800cbbe <_vfiprintf_r+0x86>
 800cbba:	2a25      	cmp	r2, #37	@ 0x25
 800cbbc:	d1f9      	bne.n	800cbb2 <_vfiprintf_r+0x7a>
 800cbbe:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc2:	d00b      	beq.n	800cbdc <_vfiprintf_r+0xa4>
 800cbc4:	465b      	mov	r3, fp
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7ff ffa1 	bl	800cb12 <__sfputs_r>
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	f000 80a7 	beq.w	800cd24 <_vfiprintf_r+0x1ec>
 800cbd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbd8:	445a      	add	r2, fp
 800cbda:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 809f 	beq.w	800cd24 <_vfiprintf_r+0x1ec>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cbec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbf0:	f10a 0a01 	add.w	sl, sl, #1
 800cbf4:	9304      	str	r3, [sp, #16]
 800cbf6:	9307      	str	r3, [sp, #28]
 800cbf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbfe:	4654      	mov	r4, sl
 800cc00:	2205      	movs	r2, #5
 800cc02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc06:	4853      	ldr	r0, [pc, #332]	@ (800cd54 <_vfiprintf_r+0x21c>)
 800cc08:	f7f3 fae2 	bl	80001d0 <memchr>
 800cc0c:	9a04      	ldr	r2, [sp, #16]
 800cc0e:	b9d8      	cbnz	r0, 800cc48 <_vfiprintf_r+0x110>
 800cc10:	06d1      	lsls	r1, r2, #27
 800cc12:	bf44      	itt	mi
 800cc14:	2320      	movmi	r3, #32
 800cc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc1a:	0713      	lsls	r3, r2, #28
 800cc1c:	bf44      	itt	mi
 800cc1e:	232b      	movmi	r3, #43	@ 0x2b
 800cc20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc24:	f89a 3000 	ldrb.w	r3, [sl]
 800cc28:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc2a:	d015      	beq.n	800cc58 <_vfiprintf_r+0x120>
 800cc2c:	9a07      	ldr	r2, [sp, #28]
 800cc2e:	4654      	mov	r4, sl
 800cc30:	2000      	movs	r0, #0
 800cc32:	f04f 0c0a 	mov.w	ip, #10
 800cc36:	4621      	mov	r1, r4
 800cc38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc3c:	3b30      	subs	r3, #48	@ 0x30
 800cc3e:	2b09      	cmp	r3, #9
 800cc40:	d94b      	bls.n	800ccda <_vfiprintf_r+0x1a2>
 800cc42:	b1b0      	cbz	r0, 800cc72 <_vfiprintf_r+0x13a>
 800cc44:	9207      	str	r2, [sp, #28]
 800cc46:	e014      	b.n	800cc72 <_vfiprintf_r+0x13a>
 800cc48:	eba0 0308 	sub.w	r3, r0, r8
 800cc4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc50:	4313      	orrs	r3, r2
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	46a2      	mov	sl, r4
 800cc56:	e7d2      	b.n	800cbfe <_vfiprintf_r+0xc6>
 800cc58:	9b03      	ldr	r3, [sp, #12]
 800cc5a:	1d19      	adds	r1, r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	9103      	str	r1, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bfbb      	ittet	lt
 800cc64:	425b      	neglt	r3, r3
 800cc66:	f042 0202 	orrlt.w	r2, r2, #2
 800cc6a:	9307      	strge	r3, [sp, #28]
 800cc6c:	9307      	strlt	r3, [sp, #28]
 800cc6e:	bfb8      	it	lt
 800cc70:	9204      	strlt	r2, [sp, #16]
 800cc72:	7823      	ldrb	r3, [r4, #0]
 800cc74:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc76:	d10a      	bne.n	800cc8e <_vfiprintf_r+0x156>
 800cc78:	7863      	ldrb	r3, [r4, #1]
 800cc7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc7c:	d132      	bne.n	800cce4 <_vfiprintf_r+0x1ac>
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	1d1a      	adds	r2, r3, #4
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	9203      	str	r2, [sp, #12]
 800cc86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc8a:	3402      	adds	r4, #2
 800cc8c:	9305      	str	r3, [sp, #20]
 800cc8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd64 <_vfiprintf_r+0x22c>
 800cc92:	7821      	ldrb	r1, [r4, #0]
 800cc94:	2203      	movs	r2, #3
 800cc96:	4650      	mov	r0, sl
 800cc98:	f7f3 fa9a 	bl	80001d0 <memchr>
 800cc9c:	b138      	cbz	r0, 800ccae <_vfiprintf_r+0x176>
 800cc9e:	9b04      	ldr	r3, [sp, #16]
 800cca0:	eba0 000a 	sub.w	r0, r0, sl
 800cca4:	2240      	movs	r2, #64	@ 0x40
 800cca6:	4082      	lsls	r2, r0
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	3401      	adds	r4, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb2:	4829      	ldr	r0, [pc, #164]	@ (800cd58 <_vfiprintf_r+0x220>)
 800ccb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccb8:	2206      	movs	r2, #6
 800ccba:	f7f3 fa89 	bl	80001d0 <memchr>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d03f      	beq.n	800cd42 <_vfiprintf_r+0x20a>
 800ccc2:	4b26      	ldr	r3, [pc, #152]	@ (800cd5c <_vfiprintf_r+0x224>)
 800ccc4:	bb1b      	cbnz	r3, 800cd0e <_vfiprintf_r+0x1d6>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	3307      	adds	r3, #7
 800ccca:	f023 0307 	bic.w	r3, r3, #7
 800ccce:	3308      	adds	r3, #8
 800ccd0:	9303      	str	r3, [sp, #12]
 800ccd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccd4:	443b      	add	r3, r7
 800ccd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccd8:	e76a      	b.n	800cbb0 <_vfiprintf_r+0x78>
 800ccda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccde:	460c      	mov	r4, r1
 800cce0:	2001      	movs	r0, #1
 800cce2:	e7a8      	b.n	800cc36 <_vfiprintf_r+0xfe>
 800cce4:	2300      	movs	r3, #0
 800cce6:	3401      	adds	r4, #1
 800cce8:	9305      	str	r3, [sp, #20]
 800ccea:	4619      	mov	r1, r3
 800ccec:	f04f 0c0a 	mov.w	ip, #10
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccf6:	3a30      	subs	r2, #48	@ 0x30
 800ccf8:	2a09      	cmp	r2, #9
 800ccfa:	d903      	bls.n	800cd04 <_vfiprintf_r+0x1cc>
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d0c6      	beq.n	800cc8e <_vfiprintf_r+0x156>
 800cd00:	9105      	str	r1, [sp, #20]
 800cd02:	e7c4      	b.n	800cc8e <_vfiprintf_r+0x156>
 800cd04:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd08:	4604      	mov	r4, r0
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e7f0      	b.n	800ccf0 <_vfiprintf_r+0x1b8>
 800cd0e:	ab03      	add	r3, sp, #12
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	462a      	mov	r2, r5
 800cd14:	4b12      	ldr	r3, [pc, #72]	@ (800cd60 <_vfiprintf_r+0x228>)
 800cd16:	a904      	add	r1, sp, #16
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7fd fec1 	bl	800aaa0 <_printf_float>
 800cd1e:	4607      	mov	r7, r0
 800cd20:	1c78      	adds	r0, r7, #1
 800cd22:	d1d6      	bne.n	800ccd2 <_vfiprintf_r+0x19a>
 800cd24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd26:	07d9      	lsls	r1, r3, #31
 800cd28:	d405      	bmi.n	800cd36 <_vfiprintf_r+0x1fe>
 800cd2a:	89ab      	ldrh	r3, [r5, #12]
 800cd2c:	059a      	lsls	r2, r3, #22
 800cd2e:	d402      	bmi.n	800cd36 <_vfiprintf_r+0x1fe>
 800cd30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd32:	f7fe fbf1 	bl	800b518 <__retarget_lock_release_recursive>
 800cd36:	89ab      	ldrh	r3, [r5, #12]
 800cd38:	065b      	lsls	r3, r3, #25
 800cd3a:	f53f af1f 	bmi.w	800cb7c <_vfiprintf_r+0x44>
 800cd3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd40:	e71e      	b.n	800cb80 <_vfiprintf_r+0x48>
 800cd42:	ab03      	add	r3, sp, #12
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	462a      	mov	r2, r5
 800cd48:	4b05      	ldr	r3, [pc, #20]	@ (800cd60 <_vfiprintf_r+0x228>)
 800cd4a:	a904      	add	r1, sp, #16
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	f7fe f93f 	bl	800afd0 <_printf_i>
 800cd52:	e7e4      	b.n	800cd1e <_vfiprintf_r+0x1e6>
 800cd54:	0800ec30 	.word	0x0800ec30
 800cd58:	0800ec3a 	.word	0x0800ec3a
 800cd5c:	0800aaa1 	.word	0x0800aaa1
 800cd60:	0800cb13 	.word	0x0800cb13
 800cd64:	0800ec36 	.word	0x0800ec36

0800cd68 <__sflush_r>:
 800cd68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd70:	0716      	lsls	r6, r2, #28
 800cd72:	4605      	mov	r5, r0
 800cd74:	460c      	mov	r4, r1
 800cd76:	d454      	bmi.n	800ce22 <__sflush_r+0xba>
 800cd78:	684b      	ldr	r3, [r1, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dc02      	bgt.n	800cd84 <__sflush_r+0x1c>
 800cd7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dd48      	ble.n	800ce16 <__sflush_r+0xae>
 800cd84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	d045      	beq.n	800ce16 <__sflush_r+0xae>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd90:	682f      	ldr	r7, [r5, #0]
 800cd92:	6a21      	ldr	r1, [r4, #32]
 800cd94:	602b      	str	r3, [r5, #0]
 800cd96:	d030      	beq.n	800cdfa <__sflush_r+0x92>
 800cd98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	0759      	lsls	r1, r3, #29
 800cd9e:	d505      	bpl.n	800cdac <__sflush_r+0x44>
 800cda0:	6863      	ldr	r3, [r4, #4]
 800cda2:	1ad2      	subs	r2, r2, r3
 800cda4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cda6:	b10b      	cbz	r3, 800cdac <__sflush_r+0x44>
 800cda8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdaa:	1ad2      	subs	r2, r2, r3
 800cdac:	2300      	movs	r3, #0
 800cdae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdb0:	6a21      	ldr	r1, [r4, #32]
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	47b0      	blx	r6
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	d106      	bne.n	800cdca <__sflush_r+0x62>
 800cdbc:	6829      	ldr	r1, [r5, #0]
 800cdbe:	291d      	cmp	r1, #29
 800cdc0:	d82b      	bhi.n	800ce1a <__sflush_r+0xb2>
 800cdc2:	4a2a      	ldr	r2, [pc, #168]	@ (800ce6c <__sflush_r+0x104>)
 800cdc4:	410a      	asrs	r2, r1
 800cdc6:	07d6      	lsls	r6, r2, #31
 800cdc8:	d427      	bmi.n	800ce1a <__sflush_r+0xb2>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	6062      	str	r2, [r4, #4]
 800cdce:	04d9      	lsls	r1, r3, #19
 800cdd0:	6922      	ldr	r2, [r4, #16]
 800cdd2:	6022      	str	r2, [r4, #0]
 800cdd4:	d504      	bpl.n	800cde0 <__sflush_r+0x78>
 800cdd6:	1c42      	adds	r2, r0, #1
 800cdd8:	d101      	bne.n	800cdde <__sflush_r+0x76>
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	b903      	cbnz	r3, 800cde0 <__sflush_r+0x78>
 800cdde:	6560      	str	r0, [r4, #84]	@ 0x54
 800cde0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cde2:	602f      	str	r7, [r5, #0]
 800cde4:	b1b9      	cbz	r1, 800ce16 <__sflush_r+0xae>
 800cde6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdea:	4299      	cmp	r1, r3
 800cdec:	d002      	beq.n	800cdf4 <__sflush_r+0x8c>
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7ff f9ee 	bl	800c1d0 <_free_r>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdf8:	e00d      	b.n	800ce16 <__sflush_r+0xae>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	47b0      	blx	r6
 800ce00:	4602      	mov	r2, r0
 800ce02:	1c50      	adds	r0, r2, #1
 800ce04:	d1c9      	bne.n	800cd9a <__sflush_r+0x32>
 800ce06:	682b      	ldr	r3, [r5, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0c6      	beq.n	800cd9a <__sflush_r+0x32>
 800ce0c:	2b1d      	cmp	r3, #29
 800ce0e:	d001      	beq.n	800ce14 <__sflush_r+0xac>
 800ce10:	2b16      	cmp	r3, #22
 800ce12:	d11e      	bne.n	800ce52 <__sflush_r+0xea>
 800ce14:	602f      	str	r7, [r5, #0]
 800ce16:	2000      	movs	r0, #0
 800ce18:	e022      	b.n	800ce60 <__sflush_r+0xf8>
 800ce1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce1e:	b21b      	sxth	r3, r3
 800ce20:	e01b      	b.n	800ce5a <__sflush_r+0xf2>
 800ce22:	690f      	ldr	r7, [r1, #16]
 800ce24:	2f00      	cmp	r7, #0
 800ce26:	d0f6      	beq.n	800ce16 <__sflush_r+0xae>
 800ce28:	0793      	lsls	r3, r2, #30
 800ce2a:	680e      	ldr	r6, [r1, #0]
 800ce2c:	bf08      	it	eq
 800ce2e:	694b      	ldreq	r3, [r1, #20]
 800ce30:	600f      	str	r7, [r1, #0]
 800ce32:	bf18      	it	ne
 800ce34:	2300      	movne	r3, #0
 800ce36:	eba6 0807 	sub.w	r8, r6, r7
 800ce3a:	608b      	str	r3, [r1, #8]
 800ce3c:	f1b8 0f00 	cmp.w	r8, #0
 800ce40:	dde9      	ble.n	800ce16 <__sflush_r+0xae>
 800ce42:	6a21      	ldr	r1, [r4, #32]
 800ce44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce46:	4643      	mov	r3, r8
 800ce48:	463a      	mov	r2, r7
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b0      	blx	r6
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	dc08      	bgt.n	800ce64 <__sflush_r+0xfc>
 800ce52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce64:	4407      	add	r7, r0
 800ce66:	eba8 0800 	sub.w	r8, r8, r0
 800ce6a:	e7e7      	b.n	800ce3c <__sflush_r+0xd4>
 800ce6c:	dfbffffe 	.word	0xdfbffffe

0800ce70 <_fflush_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	690b      	ldr	r3, [r1, #16]
 800ce74:	4605      	mov	r5, r0
 800ce76:	460c      	mov	r4, r1
 800ce78:	b913      	cbnz	r3, 800ce80 <_fflush_r+0x10>
 800ce7a:	2500      	movs	r5, #0
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	b118      	cbz	r0, 800ce8a <_fflush_r+0x1a>
 800ce82:	6a03      	ldr	r3, [r0, #32]
 800ce84:	b90b      	cbnz	r3, 800ce8a <_fflush_r+0x1a>
 800ce86:	f7fe fa4f 	bl	800b328 <__sinit>
 800ce8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0f3      	beq.n	800ce7a <_fflush_r+0xa>
 800ce92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce94:	07d0      	lsls	r0, r2, #31
 800ce96:	d404      	bmi.n	800cea2 <_fflush_r+0x32>
 800ce98:	0599      	lsls	r1, r3, #22
 800ce9a:	d402      	bmi.n	800cea2 <_fflush_r+0x32>
 800ce9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce9e:	f7fe fb3a 	bl	800b516 <__retarget_lock_acquire_recursive>
 800cea2:	4628      	mov	r0, r5
 800cea4:	4621      	mov	r1, r4
 800cea6:	f7ff ff5f 	bl	800cd68 <__sflush_r>
 800ceaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ceac:	07da      	lsls	r2, r3, #31
 800ceae:	4605      	mov	r5, r0
 800ceb0:	d4e4      	bmi.n	800ce7c <_fflush_r+0xc>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	059b      	lsls	r3, r3, #22
 800ceb6:	d4e1      	bmi.n	800ce7c <_fflush_r+0xc>
 800ceb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceba:	f7fe fb2d 	bl	800b518 <__retarget_lock_release_recursive>
 800cebe:	e7dd      	b.n	800ce7c <_fflush_r+0xc>

0800cec0 <__swbuf_r>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	460e      	mov	r6, r1
 800cec4:	4614      	mov	r4, r2
 800cec6:	4605      	mov	r5, r0
 800cec8:	b118      	cbz	r0, 800ced2 <__swbuf_r+0x12>
 800ceca:	6a03      	ldr	r3, [r0, #32]
 800cecc:	b90b      	cbnz	r3, 800ced2 <__swbuf_r+0x12>
 800cece:	f7fe fa2b 	bl	800b328 <__sinit>
 800ced2:	69a3      	ldr	r3, [r4, #24]
 800ced4:	60a3      	str	r3, [r4, #8]
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	071a      	lsls	r2, r3, #28
 800ceda:	d501      	bpl.n	800cee0 <__swbuf_r+0x20>
 800cedc:	6923      	ldr	r3, [r4, #16]
 800cede:	b943      	cbnz	r3, 800cef2 <__swbuf_r+0x32>
 800cee0:	4621      	mov	r1, r4
 800cee2:	4628      	mov	r0, r5
 800cee4:	f000 f82a 	bl	800cf3c <__swsetup_r>
 800cee8:	b118      	cbz	r0, 800cef2 <__swbuf_r+0x32>
 800ceea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ceee:	4638      	mov	r0, r7
 800cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	6922      	ldr	r2, [r4, #16]
 800cef6:	1a98      	subs	r0, r3, r2
 800cef8:	6963      	ldr	r3, [r4, #20]
 800cefa:	b2f6      	uxtb	r6, r6
 800cefc:	4283      	cmp	r3, r0
 800cefe:	4637      	mov	r7, r6
 800cf00:	dc05      	bgt.n	800cf0e <__swbuf_r+0x4e>
 800cf02:	4621      	mov	r1, r4
 800cf04:	4628      	mov	r0, r5
 800cf06:	f7ff ffb3 	bl	800ce70 <_fflush_r>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d1ed      	bne.n	800ceea <__swbuf_r+0x2a>
 800cf0e:	68a3      	ldr	r3, [r4, #8]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	60a3      	str	r3, [r4, #8]
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	6022      	str	r2, [r4, #0]
 800cf1a:	701e      	strb	r6, [r3, #0]
 800cf1c:	6962      	ldr	r2, [r4, #20]
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d004      	beq.n	800cf2e <__swbuf_r+0x6e>
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	07db      	lsls	r3, r3, #31
 800cf28:	d5e1      	bpl.n	800ceee <__swbuf_r+0x2e>
 800cf2a:	2e0a      	cmp	r6, #10
 800cf2c:	d1df      	bne.n	800ceee <__swbuf_r+0x2e>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4628      	mov	r0, r5
 800cf32:	f7ff ff9d 	bl	800ce70 <_fflush_r>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d0d9      	beq.n	800ceee <__swbuf_r+0x2e>
 800cf3a:	e7d6      	b.n	800ceea <__swbuf_r+0x2a>

0800cf3c <__swsetup_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4b29      	ldr	r3, [pc, #164]	@ (800cfe4 <__swsetup_r+0xa8>)
 800cf40:	4605      	mov	r5, r0
 800cf42:	6818      	ldr	r0, [r3, #0]
 800cf44:	460c      	mov	r4, r1
 800cf46:	b118      	cbz	r0, 800cf50 <__swsetup_r+0x14>
 800cf48:	6a03      	ldr	r3, [r0, #32]
 800cf4a:	b90b      	cbnz	r3, 800cf50 <__swsetup_r+0x14>
 800cf4c:	f7fe f9ec 	bl	800b328 <__sinit>
 800cf50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf54:	0719      	lsls	r1, r3, #28
 800cf56:	d422      	bmi.n	800cf9e <__swsetup_r+0x62>
 800cf58:	06da      	lsls	r2, r3, #27
 800cf5a:	d407      	bmi.n	800cf6c <__swsetup_r+0x30>
 800cf5c:	2209      	movs	r2, #9
 800cf5e:	602a      	str	r2, [r5, #0]
 800cf60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf6a:	e033      	b.n	800cfd4 <__swsetup_r+0x98>
 800cf6c:	0758      	lsls	r0, r3, #29
 800cf6e:	d512      	bpl.n	800cf96 <__swsetup_r+0x5a>
 800cf70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf72:	b141      	cbz	r1, 800cf86 <__swsetup_r+0x4a>
 800cf74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf78:	4299      	cmp	r1, r3
 800cf7a:	d002      	beq.n	800cf82 <__swsetup_r+0x46>
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f7ff f927 	bl	800c1d0 <_free_r>
 800cf82:	2300      	movs	r3, #0
 800cf84:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf8c:	81a3      	strh	r3, [r4, #12]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	6063      	str	r3, [r4, #4]
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	f043 0308 	orr.w	r3, r3, #8
 800cf9c:	81a3      	strh	r3, [r4, #12]
 800cf9e:	6923      	ldr	r3, [r4, #16]
 800cfa0:	b94b      	cbnz	r3, 800cfb6 <__swsetup_r+0x7a>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfac:	d003      	beq.n	800cfb6 <__swsetup_r+0x7a>
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f000 f8b3 	bl	800d11c <__smakebuf_r>
 800cfb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfba:	f013 0201 	ands.w	r2, r3, #1
 800cfbe:	d00a      	beq.n	800cfd6 <__swsetup_r+0x9a>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	60a2      	str	r2, [r4, #8]
 800cfc4:	6962      	ldr	r2, [r4, #20]
 800cfc6:	4252      	negs	r2, r2
 800cfc8:	61a2      	str	r2, [r4, #24]
 800cfca:	6922      	ldr	r2, [r4, #16]
 800cfcc:	b942      	cbnz	r2, 800cfe0 <__swsetup_r+0xa4>
 800cfce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfd2:	d1c5      	bne.n	800cf60 <__swsetup_r+0x24>
 800cfd4:	bd38      	pop	{r3, r4, r5, pc}
 800cfd6:	0799      	lsls	r1, r3, #30
 800cfd8:	bf58      	it	pl
 800cfda:	6962      	ldrpl	r2, [r4, #20]
 800cfdc:	60a2      	str	r2, [r4, #8]
 800cfde:	e7f4      	b.n	800cfca <__swsetup_r+0x8e>
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	e7f7      	b.n	800cfd4 <__swsetup_r+0x98>
 800cfe4:	20000018 	.word	0x20000018

0800cfe8 <_sbrk_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d06      	ldr	r5, [pc, #24]	@ (800d004 <_sbrk_r+0x1c>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7f7 fbc8 	bl	8004788 <_sbrk>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_sbrk_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_sbrk_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20001008 	.word	0x20001008

0800d008 <__assert_func>:
 800d008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d00a:	4614      	mov	r4, r2
 800d00c:	461a      	mov	r2, r3
 800d00e:	4b09      	ldr	r3, [pc, #36]	@ (800d034 <__assert_func+0x2c>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4605      	mov	r5, r0
 800d014:	68d8      	ldr	r0, [r3, #12]
 800d016:	b954      	cbnz	r4, 800d02e <__assert_func+0x26>
 800d018:	4b07      	ldr	r3, [pc, #28]	@ (800d038 <__assert_func+0x30>)
 800d01a:	461c      	mov	r4, r3
 800d01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d020:	9100      	str	r1, [sp, #0]
 800d022:	462b      	mov	r3, r5
 800d024:	4905      	ldr	r1, [pc, #20]	@ (800d03c <__assert_func+0x34>)
 800d026:	f000 f841 	bl	800d0ac <fiprintf>
 800d02a:	f000 f8d5 	bl	800d1d8 <abort>
 800d02e:	4b04      	ldr	r3, [pc, #16]	@ (800d040 <__assert_func+0x38>)
 800d030:	e7f4      	b.n	800d01c <__assert_func+0x14>
 800d032:	bf00      	nop
 800d034:	20000018 	.word	0x20000018
 800d038:	0800ec86 	.word	0x0800ec86
 800d03c:	0800ec58 	.word	0x0800ec58
 800d040:	0800ec4b 	.word	0x0800ec4b

0800d044 <_calloc_r>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	fba1 5402 	umull	r5, r4, r1, r2
 800d04a:	b93c      	cbnz	r4, 800d05c <_calloc_r+0x18>
 800d04c:	4629      	mov	r1, r5
 800d04e:	f7ff f933 	bl	800c2b8 <_malloc_r>
 800d052:	4606      	mov	r6, r0
 800d054:	b928      	cbnz	r0, 800d062 <_calloc_r+0x1e>
 800d056:	2600      	movs	r6, #0
 800d058:	4630      	mov	r0, r6
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	220c      	movs	r2, #12
 800d05e:	6002      	str	r2, [r0, #0]
 800d060:	e7f9      	b.n	800d056 <_calloc_r+0x12>
 800d062:	462a      	mov	r2, r5
 800d064:	4621      	mov	r1, r4
 800d066:	f7fe f9d8 	bl	800b41a <memset>
 800d06a:	e7f5      	b.n	800d058 <_calloc_r+0x14>

0800d06c <__ascii_mbtowc>:
 800d06c:	b082      	sub	sp, #8
 800d06e:	b901      	cbnz	r1, 800d072 <__ascii_mbtowc+0x6>
 800d070:	a901      	add	r1, sp, #4
 800d072:	b142      	cbz	r2, 800d086 <__ascii_mbtowc+0x1a>
 800d074:	b14b      	cbz	r3, 800d08a <__ascii_mbtowc+0x1e>
 800d076:	7813      	ldrb	r3, [r2, #0]
 800d078:	600b      	str	r3, [r1, #0]
 800d07a:	7812      	ldrb	r2, [r2, #0]
 800d07c:	1e10      	subs	r0, r2, #0
 800d07e:	bf18      	it	ne
 800d080:	2001      	movne	r0, #1
 800d082:	b002      	add	sp, #8
 800d084:	4770      	bx	lr
 800d086:	4610      	mov	r0, r2
 800d088:	e7fb      	b.n	800d082 <__ascii_mbtowc+0x16>
 800d08a:	f06f 0001 	mvn.w	r0, #1
 800d08e:	e7f8      	b.n	800d082 <__ascii_mbtowc+0x16>

0800d090 <__ascii_wctomb>:
 800d090:	4603      	mov	r3, r0
 800d092:	4608      	mov	r0, r1
 800d094:	b141      	cbz	r1, 800d0a8 <__ascii_wctomb+0x18>
 800d096:	2aff      	cmp	r2, #255	@ 0xff
 800d098:	d904      	bls.n	800d0a4 <__ascii_wctomb+0x14>
 800d09a:	228a      	movs	r2, #138	@ 0x8a
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0a2:	4770      	bx	lr
 800d0a4:	700a      	strb	r2, [r1, #0]
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	4770      	bx	lr
	...

0800d0ac <fiprintf>:
 800d0ac:	b40e      	push	{r1, r2, r3}
 800d0ae:	b503      	push	{r0, r1, lr}
 800d0b0:	4601      	mov	r1, r0
 800d0b2:	ab03      	add	r3, sp, #12
 800d0b4:	4805      	ldr	r0, [pc, #20]	@ (800d0cc <fiprintf+0x20>)
 800d0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ba:	6800      	ldr	r0, [r0, #0]
 800d0bc:	9301      	str	r3, [sp, #4]
 800d0be:	f7ff fd3b 	bl	800cb38 <_vfiprintf_r>
 800d0c2:	b002      	add	sp, #8
 800d0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0c8:	b003      	add	sp, #12
 800d0ca:	4770      	bx	lr
 800d0cc:	20000018 	.word	0x20000018

0800d0d0 <__swhatbuf_r>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d8:	2900      	cmp	r1, #0
 800d0da:	b096      	sub	sp, #88	@ 0x58
 800d0dc:	4615      	mov	r5, r2
 800d0de:	461e      	mov	r6, r3
 800d0e0:	da0d      	bge.n	800d0fe <__swhatbuf_r+0x2e>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0e8:	f04f 0100 	mov.w	r1, #0
 800d0ec:	bf14      	ite	ne
 800d0ee:	2340      	movne	r3, #64	@ 0x40
 800d0f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	6031      	str	r1, [r6, #0]
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	b016      	add	sp, #88	@ 0x58
 800d0fc:	bd70      	pop	{r4, r5, r6, pc}
 800d0fe:	466a      	mov	r2, sp
 800d100:	f000 f848 	bl	800d194 <_fstat_r>
 800d104:	2800      	cmp	r0, #0
 800d106:	dbec      	blt.n	800d0e2 <__swhatbuf_r+0x12>
 800d108:	9901      	ldr	r1, [sp, #4]
 800d10a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d10e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d112:	4259      	negs	r1, r3
 800d114:	4159      	adcs	r1, r3
 800d116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d11a:	e7eb      	b.n	800d0f4 <__swhatbuf_r+0x24>

0800d11c <__smakebuf_r>:
 800d11c:	898b      	ldrh	r3, [r1, #12]
 800d11e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d120:	079d      	lsls	r5, r3, #30
 800d122:	4606      	mov	r6, r0
 800d124:	460c      	mov	r4, r1
 800d126:	d507      	bpl.n	800d138 <__smakebuf_r+0x1c>
 800d128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	6123      	str	r3, [r4, #16]
 800d130:	2301      	movs	r3, #1
 800d132:	6163      	str	r3, [r4, #20]
 800d134:	b003      	add	sp, #12
 800d136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d138:	ab01      	add	r3, sp, #4
 800d13a:	466a      	mov	r2, sp
 800d13c:	f7ff ffc8 	bl	800d0d0 <__swhatbuf_r>
 800d140:	9f00      	ldr	r7, [sp, #0]
 800d142:	4605      	mov	r5, r0
 800d144:	4639      	mov	r1, r7
 800d146:	4630      	mov	r0, r6
 800d148:	f7ff f8b6 	bl	800c2b8 <_malloc_r>
 800d14c:	b948      	cbnz	r0, 800d162 <__smakebuf_r+0x46>
 800d14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d152:	059a      	lsls	r2, r3, #22
 800d154:	d4ee      	bmi.n	800d134 <__smakebuf_r+0x18>
 800d156:	f023 0303 	bic.w	r3, r3, #3
 800d15a:	f043 0302 	orr.w	r3, r3, #2
 800d15e:	81a3      	strh	r3, [r4, #12]
 800d160:	e7e2      	b.n	800d128 <__smakebuf_r+0xc>
 800d162:	89a3      	ldrh	r3, [r4, #12]
 800d164:	6020      	str	r0, [r4, #0]
 800d166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d16a:	81a3      	strh	r3, [r4, #12]
 800d16c:	9b01      	ldr	r3, [sp, #4]
 800d16e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d172:	b15b      	cbz	r3, 800d18c <__smakebuf_r+0x70>
 800d174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d178:	4630      	mov	r0, r6
 800d17a:	f000 f81d 	bl	800d1b8 <_isatty_r>
 800d17e:	b128      	cbz	r0, 800d18c <__smakebuf_r+0x70>
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	f023 0303 	bic.w	r3, r3, #3
 800d186:	f043 0301 	orr.w	r3, r3, #1
 800d18a:	81a3      	strh	r3, [r4, #12]
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	431d      	orrs	r5, r3
 800d190:	81a5      	strh	r5, [r4, #12]
 800d192:	e7cf      	b.n	800d134 <__smakebuf_r+0x18>

0800d194 <_fstat_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4d07      	ldr	r5, [pc, #28]	@ (800d1b4 <_fstat_r+0x20>)
 800d198:	2300      	movs	r3, #0
 800d19a:	4604      	mov	r4, r0
 800d19c:	4608      	mov	r0, r1
 800d19e:	4611      	mov	r1, r2
 800d1a0:	602b      	str	r3, [r5, #0]
 800d1a2:	f7f7 fac9 	bl	8004738 <_fstat>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	d102      	bne.n	800d1b0 <_fstat_r+0x1c>
 800d1aa:	682b      	ldr	r3, [r5, #0]
 800d1ac:	b103      	cbz	r3, 800d1b0 <_fstat_r+0x1c>
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	bd38      	pop	{r3, r4, r5, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20001008 	.word	0x20001008

0800d1b8 <_isatty_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4d06      	ldr	r5, [pc, #24]	@ (800d1d4 <_isatty_r+0x1c>)
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	602b      	str	r3, [r5, #0]
 800d1c4:	f7f7 fac8 	bl	8004758 <_isatty>
 800d1c8:	1c43      	adds	r3, r0, #1
 800d1ca:	d102      	bne.n	800d1d2 <_isatty_r+0x1a>
 800d1cc:	682b      	ldr	r3, [r5, #0]
 800d1ce:	b103      	cbz	r3, 800d1d2 <_isatty_r+0x1a>
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	20001008 	.word	0x20001008

0800d1d8 <abort>:
 800d1d8:	b508      	push	{r3, lr}
 800d1da:	2006      	movs	r0, #6
 800d1dc:	f000 f82c 	bl	800d238 <raise>
 800d1e0:	2001      	movs	r0, #1
 800d1e2:	f7f7 fa59 	bl	8004698 <_exit>

0800d1e6 <_raise_r>:
 800d1e6:	291f      	cmp	r1, #31
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	d904      	bls.n	800d1fa <_raise_r+0x14>
 800d1f0:	2316      	movs	r3, #22
 800d1f2:	6003      	str	r3, [r0, #0]
 800d1f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1f8:	bd38      	pop	{r3, r4, r5, pc}
 800d1fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1fc:	b112      	cbz	r2, 800d204 <_raise_r+0x1e>
 800d1fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d202:	b94b      	cbnz	r3, 800d218 <_raise_r+0x32>
 800d204:	4628      	mov	r0, r5
 800d206:	f000 f831 	bl	800d26c <_getpid_r>
 800d20a:	4622      	mov	r2, r4
 800d20c:	4601      	mov	r1, r0
 800d20e:	4628      	mov	r0, r5
 800d210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d214:	f000 b818 	b.w	800d248 <_kill_r>
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d00a      	beq.n	800d232 <_raise_r+0x4c>
 800d21c:	1c59      	adds	r1, r3, #1
 800d21e:	d103      	bne.n	800d228 <_raise_r+0x42>
 800d220:	2316      	movs	r3, #22
 800d222:	6003      	str	r3, [r0, #0]
 800d224:	2001      	movs	r0, #1
 800d226:	e7e7      	b.n	800d1f8 <_raise_r+0x12>
 800d228:	2100      	movs	r1, #0
 800d22a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d22e:	4620      	mov	r0, r4
 800d230:	4798      	blx	r3
 800d232:	2000      	movs	r0, #0
 800d234:	e7e0      	b.n	800d1f8 <_raise_r+0x12>
	...

0800d238 <raise>:
 800d238:	4b02      	ldr	r3, [pc, #8]	@ (800d244 <raise+0xc>)
 800d23a:	4601      	mov	r1, r0
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	f7ff bfd2 	b.w	800d1e6 <_raise_r>
 800d242:	bf00      	nop
 800d244:	20000018 	.word	0x20000018

0800d248 <_kill_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	@ (800d268 <_kill_r+0x20>)
 800d24c:	2300      	movs	r3, #0
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	4611      	mov	r1, r2
 800d254:	602b      	str	r3, [r5, #0]
 800d256:	f7f7 fa0f 	bl	8004678 <_kill>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d102      	bne.n	800d264 <_kill_r+0x1c>
 800d25e:	682b      	ldr	r3, [r5, #0]
 800d260:	b103      	cbz	r3, 800d264 <_kill_r+0x1c>
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	bd38      	pop	{r3, r4, r5, pc}
 800d266:	bf00      	nop
 800d268:	20001008 	.word	0x20001008

0800d26c <_getpid_r>:
 800d26c:	f7f7 b9fc 	b.w	8004668 <_getpid>

0800d270 <_init>:
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d272:	bf00      	nop
 800d274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d276:	bc08      	pop	{r3}
 800d278:	469e      	mov	lr, r3
 800d27a:	4770      	bx	lr

0800d27c <_fini>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	bf00      	nop
 800d280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d282:	bc08      	pop	{r3}
 800d284:	469e      	mov	lr, r3
 800d286:	4770      	bx	lr
